/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Consultas;
import Clases.EnlaceBd;
import Clases.JCambiarState;
import Clases.LlenarCombobox;
import Clases.PdfDAO1;
import Clases.PdfVO;
import Clases.SearchConsultasDao;
import Clases.Temporal;
import Clases.factGlobal;
import Clases.imgTabla;
import Clases.reporteFact;
import Clases.vGraficasHono;
import Menu.Mprincipal;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.AttributedString;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.ui.RefineryUtilities;
import org.jfree.util.Rotation;

/**
 *
 * @author FCGinebraI
 */
public class ConsultaFacturas extends javax.swing.JInternalFrame {
    private String Nivel, nivelUsuario;
    private Thread searchThread;
    private final int DELAY = 500;
  public ConsultaFacturas() {
    initComponents();
    ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
    
    Calendar Fecha = new GregorianCalendar();
    FechaOne.setCalendar(Fecha);
    FechaTwo.setCalendar(Fecha);    
    
    JRpaciente.setSelected(true);   
    Jtabla.getTableHeader().setReorderingAllowed(false);

    DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) Jtabla.getTableHeader().getDefaultRenderer();
    headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

    Nivel = Tempo.getNivel();

    Jtabla.requestFocusInWindow();

    // Carga pesada en segundo plano
    cargarDatosEnSegundoPlano();
}
  
  private void cargarDatosEnSegundoPlano() {
    SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() throws Exception {
            informacionpdf();          // Carga de información
            visualizar_PdfVO(Jtabla);  // Población de la tabla
            conteoTabla();             // Conteo de filas
            return null;
        }

        @Override
        protected void done() {
            // Opcional: acciones después de cargar
        }
    };
    worker.execute();
}

  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOpciones = new javax.swing.JPopupMenu();
        Completar = new javax.swing.JMenuItem();
        Cancelar = new javax.swing.JMenuItem();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTxtSearch = new javax.swing.JTextField();
        JRpaciente = new javax.swing.JRadioButton();
        jRcodigo = new javax.swing.JRadioButton();
        JCestados = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        FechaOne = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        FechaTwo = new com.toedter.calendar.JDateChooser();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jEstadistica = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        Jtabla = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        Completar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/autorizacion.png"))); // NOI18N
        Completar.setText("Completar");
        Completar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompletarActionPerformed(evt);
            }
        });
        jOpciones.add(Completar);

        Cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/archivo.png"))); // NOI18N
        Cancelar.setText("Cancelar");
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });
        jOpciones.add(Cancelar);

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setMinimumSize(new java.awt.Dimension(1285, 663));
        setPreferredSize(new java.awt.Dimension(1292, 683));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(0, 0, 51));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Exportar Tabla:");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial Narrow", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("C O N S U L T A R          F A C T U R A S");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 0, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Buscar por:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 30));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTxtSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTxtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTxtSearchFocusLost(evt);
            }
        });
        jTxtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtSearchActionPerformed(evt);
            }
        });
        jTxtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxtSearchKeyTyped(evt);
            }
        });
        jPanel2.add(jTxtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 220, 50));

        JRpaciente.setBackground(new java.awt.Color(255, 255, 255));
        JRpaciente.setText("Cliente");
        JRpaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRpacienteActionPerformed(evt);
            }
        });
        jPanel2.add(JRpaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        jRcodigo.setBackground(new java.awt.Color(255, 255, 255));
        jRcodigo.setText("Factura");
        jRcodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRcodigoActionPerformed(evt);
            }
        });
        jPanel2.add(jRcodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, -1, -1));

        JCestados.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Espera", "Completado", "Cancelado" }));
        JCestados.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                JCestadosItemStateChanged(evt);
            }
        });
        jPanel2.add(JCestados, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, 180, 50));

        jLabel8.setText("Filtrar por Estado");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, -1, -1));

        FechaOne.setBackground(new java.awt.Color(255, 255, 255));
        FechaOne.setToolTipText("");
        FechaOne.setDateFormatString("yyyy-MM-dd");
        FechaOne.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel2.add(FechaOne, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 60, 170, 50));

        jLabel5.setText("Sortear por rango de fechas");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 40, -1, -1));

        FechaTwo.setBackground(new java.awt.Color(255, 255, 255));
        FechaTwo.setToolTipText("");
        FechaTwo.setDateFormatString("yyyy-MM-dd");
        FechaTwo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel2.add(FechaTwo, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 60, 170, 50));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/magnifier-1_icon-icons.com_56924.png"))); // NOI18N
        jButton4.setContentAreaFilled(false);
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 60, 70, 50));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logos/adobe_pdf_document_14979.png"))); // NOI18N
        jButton2.setToolTipText("Exportar análisis estadístico");
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 60, 70, 50));

        jEstadistica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Estadistica", "Exportar Tabla", "Detallado", "Global" }));
        jPanel2.add(jEstadistica, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 60, 160, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 1290, 120));

        Jtabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Código", "Usuario Encargado", "Cliente", "C.I", "Factura", "Método Pago", "Fecha", "Estado", "Correo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, true, true, false, true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Jtabla.setComponentPopupMenu(jOpciones);
        Jtabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JtablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Jtabla);
        if (Jtabla.getColumnModel().getColumnCount() > 0) {
            Jtabla.getColumnModel().getColumn(1).setResizable(false);
            Jtabla.getColumnModel().getColumn(2).setResizable(false);
            Jtabla.getColumnModel().getColumn(3).setResizable(false);
            Jtabla.getColumnModel().getColumn(5).setResizable(false);
            Jtabla.getColumnModel().getColumn(7).setResizable(false);
            Jtabla.getColumnModel().getColumn(8).setResizable(false);
            Jtabla.getColumnModel().getColumn(9).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 150, 1290, 450));

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Refrescar");
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton5.setContentAreaFilled(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 100, 30));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("0");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 10, 40, -1));

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Total de estudios:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 10, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-6, 610, 1310, 70));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTxtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTxtSearchFocusLost
        Jtabla.requestFocusInWindow();
    }//GEN-LAST:event_jTxtSearchFocusLost

    private void jTxtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtSearchActionPerformed

    private void jTxtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtSearchKeyPressed
/*
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {

            JCestudios.setSelectedItem("Todos");

            if(JRpaciente.isSelected()){

                Searchbyname();  acomodarceldas();
            }

            else if(jRusuario.isSelected()){

                SearchbyUser();   acomodarceldas();
            }

            else if(jRcodigo.isSelected()){

                SearchbyCod();   acomodarceldas();

            }

        }
*/
    }//GEN-LAST:event_jTxtSearchKeyPressed

    private void jTxtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtSearchKeyReleased
 JCestados.setSelectedItem("Todos");

        if (searchThread != null && searchThread.isAlive()) {
            searchThread.interrupt();
        }

        searchThread = new Thread(() -> {
            try {
                Thread.sleep(DELAY);
            } catch (InterruptedException ex) {
                return; // La búsqueda fue interrumpida
            }

            SwingUtilities.invokeLater(() -> {
                realizarBusqueda();
            });
        });

        searchThread.start();
    
   
    }//GEN-LAST:event_jTxtSearchKeyReleased

    private void jTxtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtSearchKeyTyped

    }//GEN-LAST:event_jTxtSearchKeyTyped

    private void JRpacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRpacienteActionPerformed
        this.JRpaciente.setSelected(true);
        jRcodigo.setSelected(false);
        // jTextField1.setText("V-");

    }//GEN-LAST:event_JRpacienteActionPerformed

    private void jRcodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRcodigoActionPerformed
        this.jRcodigo.setSelected(true);
        JRpaciente.setSelected(false);
        jTxtSearch.setText("");
    }//GEN-LAST:event_jRcodigoActionPerformed

    private void JCestadosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_JCestadosItemStateChanged
       
        
        if(JCestados.getSelectedIndex()!=-1){

        

        if(!JCestados.getSelectedItem().equals("Todos")){
       SearchbyState(Jtabla);
       acomodarceldas();
       conteoTabla();
       
       Jtabla.requestFocusInWindow();
       

            }

            else{
          
          limpiarTablaEstudios();
          visualizar_PdfVO(Jtabla);
          acomodarceldas();
          conteoTabla();
        //  jEstado.setSelectedItem("Todos");
          Jtabla.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_JCestadosItemStateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed


visualizar_PdfVO(Jtabla);
  conteoTabla();      
        /*
        SearchBetweenDates();
        if(Jtabla.getRowCount()>0){  acomodarceldas(); }

        conteoTabla();
        Jtabla.requestFocusInWindow();*/
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        
        
        
        if(Jtabla.getRowCount()<=0){  JOptionPane.showMessageDialog(null, "La tabla se encuentra vacia", "TABLA VACIA", JOptionPane.ERROR_MESSAGE);  }
        
       else  if(!Nivel.equals("Administrador")   ){
        JOptionPane.showMessageDialog(this, "PERMISO INSUFICIENTE PARA VER REPORTES", "ESTADISTICA", JOptionPane.ERROR_MESSAGE);
       }
        
        else if(jEstadistica.getSelectedItem().equals("Seleccionar Estadistica")){

         JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UNA ESTADISTICA", "ESTADISTICA", JOptionPane.ERROR_MESSAGE);
        
        }else if (jEstadistica.getSelectedItem().equals("Exportar Tabla")){
        pdf();
        }
        
        else if (jEstadistica.getSelectedItem().equals("Detallado")){
        pdfbyDetails();
        }
        
        
       else if (jEstadistica.getSelectedItem().equals("Global")){
          pdfbyGlobal() ;
        }
        
        
         
     



        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    
    
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    //    limpiarTablaEstudios();
    //    visualizar_PdfVO(Jtabla);
    //    acomodarceldas();
    //    conteoTabla();
       limpiarTablaEstudios();
       visualizar_PdfVO(Jtabla);
       conteoTabla();
        Jtabla.requestFocusInWindow();

    }//GEN-LAST:event_jButton5ActionPerformed

    
    
    
    int idtabla;
    String codigoFact, usuario, cliente, estado, correo;
    
    private void JtablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JtablaMouseClicked

 

   try{
       
       //private String Nivel, nivelUsuario;  
       if(Nivel.equals("Administrador") ||  Nivel.equals("Aux.")){
    
        int column = Jtabla.getColumnModel().getColumnIndexAtX(evt.getX());
        int row = evt.getY() / Jtabla.getRowHeight();
        int fila = Jtabla.getSelectedRow();
        
        
       // idtabla=(int) (Jtabla.getValueAt(fila, 0));
        idtabla=(int) (Jtabla.getValueAt(fila, 0));
        usuario= (Jtabla.getValueAt(fila, 2).toString());
        cliente= (Jtabla.getValueAt(fila, 3).toString());
        estado= (Jtabla.getValueAt(fila, 7).toString());
        correo= (Jtabla.getValueAt(fila, 8).toString());
       
        
        if (row < Jtabla.getRowCount() && row >= 0 && column < Jtabla.getColumnCount() && column >= 0) {
            idtabla = (int) Jtabla.getValueAt(row, 0);
            Object value = Jtabla.getValueAt(row, column);
            
            if (value instanceof JButton) {
                ((JButton) value).doClick();
                JButton boton = (JButton) value;

                  
                    try {
                         PdfDAO1 click = new PdfDAO1();
                         click.simularClic(boton);
                         
                         PdfDAO1 pd = new PdfDAO1();
                         pd.show_bill(idtabla);
                         
                       
                     //   Desktop.getDesktop().open(new File("Factura.PNG"));
                       // Desktop.getDesktop().open(new File("Reporte #"+id+"_"+name+".pdf"));
                    } catch (Exception ex) {JOptionPane.showMessageDialog(null,"ERROR AL MOSTRAR LA FACTURA", "FACTURA ", JOptionPane.ERROR_MESSAGE);
                    System.out.println("error abriendo pdf:" + ex);
                    
                    }
            }  
 
        }
   
      }
       
       
       else{
       JOptionPane.showMessageDialog(null,"NO CUENTA CON PERMISOS SUFICIENTES PARA VER REPORTES", "HISTORIAS", JOptionPane.ERROR_MESSAGE);
       }
   }catch(Exception e){ 
   System.out.println(e);
   Jtabla.requestFocusInWindow();
   }
        
        
    }//GEN-LAST:event_JtablaMouseClicked

    
    
    
    
    
    
    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed
          int fila = Jtabla.getSelectedRow();
   
      if (fila == -1) {
      JOptionPane.showMessageDialog(this, "Debe seleccionar una Fila");
} 

      else if (estado.equals("Cancelado")){ JOptionPane.showMessageDialog(null, "El reporte o uno de los mismos ya se encuentra Cancelado", "Estado", JOptionPane.WARNING_MESSAGE); Jtabla.requestFocusInWindow();}

else {
          
       if (JOptionPane.showConfirmDialog(rootPane, "¿Realmente desea cancelar estos reportes? \n Esta acción devolvera los productos al inventario",
            "Cancelar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {     
            backInventory();
    cancelarFilasSeleccionadas();
    JOptionPane.showMessageDialog(null, "El estado se ha actualizado a : Cancelado.\n Además se ha devuelto el stock de inventario referente a este reporte");
  
    limpiarTablaEstudios();
    if (!JCestados.getSelectedItem().equals("Todos")) {
            SearchbyState(Jtabla);
    }  else {
        visualizar_PdfVO(Jtabla);
    }

    acomodarceldas();
    Jtabla.requestFocusInWindow();
    }}
      
      
      
      
      
    }//GEN-LAST:event_CancelarActionPerformed

    
    
 public void backInventory() {
    String sql = "SELECT " +
                 "    p.id_producto, " +
                 "    SUM(u.cantidad) AS total_cantidad " +
                 "FROM table_factdetail u " +
                 "INNER JOIN table_productos p ON u.producto = p.code_prd " +
                 "WHERE u.id_factura = ? " +
                 "GROUP BY p.id_producto";

    try (Connection con = new EnlaceBd().getConnection();
         PreparedStatement ps = con.prepareStatement(sql)) {

        ps.setInt(1, idtabla);

        try (ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                int idProducto = rs.getInt("id_producto");
                int cantidad = rs.getInt("total_cantidad");

                // Aquí haces el UPDATE para sumar al inventario
                String updateSql = "UPDATE table_productos SET existencia = existencia + ? WHERE id_producto = ?";
                try (PreparedStatement updatePs = con.prepareStatement(updateSql)) {
                    updatePs.setInt(1, cantidad);
                    updatePs.setInt(2, idProducto);
                    updatePs.executeUpdate();
                }
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,
                "Error al restaurar inventario: " + e.getMessage(),
                "Error de base de datos",
                JOptionPane.ERROR_MESSAGE);
    }
}    
    
    
    
    
    
    
    
    
    
    
    
    private void CompletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompletarActionPerformed
          int fila = Jtabla.getSelectedRow();
if (fila == -1) {
    JOptionPane.showMessageDialog(this, "Debe seleccionar una Fila");
} 

else if (estado.equals("Completado")){ JOptionPane.showMessageDialog(null, "El reporte o uno de los mismos ya se encuentra Completado", "Estado", JOptionPane.WARNING_MESSAGE); Jtabla.requestFocusInWindow();}

else {
    completarFilasSeleccionadas();
    JOptionPane.showMessageDialog(null, "El estado de la factura se ha actualizado a : Completado");
    limpiarTablaEstudios();
    
    if (!JCestados.getSelectedItem().equals("Todos")) {
           searchBetween(params -> search. listarHonoState(params[0], params[1], params[2], params[3]));
    }  else {
        visualizar_PdfVO(Jtabla);
    }

    acomodarceldas();
    Jtabla.requestFocusInWindow();
}
    
    }//GEN-LAST:event_CompletarActionPerformed

    
    
        
     private void cancelarFilasSeleccionadas() {

        DefaultTableModel modelo = (DefaultTableModel) Jtabla.getModel();
        int columnaId = 0; // Índice de la columna que contiene el ID en la tabla
        int columnaPaciente = 2; //
        // Obtén las filas seleccionadas
        int[] filasSeleccionadas = Jtabla.getSelectedRows();

        // Itera sobre las filas seleccionadas y actualiza el estado
        for (int fila : filasSeleccionadas) {
            int id = (int) modelo.getValueAt(fila, columnaId); // Obtiene el ID
            String nombrepaciente = modelo.getValueAt(fila, columnaPaciente).toString(); 
            // Realiza la actualización del estado en la base de datos utilizando el ID
            setState.stateFactura(104,    id );
            String accion= "HORA: "+MP.Time.getText()+ " Cancelo la factura "+idtabla+" del cliente: "+ cliente;  
            auditoriaMethod(accion);
        }
    }
    
    
    
         // Método para autorizar las filas seleccionadas
    private void completarFilasSeleccionadas() {
       
        
        DefaultTableModel modelo = (DefaultTableModel) Jtabla.getModel();
        int columnaId = 0; // Índice de la columna que contiene el ID en la tabla
        int columnaPaciente = 2; //
        // Obtén las filas seleccionadas
        int[] filasSeleccionadas = Jtabla.getSelectedRows();

        // Itera sobre las filas seleccionadas y actualiza el estado
        for (int fila : filasSeleccionadas) {
            int id = (int) modelo.getValueAt(fila, columnaId); // Obtiene el ID
            String nombrepaciente = modelo.getValueAt(fila, columnaPaciente).toString(); 
            // Realiza la actualización del estado en la base de datos utilizando el ID
            setState.stateFactura(103,    id );
            String accion= "HORA: "+MP.Time.getText()+ " Completo la factura "+idtabla+" del cliente: "+ cliente;  
            auditoriaMethod(accion);
          
        }
    }
    
     
     
     
     
       
     
    public void searchBetween(Function<String[], ArrayList<PdfVO>> searchFunction) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    String fecha = dateFormat.format(FechaOne.getDate());
    String fecha2 = dateFormat.format(FechaTwo.getDate());
    
    // Crear un array con los parámetros para pasar al Function
    String[] params = {fecha, fecha2,JCestados.getSelectedItem().toString(),JCestados.getSelectedItem().toString() };

    try {
        // Usar la función pasada como parámetro para obtener la lista
        ArrayList<PdfVO> list = searchFunction.apply(params);
        
        // Configuración de la tabla y procesamiento de datos...
        Jtabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // No editable
            }
        };

        
        

        // Definir las columnas una sola vez
        String[] columnNames = {
            "Código", "Especialidad", "Especialista", "Usuario Encargado", 
            "Reporte", "Fecha Inicio", "Fecha Cierre", "Telefono", "Correo", "Estado"
        };
        for (String column : columnNames) {
            dt.addColumn(column);
        }

        // Cargar el icono una sola vez
        ImageIcon icono = get_Image("/Logos/32pdf.png") != null ? 
                          new ImageIcon(get_Image("/Logos/32pdf.png")) : null;

        limpiarTablaEstudios();


        
        if (!list.isEmpty()) {
            for (PdfVO vo : list) {
                Object[] fila = {
                    vo.getId_hon(), 
                    vo.getHon_especialidad(),
                    vo.getHon_especialista(),
                    vo.getHon_encargado(),
                    new JButton(icono),
                    vo.getHon_fecha1(),
                    vo.getHon_fecha2(),
                    vo.getHo_telefono(),
                    vo.getHo_correo(),
                    vo.getHo_estado()
                };
                dt.addRow(fila);
            }

            // Asignar el modelo a la tabla y ajustar la altura
            Jtabla.setModel(dt);
            Jtabla.setRowHeight(32);
    
        }

    } catch (Exception e) {
        System.err.println("Error en searchByName: " + e.getMessage());
    }
}
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
      public void visualizar_PdfVO(JTable tabla) {
        
        String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
        String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());
        try {
        
        
        tabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
 
        dt.addColumn("ID");
        dt.addColumn("Código");
        dt.addColumn("Usuario Encargado");
        dt.addColumn("Cliente");
        dt.addColumn("C.I");
        dt.addColumn("Factura");
        dt.addColumn("Método Pago");
        dt.addColumn("Fecha");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
   
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }

       
        PdfVO vo = new PdfVO();
        ArrayList<PdfVO> list = search.listarFacturas(fecha, fecha2);
        limpiarTablaEstudios();
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[12];
                vo = list.get(i);
                
       
                fila[0] = vo.getId_factura();
                fila[1] = vo.getFac_code();
                fila[2] = vo.getFac_usuario();
                fila[3] = vo.getFac_nombre();
                fila[4] = vo.getFac_ced();
                fila[5] = new JButton(icono);
                
                     
             /*   
                if (vo.getArchivoHistoria() != null) {
                    fila[5] = new JButton(icono);
                } else {
                    fila[5] = new JButton("Vacio");
                }*/
                        fila[6] = vo.getMoneda();
                        fila[7] = vo.getFac_fecha();
                        fila[8] = vo.getFac_estado();
                        fila[9] = vo.getFac_correo();
                
                dt.addRow(fila);
            }
            tabla.setModel(dt);
            tabla.setRowHeight(32);
            acomodarceldas();
        }
         } catch (Exception e) { System.out.println(e + "visualizarpdf") ;
        }
  
    }
    
    
    
    

      
      
      
      
      
      
      
      
      
      
      
    
        
    
   public Image get_Image(String ruta) {
        try {
            ImageIcon imageIcon = new ImageIcon(getClass().getResource(ruta));
            Image mainIcon = imageIcon.getImage();
            return mainIcon;
        } catch (Exception e) { System.out.println(e);
        }
        return null;
    }
    
    
    
    
    
    
    
    
    
            void limpiarTablaEstudios() {
        DefaultTableModel tb = (DefaultTableModel) Jtabla.getModel();
        int a = Jtabla.getRowCount()-1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount()-1);

        }
    }
    
    
    
    public void conteoTabla(){
       
       for(int x =0; x<=Jtabla.getRowCount(); x++ ){
       jLabel4.setText(""+x);
       
       }
       }
           

 
 
    public void acomodarceldas()
    {
    
        
        DefaultTableModel Tabla = (DefaultTableModel)Jtabla.getModel();
        DefaultTableCellRenderer Alinear = new DefaultTableCellRenderer();
        Alinear.setHorizontalAlignment(SwingConstants.CENTER);
        
        Jtabla.getColumnModel().getColumn(0).setMaxWidth(0);
        Jtabla.getColumnModel().getColumn(0).setMinWidth(0);
        Jtabla.getColumnModel().getColumn(0).setPreferredWidth(0);
              
        Jtabla.getColumnModel().getColumn(6).setMaxWidth(0);
        Jtabla.getColumnModel().getColumn(6).setMinWidth(0);
        Jtabla.getColumnModel().getColumn(6).setPreferredWidth(0);
        
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Código")).setPreferredWidth(10);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Usuario Encargado")).setPreferredWidth(50);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Cliente")).setPreferredWidth(60);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("C.I")).setPreferredWidth(50);
       //Jtabla.getColumnModel().getColumn(Tabla.findColumn("Reporte")).setPreferredWidth(40);
      //  Jtabla.getColumnModel().getColumn(Tabla.findColumn("Método Pago")).setPreferredWidth(30);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Fecha")).setPreferredWidth(30);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Estado")).setPreferredWidth(30);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Correo")).setPreferredWidth(120);
         
        
        
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Código")).setCellRenderer(Alinear);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Usuario Encargado")).setCellRenderer(Alinear);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Cliente")).setCellRenderer(Alinear);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("C.I")).setCellRenderer(Alinear);
   //     Jtabla.getColumnModel().getColumn(Tabla.findColumn("Método Pago")).setCellRenderer(Alinear);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Fecha")).setCellRenderer(Alinear);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Estado")).setCellRenderer(Alinear);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Correo")).setCellRenderer(Alinear);
       
    
    }
            
          
    
    
    
    
    
     private void realizarBusqueda() {
        JCestados.setSelectedItem("Todos");

        if (JRpaciente.isSelected()) {
            if (jTxtSearch.getText().length() >= 4 || jTxtSearch.getText().isEmpty()) {
                Searchbyname(Jtabla);
          
          
            }
            

        } 
        
        
         else if (jRcodigo.isSelected()) {
            
            if (jTxtSearch.getText().length() >= 1 || jTxtSearch.getText().isEmpty()) {
                Searchbycod(Jtabla);
              
 
            }
        }
        
          conteoTabla();
    }

    
    
    
    
   public void Searchbyname(JTable tabla){
    
           String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
        String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());
        try {
        
        
        tabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
 
        dt.addColumn("ID");
        dt.addColumn("Código");
        dt.addColumn("Usuario Encargado");
        dt.addColumn("Cliente");
        dt.addColumn("C.I");
        dt.addColumn("Factura");
        dt.addColumn("Método Pago");
        dt.addColumn("Fecha");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
   
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }

       
        PdfVO vo = new PdfVO();
        ArrayList<PdfVO> list = search.listarFacBy(jTxtSearch.getText(),fecha, fecha2);
        limpiarTablaEstudios();
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[12];
                vo = list.get(i);
                
       
                fila[0] = vo.getId_factura();
                fila[1] = vo.getFac_code();
                fila[2] = vo.getFac_usuario();
                fila[3] = vo.getFac_nombre();
                fila[4] = vo.getFac_ced();
                fila[5] = new JButton(icono);
                
                     
             /*   
                if (vo.getArchivoHistoria() != null) {
                    fila[5] = new JButton(icono);
                } else {
                    fila[5] = new JButton("Vacio");
                }*/
                        fila[6] = vo.getMoneda();
                        fila[7] = vo.getFac_fecha();
                        fila[8] = vo.getFac_estado();
                        fila[9] = vo.getFac_correo();
                
                dt.addRow(fila);
            }
            tabla.setModel(dt);
            tabla.setRowHeight(32);
            acomodarceldas();
        }
         } catch (Exception e) { System.out.println(e + "visualizarpdf") ;
        }
  }
    
 
   
   
   
   
   
   
   
       
   public void Searchbycod(JTable tabla){
    
           String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
        String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());
        try {
        
        
        tabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
 
        dt.addColumn("ID");
        dt.addColumn("Código");
        dt.addColumn("Usuario Encargado");
        dt.addColumn("Cliente");
        dt.addColumn("C.I");
        dt.addColumn("Factura");
        dt.addColumn("Método Pago");
        dt.addColumn("Fecha");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
   
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }

       
        PdfVO vo = new PdfVO();
        ArrayList<PdfVO> list = search.listarFacByCod(jTxtSearch.getText(),fecha, fecha2);
        limpiarTablaEstudios();
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[12];
                vo = list.get(i);
                
       
                fila[0] = vo.getId_factura();
                fila[1] = vo.getFac_code();
                fila[2] = vo.getFac_usuario();
                fila[3] = vo.getFac_nombre();
                fila[4] = vo.getFac_ced();
                fila[5] = new JButton(icono);
                fila[6] = vo.getMoneda();
                fila[7] = vo.getFac_fecha();
                fila[8] = vo.getFac_estado();
                fila[9] = vo.getFac_correo();
                
                dt.addRow(fila);
            }
            tabla.setModel(dt);
            tabla.setRowHeight(32);
            acomodarceldas();
        }
         } catch (Exception e) { System.out.println(e + "visualizarpdf") ;
        }
  }
    
 
   
   
   
   
   
   
   
    
   public void SearchbyState(JTable tabla){
    
           String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
        String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());
        try {
        
        
        tabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
 
        dt.addColumn("ID");
        dt.addColumn("Código");
        dt.addColumn("Usuario Encargado");
        dt.addColumn("Cliente");
        dt.addColumn("C.I");
        dt.addColumn("Factura");
        dt.addColumn("Método Pago");
        dt.addColumn("Fecha");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
   
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }

       
        PdfVO vo = new PdfVO();
        ArrayList<PdfVO> list = search.listarFacByState(JCestados.getSelectedItem().toString(),fecha, fecha2);
        limpiarTablaEstudios();
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[12];
                vo = list.get(i);
                
       
                fila[0] = vo.getId_factura();
                fila[1] = vo.getFac_code();
                fila[2] = vo.getFac_usuario();
                fila[3] = vo.getFac_nombre();
                fila[4] = vo.getFac_ced();
                fila[5] = new JButton(icono);
                fila[6] = vo.getMoneda();
                fila[7] = vo.getFac_fecha();
                fila[8] = vo.getFac_estado();
                fila[9] = vo.getFac_correo();
                
                dt.addRow(fila);
            }
            tabla.setModel(dt);
            tabla.setRowHeight(32);
            acomodarceldas();
        }
         } catch (Exception e) { System.out.println(e + "visualizarpdf") ;
        }
  }
   
   
   
   
   
 
   
   
   
   
   
   
   

    public void grafico() {
    String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
    String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());

    Connection con;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {


        // Crear el dataset de la gráfica circular
        DefaultPieDataset dataset = new DefaultPieDataset();
        double total = 0.0; // Para calcular el total

        // Obtener los datos de la base de datos y agregarlos al dataset
    String sql = "SELECT Id_Estadoh, n.especialidad, COUNT(*) AS num\n" +
"FROM table_historias AS a\n" +
"INNER JOIN table_especialidad n ON a.Id_Hespecialidad = n.id_especialidad\n" +
"WHERE a.Id_Estadoh <> 104 AND a.Id_Estadoh <> 102\n" +
"AND Fecha_Historia BETWEEN ? AND ?\n" +
"GROUP BY Id_Estadoh, n.especialidad;";

        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setString(1, fecha);
        ps.setString(2, fecha2);
        rs = ps.executeQuery();
        DateTimeFormatter fth = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).ofPattern("dd-MM-yyyy--HH-mm");
        LocalDateTime fechaactual = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);

        while (rs.next()) {
            String estudio = rs.getString("especialidad");
            int num = rs.getInt("num");
            total += num; // Sumar al total
            dataset.setValue(estudio, num);
        }

        JFreeChart jf = ChartFactory.createPieChart3D("R E P O R T E     C O N S U L T A S" + "\n\nEMITIDO EL " + fechaactual + " " + MP.jLabel102.getText(), dataset, true, true, false);

        // Obtener el plot (gráfico circular 3D)
        PiePlot3D plot = (PiePlot3D) jf.getPlot();

        // Configurar generador de etiquetas de sección para mostrar los porcentajes
        PieSectionLabelGenerator labelGenerator = new CustomPieSectionLabelGenerator(total);
        plot.setLabelGenerator(labelGenerator);
        plot.setDirection(Rotation.CLOCKWISE); // Cambiar la dirección de rotación del gráfico

        // Mostrar la gráfica en una ventana
        ChartFrame f = new ChartFrame("GRAFICO HISTORIAS CLINICAS", jf);
        f.setSize(1000, 600);
        RefineryUtilities.centerFrameOnScreen(f); // Centrar el gráfico en la pantalla
        f.setVisible(true);

        // Guardar la gráfica como imagen PNG (opcional)
        // ChartUtilities.saveChartAsPNG(new File(rutaDestino), jf, 800, 600);
    } catch (SQLException e) {
        System.out.println(e.toString());
    }
}
      
     
  
     
     
     public void graficoByDr() throws IOException {
    String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
    String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());

    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String rutaDestino = "C:\\Cyberia\\dist\\grafica_Historia.png"; // Ruta de destino de la imagen

        // Crear la gráfica y configurarla
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // Obtener los datos de la base de datos y agregarlos al dataset
   StringBuilder sql = new StringBuilder();
sql.append("SELECT Id_Estadoh, p.Usuario, COUNT(*) AS num ")
   .append("FROM table_historias AS a ")
   .append("INNER JOIN table_usuario p ON p.IdPersonal= a.Id_usuarioh ")
   .append("INNER JOIN table_especialidad n ON a.Id_Hespecialidad = n.id_especialidad ")
   .append("WHERE a.Id_Estadoh <> 104 AND a.Id_Estadoh <> 102 ")
   .append("AND Fecha_Historia BETWEEN ? AND ? ");

// Agregar la condición para la especialidad
if (!JCestados.getSelectedItem().equals("Todos")) {
     sql.append("AND n.Especialidad = ? "); // Agregamos la condición de especialidad
}
// Completar la consulta
sql.append("GROUP BY Id_Estadoh, p.usuario ORDER BY num DESC");

// Convertir el StringBuilder a String
String finalSql = sql.toString();

        con = cn.getConnection();
        ps = con.prepareStatement(finalSql);
        ps.setString(1, fecha);
        ps.setString(2, fecha2);
        if (!JCestados.getSelectedItem().equals("Todos")) {
        ps.setString(3, JCestados.getSelectedItem().toString());
        }
        
        rs = ps.executeQuery();

        while (rs.next()) {
            String estudio = rs.getString("Usuario");
            int num = rs.getInt("num");
            dataset.addValue(num, "Número de Historias", estudio);
        }

        // Crear gráfico de barras 3D
        JFreeChart jf = ChartFactory.createBarChart3D(
                "R E P O R T E     H I S T O R I A S",
                "Usuario",
                "Número de Historias",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        // Personalizar el gráfico
        CategoryPlot plot = (CategoryPlot) jf.getPlot();
        BarRenderer3D renderer = new BarRenderer3D();

        // Asignar colores diferentes
        Color[] colors = {
            Color.RED, Color.BLUE, Color.GREEN, Color.ORANGE, Color.CYAN,
            Color.MAGENTA, Color.YELLOW, Color.DARK_GRAY, Color.PINK
        };

        for (int i = 0; i < dataset.getColumnCount(); i++) {
            renderer.setSeriesPaint(i, colors[i % colors.length]); // Asignar colores en ciclo
        }

        plot.setRenderer(renderer);
        renderer.setSeriesPaint(0, Color.GREEN); 
        plot.setDomainAxis(new CategoryAxis("Doctores"));
        plot.setRangeAxis(new NumberAxis("Número de Historias"));

        // Configurar el rango del eje Y para asegurarse de que todas las barras se muestren
        NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();
        yAxis.setAutoRangeIncludesZero(true);

        // Asegurarse de que las etiquetas del eje X no se corten
        plot.getDomainAxis().setCategoryLabelPositions(CategoryLabelPositions.UP_45);

        // Guardar la gráfica como imagen PNG
        ChartUtilities.saveChartAsPNG(new File(rutaDestino), jf, 900, 500);
    } catch (SQLException e) {
        System.out.println(e.toString());
    } finally {
        // Cerrar recursos
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            System.out.println(e.toString());
        }
    }
}
     
     
     
     
       public void  graficoPdf() throws IOException {
    String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
    String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());

    Connection con;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String rutaDestino = "C:\\Cyberia\\dist\\grafica_Historia.png"; // Ruta de destino de la imagen

        // Crear la gráfica y configurarla
        DefaultPieDataset dataset = new DefaultPieDataset();
        double total = 0.0; // Para calcular el total

        // Obtener los datos de la base de datos y agregarlos al dataset
     String sql = "SELECT Id_Estadoh, n.especialidad, COUNT(*) AS num\n" +
"FROM table_historias AS a\n" +
"INNER JOIN table_especialidad n ON a.Id_Hespecialidad = n.id_especialidad\n" +
"WHERE a.Id_Estadoh <> 104 AND a.Id_Estadoh <> 102\n" +
"AND Fecha_Historia BETWEEN ? AND ?\n" +
"GROUP BY Id_Estadoh, n.especialidad";

        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setString(1, fecha);
        ps.setString(2, fecha2);
        rs = ps.executeQuery();
        DateTimeFormatter fth = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).ofPattern("dd-MM-yyyy--HH-mm");
        LocalDateTime fechaactual = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);

        while (rs.next()) {
            String estudio = rs.getString("especialidad");
            int num = rs.getInt("num");
            total += num; // Sumar al total
            dataset.setValue(estudio, num);
        }

        JFreeChart jf = ChartFactory.createPieChart("R E P O R T E     H I S T O R I A S", dataset, true, true, false);

        // Obtener el plot (gráfico circular)
        PiePlot plot = (PiePlot) jf.getPlot();

        // Configurar generador de etiquetas de sección para mostrar los porcentajes
        PieSectionLabelGenerator labelGenerator = new CustomPieSectionLabelGenerator(total);
        plot.setLabelGenerator(labelGenerator);
        plot.setDirection(Rotation.CLOCKWISE); // Cambiar la dirección de rotación del gráfico

        /* Mostrar la gráfica en una ventana
        ChartFrame f = new ChartFrame("GRAFICO LABORATORIO", jf);
        f.setSize(1000, 500);
        RefineryUtilities.centerFrameOnScreen(f); // Centrar el gráfico en la pantalla
        f.setVisible(true);
*/
       // Guardar la gráfica como imagen PNG
         ChartUtilities.saveChartAsPNG(new File(rutaDestino), jf, 900, 500);
    } catch (SQLException e) {
        System.out.println(e.toString());
    }
}
     
     
     
     
     
     
     
     
     
     
     
     
     
   public class CustomPieSectionLabelGenerator implements PieSectionLabelGenerator {
    private double total;

    public CustomPieSectionLabelGenerator(double total) {
        this.total = total;
    }

    
    public String generateSectionLabel(PieDataset dataset, Comparable key) {
        double value = dataset.getValue(key).doubleValue();
        double percentage = (value / total) * 100.0;

        DecimalFormat format = new DecimalFormat("0.00%");
        return key.toString() + ": " + value + " (" + format.format(percentage / 100.0) + ")";
    }

    
    public String generateToolTip(PieDataset dataset, Comparable key) {
        return generateSectionLabel(dataset, key);
    }

        @Override
        public AttributedString generateAttributedSectionLabel(PieDataset pd, Comparable cmprbl) {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    }
    
         

   
   


      
          
       
     public void pdf() {
         

         
      try {
        
          
         DateTimeFormatter fth = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).ofPattern("dd-MM-yyyy--HH-mm");
         LocalDateTime fechaactual = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
          

         
 
    
      
                   
            String   PdfNames="ReporteFactura"+"_"+fth.format(fechaactual); 
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            Paragraph saltolinea = new Paragraph();
            saltolinea.add("\n");

            FileOutputStream archivo;
            File file = new File("C:\\Cyberia\\Reportes\\" + PdfNames + ".pdf");

            archivo = new FileOutputStream(file);
            Document doc = new Document();
            PdfWriter writer=  PdfWriter.getInstance(doc, archivo);
            doc.setMargins(36, 36, 130, 130);
            doc.open();
            
                    
 

    


            Paragraph fecha = new Paragraph();
            fecha.add(Chunk.NEWLINE);
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(MP.FechaAdmin.getDate());
            String Hora = MP.Time.getText()+" "+MP.jLabel102.getText();
    

            
            // Cargar la imagen
com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("C:\\Cyberia\\src\\imagenes\\Logo_System.png");
// Escalar a un tamaño adecuado sin deformar
header.scaleToFit(120, 80); // Puedes ajustar según el diseño
// Obtener el alto del documento
float pageHeight = doc.getPageSize().getHeight();
// Posicionar en la esquina superior izquierda con margen
float marginLeft = 30f; // distancia desde el borde izquierdo
float marginTop = 30f;  // distancia desde el borde superior

header.setAbsolutePosition(marginLeft, pageHeight - header.getScaledHeight() - marginTop);
doc.add(header);



// Centrado de los textos con PdfContentByte
PdfContentByte CB = writer.getDirectContent();  
BaseFont BF2 = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

// Configuración de las fuentes
CB.beginText();
CB.setFontAndSize(BF2, 12);

// Obtenemos las coordenadas dinámicamente para centrar el texto en la página
float pageWidth = doc.getPageSize().getWidth();
float empresaWidth = BF2.getWidthPoint(empresa, 12);
float empresaX = (pageWidth - empresaWidth) / 2; // Centramos el texto de la empresa

CB.setTextMatrix(empresaX, 800);
CB.showText(empresa);


CB.setFontAndSize(BF2, 10);
float fechaWidth = BF2.getWidthPoint("FECHA: " + Fecha, 10);
float fechaX = (pageWidth - fechaWidth) / 2;
CB.setTextMatrix(460, 780);
CB.showText("FECHA: " + Fecha);

// Centramos el texto del "rif"
CB.setFontAndSize(BF, 10);
float rifWidth = BF.getWidthPoint(rif, 10);
float rifX = (pageWidth - rifWidth) / 2;
CB.setTextMatrix(rifX, 790);
CB.showText(rif);

// Centramos la fecha


// Centramos la hora
CB.setFontAndSize(BF2, 10);
float horaWidth = BF2.getWidthPoint("HORA: " + Hora, 10);
float horaX = (pageWidth - horaWidth) / 2;
CB.setTextMatrix(460, 770);
CB.showText("HORA: " + Hora);

// Centramos la ubicación
CB.setFontAndSize(BF2, 8);
float ubicacionWidth = BF2.getWidthPoint(ubicacion, 8);
float ubicacionX = (pageWidth - ubicacionWidth) / 2;
CB.setTextMatrix(ubicacionX, 740);
CB.showText(ubicacion);

// Centramos los teléfonos
CB.setFontAndSize(BF2, 8);
float telefonosWidth = BF2.getWidthPoint(telefonos, 8);
float telefonosX = (pageWidth - telefonosWidth) / 2;
CB.setTextMatrix(telefonosX, 730);
CB.showText(telefonos);

// Línea horizontal (ajustada al centro)
CB.setTextMatrix((pageWidth - 400) / 2, 725);
CB.showText("_________________________________________________________________________________________");

CB.endText();
        
       //BODY 
       
            //productos
            
            
            PdfPTable  tablapro = new PdfPTable(7);
            
            tablapro.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            
            tablapro.setWidthPercentage(100);  
            float[] medidaCeldas = {3f, 4f, 4f,3f,3f,3f, 3f};
            tablapro.setWidths(medidaCeldas);
            tablapro.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph tcolumna1 = new Paragraph("CÓD");
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(10);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna1);
        
          
            Paragraph tcolumna2 = new Paragraph("ENCARGADO");
            tcolumna2.getFont().setStyle(Font.BOLD);
            tcolumna2.getFont().setSize(10);        
            tcolumna2.setFont(Letra);
            tcolumna2.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna2);
        
            Paragraph tcolumna3 = new Paragraph("CLIENTE");
            tcolumna3.getFont().setStyle(Font.BOLD);
            tcolumna3.getFont().setSize(10);        
            tcolumna3.setFont(Letra);
            tcolumna3.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna3);
            
            Paragraph tcolumna4 = new Paragraph("C.I");
            tcolumna4.getFont().setStyle(Font.BOLD);
            tcolumna4.getFont().setSize(10);        
            tcolumna4.setFont(Letra);
            tcolumna4.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna4);
            
            Paragraph tcolumna6 = new Paragraph("PAGO");
            tcolumna6.getFont().setStyle(Font.BOLD);
            tcolumna6.getFont().setSize(10);        
            tcolumna6.setFont(Letra);
            tcolumna6.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna6);
            
            
            Paragraph tcolumna5 = new Paragraph("FECHA");
            tcolumna5.getFont().setStyle(Font.BOLD);
            tcolumna5.getFont().setSize(10);        
            tcolumna5.setFont(Letra);
            tcolumna5.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna5);
            
            Paragraph tcolumna7 = new Paragraph("ESTADO");
            tcolumna7.getFont().setStyle(Font.BOLD);
            tcolumna7.getFont().setSize(10);        
            tcolumna7.setFont(Letra);
            tcolumna7.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna7);
            

            

            for (int i = 0; i < Jtabla.getRowCount(); i++) {
               
                String Codigo = Jtabla.getValueAt(i, 1).toString();
                
                String encargado = Jtabla.getValueAt(i, 2).toString();
                String cliente = Jtabla.getValueAt(i, 3).toString();
                String cedula = Jtabla.getValueAt(i, 4).toString(); 
                String metodo = Jtabla.getValueAt(i, 6).toString(); 
                String fechaF = Jtabla.getValueAt(i, 7).toString(); 
                String estadoF = Jtabla.getValueAt(i, 8).toString();
          
        
                tablapro.addCell(new Paragraph(Codigo,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(encargado,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(cliente,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(cedula,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(metodo,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(fechaF,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(estadoF,FontFactory.getFont("Arial",8,Font.NORMAL))); 
    
       
            }
         
            
            
            
             PdfPTable TableFecha = new PdfPTable(1); 
             TableFecha.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           // Tabla9.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            float[] medidaObservacion = {5f};
            TableFecha.setWidthPercentage(100);  
            TableFecha.setWidths(medidaObservacion);
            TableFecha.setHorizontalAlignment(Element.ALIGN_CENTER);
            TableFecha.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            

            
            Paragraph t9columna1 = new Paragraph("");
            t9columna1.getFont().setStyle(Font.BOLD);
            t9columna1.getFont().setSize(9);        
            t9columna1.setFont(Letra);
            t9columna1.setAlignment(Element.ALIGN_LEFT);
            TableFecha.addCell(t9columna1);
            String fecha1 = new SimpleDateFormat("dd-MM-yyyy").format(FechaOne.getDate());
            String fecha2 = new SimpleDateFormat("dd-MM-yyyy").format(FechaTwo.getDate());
            
            TableFecha.addCell(new Paragraph("INFORMACIÓN ENCONTRADA EN EL RANGO DE FECHAS: " +fecha1 + " | "+fecha2  ,FontFactory.getFont("Arial",12,Font.BOLD)));       
            
            
            
            
            
            doc.add(tablapro);
         
            doc.add(saltolinea);
            
     
            doc.add(TableFecha);
         
   

         
            //FOOTER
        addFooter(writer);
            
            
            doc.close();
            archivo.close();
            Desktop.getDesktop().open(file);
        } catch (DocumentException | IOException e) {
           System.out.println(e);
           JOptionPane.showMessageDialog(null, "NO SE CONSIGUE LA CARPETA FUNDAGINEBRA EN DISCO C", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
      
      
      
    }
      
         
           
         private void addFooter(PdfWriter writer){
    PdfPTable footer = new PdfPTable(1);
    try {

        
        String User=Tempo.getUser();
        
        
        footer.setWidths(new int[]{100});
        footer.setTotalWidth(527);
        footer.setLockedWidth(false);
        footer.getDefaultCell().setFixedHeight(40);
        footer.getDefaultCell().setBorder(Rectangle.TOP);
        footer.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);

        // add current page count
        footer.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
        footer.addCell(new Phrase(String.format("Emitido por:"+User+"                                                  |   "+piepagina+" |                                            "+ writer.getPageNumber()+ " | Pág") , new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));

        // write page
        PdfContentByte canvas = writer.getDirectContent();
        canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
        footer.writeSelectedRows(0, -1, 34, 50, canvas);
        canvas.endMarkedContentSequence();
    } catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    }
}
     
      
      

      
      
         
  public Map<String, Integer> knowNumbers() {
  //      Map<String, Integer> cantidadesPorIdExamen = new HashMap<>();
        Map<String, Integer> cantidadesPorIdExamen = new LinkedHashMap<>();
        Connection con = null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps = null;
        ResultSet rs = null;
      

        try {
            String fecha1 = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
            String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());
        
    String sql = "SELECT Id_Estadoh, especialidad, MAX(Fecha_Historia) AS Fecha_Historia, Id_Hespecialidad, COUNT(*) as cantidad_repeticiones\n" +
             "FROM table_historias u\n" +
             "INNER JOIN table_especialidad e \n" +
             "ON u.Id_Hespecialidad=e.id_especialidad\n" +
             "WHERE u.Id_Estadoh <> 104 AND u.Id_Estadoh <> 102\n" +
             "AND Fecha_Historia BETWEEN ? AND ? " +
             "GROUP BY Id_Estadoh, Id_Hespecialidad\n" +
             "ORDER BY cantidad_repeticiones DESC";


            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, fecha1);
            ps.setString(2, fecha2);
            rs = ps.executeQuery();

            while (rs.next()) {
                int idExamen = rs.getInt("Id_Hespecialidad");
                String nombreExamen = rs.getString("especialidad");
                int cantidadRepeticiones = rs.getInt("cantidad_repeticiones");

                // Almacenar en el mapa
                cantidadesPorIdExamen.put(nombreExamen, cantidadRepeticiones);
            }

        } catch (Exception e) {
            System.out.println(e);
        } finally {
       
            try {
                if (rs != null) rs.close();
                if (ps != null) ps.close();
                if (con != null) con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        // Devolver el mapa después de procesar la consulta
        return cantidadesPorIdExamen;
    }

     
       
       
       
       
      
               
public class HeaderFooterPageEvent extends PdfPageEventHelper {

    public void onStartPage(PdfWriter writer, Document document) {
        try {
     

            Paragraph fecha = new Paragraph();
    //      Font negrita = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
            fecha.add(Chunk.NEWLINE);
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(MP.FechaAdmin.getDate());
            String Hora = MP.Time.getText()+" "+MP.jLabel102.getText();
            
            
            BaseFont BF2 = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
          

            PdfContentByte cb = writer.getDirectContent();
            cb.beginText();
            cb.setFontAndSize(BF2, 12);


          
          /*
          com.itextpdf.text.Image imagen = com.itextpdf.text.Image.getInstance("C:\\Cyberia\\src\\imagenes\\Logo_System.png");
          imagen.setAbsolutePosition(50, 750);  // Ajusta la posición de la imagen según tus necesidades
          imagen.scaleToFit(110, 110);  // Ajusta el tamaño de la imagen según tus necesidades
          cb.addImage(imagen);
          */
          
          // Cargar imagen
com.itextpdf.text.Image imagen = com.itextpdf.text.Image.getInstance("C:\\Cyberia\\src\\imagenes\\Logo_System.png");
// Escalar la imagen proporcionalmente
imagen.scaleToFit(120, 80); // o el tamaño que prefieras
// Obtener altura de página
float pageHeight = document.getPageSize().getHeight();
// Posicionar en esquina superior izquierda con márgenes
float margenIzquierdo = 40f; // separación del borde izquierdo
float margenSuperior = 30f;  // separación del borde superior
float posicionY = pageHeight - imagen.getScaledHeight() - margenSuperior;
imagen.setAbsolutePosition(margenIzquierdo, posicionY);
cb.addImage(imagen);
          
// Obtenemos las coordenadas dinámicamente para centrar el texto en la página
float pageWidth = document.getPageSize().getWidth();
float empresaWidth = BF2.getWidthPoint(empresa, 12);
float empresaX = (pageWidth - empresaWidth) / 2; // Centramos el texto de la empresa

cb.setTextMatrix(empresaX, 800);
cb.showText(empresa);
            
            
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(260, 790);
            cb.showText(rif);
            
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 780);
            cb.showText("FECHA: "+ Fecha);
            
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 770);
            cb.showText("HORA: "+ Hora);
            
          
            cb.setFontAndSize(BF2, 8);
            cb.setTextMatrix(260, 740);
            cb.showText(ubicacion);
          
            cb.setFontAndSize(BF2, 8);
            cb.setTextMatrix(210, 730);
            cb.showText(telefonos); 
            cb.setTextMatrix(168, 725);
            cb.showText("__________________________________________________________________");

            cb.endText();

            
            
            
            
   
               
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}     
        

    
        PdfPageEventHelper eventHelper = new PdfPageEventHelper() {
        public void onEndPage(PdfWriter writer, Document document) {
        
    
 try{
 
     
           
        PdfPTable footerTable = new PdfPTable(3);
        footerTable.setTotalWidth(document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin());
        footerTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
        footerTable.setHorizontalAlignment(Element.ALIGN_CENTER);

        float footerHeight = -26;
        float x = (document.left() + document.right()) / 2;
        float y = document.bottom() - footerHeight;

        footerTable.writeSelectedRows(0, -1, x, y, writer.getDirectContent());
    

 
       Paragraph tfooter1 = new Paragraph(piepagina, new Font(FontFactory.getFont("Arial",9,Font.NORMAL)));  
       PdfPCell piepag = new PdfPCell(tfooter1 );
       piepag.setBorder(Rectangle.NO_BORDER);
       // Alineas la imagen y el texto al centro horizontal y vertical de la celda
       piepag.setHorizontalAlignment(Element.ALIGN_CENTER);
       piepag.setVerticalAlignment(Element.ALIGN_MIDDLE);
       footerTable.addCell(piepag);
     
        String User=Tempo.getUser();
        
       Phrase phrase = new Phrase();
       phrase.add(new Chunk("Emitido por: " + User, new Font(FontFactory.getFont("Arial",9,Font.NORMAL))));
         
       PdfPCell imgfirma = new PdfPCell(phrase);
       imgfirma.setBorder(Rectangle.NO_BORDER);
       // Alineas la imagen y el texto al centro horizontal y vertical de la celda
       imgfirma.setHorizontalAlignment(Element.ALIGN_CENTER);
       imgfirma.setVerticalAlignment(Element.ALIGN_MIDDLE);
       footerTable.addCell(imgfirma);
            
        
        
        
       Paragraph tfooter2 = new Paragraph(writer.getPageNumber()+ " Pág", new Font(FontFactory.getFont("Arial",9,Font.NORMAL)));
           
       PdfPCell numpag = new PdfPCell(tfooter2);
       numpag.setBorder(Rectangle.NO_BORDER);
       
       
       // Alineas la imagen y el texto al centro horizontal y vertical de la celda
       numpag.setHorizontalAlignment(Element.ALIGN_CENTER);
       numpag.setVerticalAlignment(Element.ALIGN_MIDDLE);
       footerTable.addCell(numpag);
        
       //footerTable.writeSelectedRows(0, -1, document.leftMargin(), document.bottomMargin(), writer.getDirectContent());
       

        footerTable.writeSelectedRows(0, -1, document.leftMargin(), document.bottom() + footerHeight, writer.getDirectContent());
           
 } catch(Exception e){ System.out.println(e);}


        
    }
    };   



                 
          public void AuditoriaReporte(){
            
   int idusuario=Tempo.getTexto();        
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(MP.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Genero un reporte de la tabla historias medicas " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1,  idusuario);
            ps.setInt(2,  idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
      finally {
            closeResources(rs, ps, con);
        }
     
    }
    
      
      String  empresa, rif, ubicacion, telefonos, piepagina;
    public void informacionpdf() {

    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "select * from tableinfopdfs";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        rs = ps.executeQuery();
        if (rs.next()) {
            empresa = rs.getString("nombrempresa");
            rif = rs.getString("rif");
            ubicacion = rs.getString("ubicacion");
            telefonos = rs.getString("telefonos");
            piepagina = rs.getString("infopiepagina");
        }
    } catch (Exception e) {
        System.out.println(e);
    }   finally {
            closeResources(rs, ps, con);
        }
}
    
   
   
    public void llenarCombo() {
 
        try{
       
        
        JCestados.removeAllItems();
        ArrayList<String> lista4 = new ArrayList<String>();
        lista4 = lc.llenarEspecialidad();
        for (int i = 0; i < lista4.size(); i++) {
           JCestados.addItem(lista4.get(i));

        }
        
           }catch(Exception e ){JOptionPane.showMessageDialog(null,e );};
          }
    
      
      
      
    
    
    
  
    
    
    
      
public void pdfbyDetails() {
    try {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        LocalDateTime now = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
        String pdfName = "ReporteFactura_" + formatter.format(now);
        File file = new File("C:\\Cyberia\\Reportes\\" + pdfName + ".pdf");

        // Fuentes
        BaseFont baseFont = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        Font fontSmall = new Font(baseFont, 8);
        Font fontBold = new Font(baseFont, 8, Font.BOLD);

        // Documento
        FileOutputStream output = new FileOutputStream(file);
        Document doc = new Document();
        doc.setMargins(36, 36, 130, 130);
        PdfWriter writer = PdfWriter.getInstance(doc, output);
        writer.setPageEvent(new ConsultaFacturas.HeaderFooterPageEvent());

        doc.open();

        // Tabla con 7 columnas
        PdfPTable table = new PdfPTable(9);
        table.setWidthPercentage(100);
        table.setWidths(new float[]{2f, 5f, 6f, 2f, 2f, 2f, 2f, 2f ,3f});
        table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        table.getDefaultCell().setBorder(PdfPCell.NO_BORDER);

        // Encabezados
        String[] headers = {"ID", "Cliente", "Producto", "Cantidad", "Costo Unit", "Costo Tot.","Ref Unit","Ref Tot.", "Fecha"};
        for (String header : headers) {
            PdfPCell cell = new PdfPCell(new Paragraph(header, fontSmall));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
        }

        // Obtener datos
        Map<String, List<reporteFact>> reporteFct = knowDetails();
     
        int totalCantidad = 0;
        double totalUnitBs = 0.0;
        double totalTotalBs = 0.0;
        double totalUnitRef = 0.0;
        double totalTotalRef = 0.0;

        for (Map.Entry<String, List<reporteFact>> entry : reporteFct.entrySet()) {
            List<reporteFact> statsList = entry.getValue();
            if (statsList == null || statsList.isEmpty()) continue;

            for (reporteFact stat : statsList) {
                // Formatear valores
                
                totalCantidad += stat.getCantidad();
                totalUnitBs += stat.getPrecio_unitBs();
                totalTotalBs += stat.getPrecio_totalBs();
                totalUnitRef += stat.getPrecio_unit();
                totalTotalRef += stat.getPrecio_total();
                
                
               String precioBsf = String.format("%.2f", stat.getPrecio_unitBs());   
               String precioTbs = String.format("%.2f", stat.getPrecio_totalBs());  
               String precioUnitRef = String.format("%.2f", stat.getPrecio_unit());   
               String precioRef = String.format("%.2f", stat.getPrecio_total());  

                // Crear celdas
                String[] values = {
                    stat.getIdFact(),
                    stat.getCliente(),
                    stat.getProducto(),
                    String.valueOf(stat.getCantidad()),
                    precioBsf,  
                    precioTbs,  
                    precioUnitRef,
                    precioRef,
                    
                    stat.getFecha()
                };

           for (String value : values) {
          String safeText = value != null ? value.toUpperCase() : "";
          Paragraph para = new Paragraph(safeText, fontSmall);
          PdfPCell cell = new PdfPCell(para);
          cell.setBorder(Rectangle.NO_BORDER);
          cell.setHorizontalAlignment(Element.ALIGN_CENTER);
          cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
          table.addCell(cell);
}
            }
        }
        
        
                  PdfPTable tablaTotal = new PdfPTable(1); 
                  tablaTotal.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
                  tablaTotal.setHorizontalAlignment(PdfPCell.ALIGN_JUSTIFIED);
                  tablaTotal.setWidthPercentage(100); 
                  float[] medidaResultado = {5f};
                  tablaTotal.setWidths(medidaResultado);
                  tablaTotal.setHorizontalAlignment(Element.ALIGN_CENTER);
                  tablaTotal.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

                  String fecha1 = new SimpleDateFormat("dd-MM-yyyy").format(FechaOne.getDate());
                  String fecha2 = new SimpleDateFormat("dd-MM-yyyy").format(FechaTwo.getDate());
                  Paragraph t41columna1 = new Paragraph("\n TOTAL DE PRODUCTOS VENDIDOS: " + String.valueOf(totalCantidad) + 
                                                        "\n VALOR DE PRODUCTOS EN BSF: " + String.format("%.2f", totalTotalBs) + 
                                                        "\n VALOR DE PRODUCTOS REF: " + String.format("%.2f", totalTotalRef)+
                                                        "\n ENCONTRADO EN EL RANGO DE FECHA: "+fecha1 +" AL "+ fecha2 ); 

                  t41columna1.getFont().setStyle(Font.NORMAL);
                  t41columna1.getFont().setSize(11);        
                  t41columna1.setFont(fontSmall);
                  t41columna1.setAlignment(Element.ALIGN_JUSTIFIED);
                  PdfPCell celdaTotal = new PdfPCell(t41columna1);
                  celdaTotal.setBorder(Rectangle.NO_BORDER);
                  tablaTotal.addCell(celdaTotal);
       
        doc.add(table);
        doc.add(new Paragraph("\n"));
        doc.add(tablaTotal);
        addFooter(writer);
        doc.close();
        output.close();

        if (table.getRows().size() > 1) {
            Desktop.getDesktop().open(file);
        } else {
            JOptionPane.showMessageDialog(null, "No hay reportes que visualizar", "Reportes", JOptionPane.INFORMATION_MESSAGE);
        }

    } catch (DocumentException | IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al generar el PDF: " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    
    
    

}
    
    
    











public Map<String, List<reporteFact>> knowDetails() {
    Map<String, List<reporteFact>> reporteFact = new LinkedHashMap<>();
    String fecha1 = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
    String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());


    String sql = "SELECT \n" +
"    u.id_factura,\n" +
"    CONCAT(cliente.Nombre, ' ', cliente.Apellido) AS Cliente,\n" +
"    COALESCE(p.producto, s.servicio, '[NO DATA]') AS Nombre_Item,\n" +
"    COALESCE(c.Catg_Prd, cs.Catg_Servicio) AS Categoria,\n" +
"    m.moneda,\n" +
"    SUM(u.cantidad) AS total_cantidad,\n" +
"    u.Precio_Unit,\n" +
"    u.Precio_Total,\n" +
"    u.Precio_UnitBsf,\n" +
"    u.Precio_TotalBsf,\n" +
"    f.fecha_fact,\n" +
"    f.estado_fact\n" +
"FROM table_factdetail u\n" +
"INNER JOIN table_facturacion f ON u.id_factura = f.id_factura\n" +
"LEFT JOIN table_productos p ON u.producto = p.code_prd\n" +
"LEFT JOIN categorias_productos c ON p.id_catgPrd = c.id_ctgPrd\n" +
"LEFT JOIN table_servicios s ON TRIM(u.producto) = TRIM(s.serv_codigo)\n" +
"LEFT JOIN categorias_servicios cs ON s.serv_categoria = cs.Id_CatgServ\n" +
"LEFT JOIN moneda_pago m ON f.metodo_pago = m.id_moneda\n" +
"LEFT JOIN table_paciente cliente ON f.id_paciente = cliente.Idpaciente\n" +
"WHERE f.estado_fact <> 104 \n" +
"  AND f.fecha_fact BETWEEN ? AND ?\n" +
"GROUP BY \n" +
"    u.id_factura,\n" +
"    Cliente,\n" +
"    Nombre_Item,\n" +
"    Categoria,\n" +
"    m.moneda,\n" +
"    u.Precio_Unit,\n" +
"    u.Precio_Total,\n" +
"    u.Precio_UnitBsf,\n" +
"    u.Precio_TotalBsf,\n" +
"    f.fecha_fact,\n" +
"    f.estado_fact\n" +
"ORDER BY u.id_factura ASC;";

    try (Connection con = new EnlaceBd().getConnection();
         PreparedStatement ps = con.prepareStatement(sql)) {

        ps.setString(1, fecha1);
        ps.setString(2, fecha2);

        try (ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                String idFact = rs.getString("id_factura");
                String cliente = rs.getString("Cliente");
                String producto = rs.getString("Nombre_Item");
                int cant = rs.getInt("total_cantidad");
                String moneda = rs.getString("moneda");

                double precioUnit = rs.getDouble("Precio_Unit");
                double precioTotal= rs.getDouble("Precio_Total");

                
               double precioUniBs = rs.getDouble("Precio_UnitBsf");
               double PrecioTbs = rs.getDouble("Precio_TotalBsf");

                String fecha = rs.getString("f.fecha_fact");
                String state = rs.getString("estado_fact");

                reporteFact.computeIfAbsent(idFact, k -> new ArrayList<>()).add(new reporteFact(
                    idFact,
                    cliente,
                    producto,
                    rs.getString("Categoria"),
                    cant,
                    moneda,
                    precioUnit,
                    precioTotal,
                    precioUniBs,
                    PrecioTbs,
                    fecha,
                    state
                ));
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al ejecutar la consulta SQL: " + e.getMessage(), "Error de base de datos", JOptionPane.ERROR_MESSAGE);
    }

    return reporteFact;
}

    
    
    
    
      
public void pdfbyGlobal() {
    try {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        LocalDateTime now = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
        String pdfName = "ReporteGlobal_" + formatter.format(now);
        File file = new File("C:\\Cyberia\\Reportes\\" + pdfName + ".pdf");

        // Fuentes
        BaseFont baseFont = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        Font fontSmall = new Font(baseFont, 8);
        Font fontBold = new Font(baseFont, 8, Font.BOLD);

        // Documento
        FileOutputStream output = new FileOutputStream(file);
        Document doc = new Document();
        doc.setMargins(36, 36, 130, 130);
        PdfWriter writer = PdfWriter.getInstance(doc, output);
        writer.setPageEvent(new ConsultaFacturas.HeaderFooterPageEvent());

        doc.open();

        // Tabla con 7 columnas
        PdfPTable table = new PdfPTable(10);
        table.setWidthPercentage(100);
        table.setWidths(new float[]{1f, 5f, 3f, 4f, 2f, 2f, 2f, 2f, 3f, 4f});
        table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        table.getDefaultCell().setBorder(PdfPCell.NO_BORDER);

        // Encabezados
        String[] headers = {"ID", "Cliente", "Moneda", "Mét. pago", "Prec. Bs", "REF $", "Rec. Bs", "Rec. $", "Fecha", "Estado"};
        for (String header : headers) {
            PdfPCell cell = new PdfPCell(new Paragraph(header, fontSmall));
            cell.setBorder(Rectangle.NO_BORDER);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);
        }

        // Obtener datos
        Map<String, List<factGlobal>> factGlobal = knowGlobal();
     
   
        double totalTotalBs = 0.0;
        double totalTotalRef = 0.0;
        double totalPagadoBsf = 0.0;
        double totalPagadoRef = 0.0;

        for (Map.Entry<String, List<factGlobal>> entry : factGlobal.entrySet()) {
            List<factGlobal> statsList = entry.getValue();
            if (statsList == null || statsList.isEmpty()) continue;

            for (factGlobal stat : statsList) {
                // Formatear valores
                
      
                totalTotalBs += stat.getTotalB();
                totalTotalRef += stat.getTotalD();
                totalPagadoBsf += stat.getPago_Bsf();
                totalPagadoRef += stat.getPago_Divisa();
                
                
               String precioTbsf = String.format("%.2f", stat.getTotalB());   
               String precioTref = String.format("%.2f", stat.getTotalD());  
  
               
               String pagoBsf = String.format("%.2f", stat.getPago_Bsf());   
               String pagoDivisa = String.format("%.2f", stat.getPago_Divisa());  
               
boolean pntoVenta = stat.isPntoVenta();
boolean pagomovil = stat.isPagomovil();
boolean efectivo = stat.isEfectivo();
boolean transferencia = stat.isTransferencia();
boolean zelle = stat.isZelle();
boolean otro = stat.isOtro();

               
               List<String> metodos = new ArrayList<>();

if (pntoVenta)       metodos.add("Punto de Venta");
if (pagomovil)       metodos.add("Pago Móvil");
if (efectivo)        metodos.add("Efectivo");
if (transferencia)   metodos.add("Transferencia");
if (zelle)           metodos.add("Zelle");
if (otro)            metodos.add("Otro");

String mtdoPago = metodos.isEmpty() ? "No especificado" : String.join(", ", metodos);
               
              
               
//  String[] headers = {"Factura", "Cliente", "Moneda", "Mét. pago", "Precio Bs", "REF $", "Recibido Bs", "Recibido $", "Fecha", "Estado"};
                // Crear celdas
                String[] values = {
                    stat.getIdFact(),
                    stat.getCliente(),
                    stat.getMoneda(),
                    mtdoPago,
                    precioTbsf,  
                    precioTref,  
                    pagoBsf,
                    pagoDivisa,
                    stat.getFecha(),
                    stat.getState()
                };

           for (String value : values) {
          String safeText = value != null ? value.toUpperCase() : "";
          Paragraph para = new Paragraph(safeText, fontSmall);
          PdfPCell cell = new PdfPCell(para);
          cell.setBorder(Rectangle.NO_BORDER);
          cell.setHorizontalAlignment(Element.ALIGN_CENTER);
          cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
          table.addCell(cell);
}
            }
        }
        
        
                  PdfPTable tablaTotal = new PdfPTable(1); 
                  tablaTotal.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
                  tablaTotal.setHorizontalAlignment(PdfPCell.ALIGN_JUSTIFIED);
                  tablaTotal.setWidthPercentage(100); 
                  float[] medidaResultado = {5f};
                  tablaTotal.setWidths(medidaResultado);
                  tablaTotal.setHorizontalAlignment(Element.ALIGN_CENTER);
                  tablaTotal.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

                  String fecha1 = new SimpleDateFormat("dd-MM-yyyy").format(FechaOne.getDate());
                  String fecha2 = new SimpleDateFormat("dd-MM-yyyy").format(FechaTwo.getDate());
                  Paragraph t41columna1 = new Paragraph("\n TOTAL EN BS: " + String.format("%.2f", totalTotalBs) + 
                                                        "\n TOTAL REF: " + String.format("%.2f", totalTotalRef) + 
                                                        "\n TOTAL PAGADO BS: " + String.format("%.2f", totalPagadoBsf) + 
                                                        "\n TOTAL PAGADO REF: " + String.format("%.2f", totalPagadoRef)+ 
                                                        "\n ENCONTRADO EN EL RANGO DE FECHA: "+fecha1 +" AL "+ fecha2 ); 

                  t41columna1.getFont().setStyle(Font.NORMAL);
                  t41columna1.getFont().setSize(11);        
                  t41columna1.setFont(fontSmall);
                  t41columna1.setAlignment(Element.ALIGN_JUSTIFIED);
                  PdfPCell celdaTotal = new PdfPCell(t41columna1);
                  celdaTotal.setBorder(Rectangle.NO_BORDER);
                  tablaTotal.addCell(celdaTotal);
       
        doc.add(table);
        doc.add(new Paragraph("\n"));
        doc.add(tablaTotal);
        addFooter(writer);
        doc.close();
        output.close();

        if (table.getRows().size() > 1) {
            Desktop.getDesktop().open(file);
        } else {
            JOptionPane.showMessageDialog(null, "No hay reportes que visualizar", "Reportes", JOptionPane.INFORMATION_MESSAGE);
        }

    } catch (DocumentException | IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al generar el PDF: " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    
    
    

}
    
    
    











public Map<String, List<factGlobal>> knowGlobal() {
    Map<String, List<factGlobal>> factGlobal = new LinkedHashMap<>();
    String fecha1 = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
    String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());



 String sql = "SELECT \n" +
"  u.id_factura, \n" +
"  cod_fact, \n" +
"  CONCAT(p.Nombre, ' ', p.Apellido) AS Cliente, \n" +
"  m.moneda, \n" +
"  x.pntoVenta, \n" +
"  x.pagomovil, \n" +
"  x.efectivo, \n" +
"  x.transferencia, \n" +
"  x.zelle, \n" +
"  x.otro, \n" +
"  pf.TotalD,\n" +
"  pf.TotalB,\n" +
"  pf.Pago_Bsf,\n" +
"  pf.Pago_Divisa,\n" +
"  x.observacion, \n" +
"  fecha_fact, \n" +
"  e.Estado,\n" +
"  estado_fact\n" +
"FROM table_facturacion u\n" +
"INNER JOIN table_paciente p ON u.id_paciente = p.Idpaciente\n" +
"INNER JOIN moneda_pago m ON u.metodo_pago = m.id_moneda\n" +
"INNER JOIN pago_factura pf ON u.id_factura = pf.id_Factura\n" +
"INNER JOIN metodo_pgofact x ON u.id_pago = x.id_metodo\n" +
"INNER JOIN table_estado e ON u.estado_fact = e.IdEstado\n" +
"WHERE estado_fact <> 104 AND  u.fecha_fact BETWEEN ? AND ? \n"
 +"ORDER BY u.id_factura ASC";

    try (Connection con = new EnlaceBd().getConnection();
         PreparedStatement ps = con.prepareStatement(sql)) {

        ps.setString(1, fecha1);
        ps.setString(2, fecha2);

        try (ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                
String idFact = rs.getString("id_factura");
String cliente = rs.getString("Cliente");
String moneda = rs.getString("moneda");

boolean pntoVenta = rs.getBoolean("pntoVenta");
boolean pagomovil = rs.getBoolean("pagomovil");
boolean efectivo = rs.getBoolean("efectivo");
boolean transferencia = rs.getBoolean("transferencia");
boolean zelle = rs.getBoolean("zelle");
boolean otro = rs.getBoolean("otro");

double totalBs = rs.getDouble("TotalD");
double totalRef = rs.getDouble("TotalB");
double totalPagBs = rs.getDouble("Pago_Bsf");
double totalPagRef = rs.getDouble("Pago_Divisa");

String observacion = rs.getString("x.observacion");
String fecha = rs.getString("fecha_fact");
String state = rs.getString("Estado");
     

factGlobal item = new factGlobal(
    idFact,
    cliente,
    "N/A",
    moneda,
    pntoVenta,
    pagomovil,
    efectivo,
    transferencia,
    zelle,
    otro,
    totalBs,
    totalRef,
    totalPagBs,
    totalPagRef,
    observacion,
    fecha,
    state
);

// Agregar al Map por idFact (u otro criterio de agrupación)
factGlobal.computeIfAbsent(idFact, k -> new ArrayList<>()).add(item);
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al ejecutar la consulta SQL: " + e.getMessage(), "Error de base de datos", JOptionPane.ERROR_MESSAGE);
    }

    return factGlobal;
}
    
    
    

    
    
    
    
    
    
    
           
  public void auditoriaMethod(String accion){
            
   int idusuario=Tempo.getTexto();        
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(MP.FechaAdmin.getDate());
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
          
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1,  idusuario);
            ps.setInt(2,  idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
      finally {
            closeResources(rs, ps, con);
        }
     
    }
    
    
    
          private void closeResources(ResultSet rs, PreparedStatement ps, Connection con) {
    try {
        if (rs != null) {
            rs.close();
        }
        if (ps != null) {
            ps.close();
        }
        if (con != null) {
            con.close();
        }
    } catch (Exception ex) {
        System.out.println("Error al cerrar la conexión o los recursos: " + ex.getMessage());
    }
}
    
    
      
      LlenarCombobox lc = new LlenarCombobox();
      SearchConsultasDao search = new SearchConsultasDao();
      Temporal Tempo = new Temporal();
      Mprincipal MP = new Mprincipal();
      JCambiarState setState = new JCambiarState();
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Cancelar;
    private javax.swing.JMenuItem Completar;
    public com.toedter.calendar.JDateChooser FechaOne;
    public com.toedter.calendar.JDateChooser FechaTwo;
    private javax.swing.JComboBox<String> JCestados;
    private javax.swing.JRadioButton JRpaciente;
    private javax.swing.JTable Jtabla;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jEstadistica;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPopupMenu jOpciones;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRcodigo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTxtSearch;
    // End of variables declaration//GEN-END:variables
}

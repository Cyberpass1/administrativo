/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Procesos.JLabexamenes;

import Clases.Encriptar;
import Clases.EnlaceBd;
import Clases.JCPacientes;
import Clases.JPacientesDao;
import Clases.Jlab_auditorias;
import Clases.PdfVO;
import Clases.Validar;
import Menu.Mprincipal;
import Clases.PdfDAO1;
import Clases.Tabla_PdfVO;
import Clases.Temporal;
import Clases.labEstudiosBdDao;
import Clases.sql;
import Clases.updateLaboratorio;
import Clases.updateLaboratorioDao;
import Consultas.ConsultaLaboratorio;
import Procesos.JLaboratorio;
import Registros.JPacientes;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FCGinebraI
 */
public class JUroanalisis extends javax.swing.JInternalFrame {

    /**
     * Creates new form JERutina
     */
    public JUroanalisis() {
    initComponents();
    ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
    informacionpdf();
    MaxIdestudios();
    this.JRMasculino.setSelected(true);
    JPregistro.setVisible(false);
    BtnAgregar.setVisible(false);
    IdPacientess.setVisible(false);
 //   this.JRambos.setSelected(true);


    }
     
   String  empresa, rif, ubicacion, telefonos, piepagina;
   public void informacionpdf() {

   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
   
        try {

            String sql = "select * from tableinfopdfs";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                empresa = rs.getString("nombrempresa");
                rif = rs.getString("rif");
                ubicacion = rs.getString("ubicacion");
                telefonos = rs.getString("telefonos");
                piepagina = rs.getString("infopiepagina");
               
            }

        } catch (Exception e) {System.out.println(e);
        }   finally {
        cn.closeResources(rs, ps, con);  
    }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        JCcolor1 = new javax.swing.JComboBox<>();
        JCph = new javax.swing.JComboBox<>();
        JCglucosa1 = new javax.swing.JComboBox<>();
        TxtOlor1 = new javax.swing.JTextField();
        TxtDensidad = new javax.swing.JTextField();
        JCproteinas = new javax.swing.JComboBox<>();
        JChemoglobina = new javax.swing.JComboBox<>();
        JCaspecto = new javax.swing.JComboBox<>();
        JCbilirrubina = new javax.swing.JComboBox<>();
        JCpigmentos = new javax.swing.JComboBox<>();
        JCurobilinogeno1 = new javax.swing.JComboBox<>();
        JCcuerposCe = new javax.swing.JComboBox<>();
        JCnitridos = new javax.swing.JComboBox<>();
        TxtLeucositos = new javax.swing.JTextField();
        JCbacterias = new javax.swing.JComboBox<>();
        JCEP = new javax.swing.JComboBox<>();
        TxtHematies = new javax.swing.JTextField();
        TxtCelulasredondas = new javax.swing.JTextField();
        Txtcristales = new javax.swing.JTextField();
        Txtcilindros = new javax.swing.JTextField();
        TXTfungicas = new javax.swing.JTextField();
        TxtFilamentos = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        JtextObservaciones = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        BtnAgregar = new javax.swing.JButton();
        BtnCancelar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        JPregistro = new javax.swing.JPanel();
        TXTPnombre = new javax.swing.JTextField();
        TXTPcorreo = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        JRMasculino = new javax.swing.JRadioButton();
        JRfemenino = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TXTPdireccion = new javax.swing.JTextArea();
        FechaNacimiento = new com.toedter.calendar.JDateChooser();
        TXTPtelefono = new javax.swing.JFormattedTextField();
        TXTPapellido = new javax.swing.JTextField();
        TXTPcedula = new javax.swing.JTextField();
        BtnSearch = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        FechaAc6 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        IdPacientess = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jButton34 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        JCmoco = new javax.swing.JComboBox<>();
        JCrestos = new javax.swing.JComboBox<>();
        JCconsistencia = new javax.swing.JComboBox<>();
        JCcolor4 = new javax.swing.JComboBox<>();
        JCAspect = new javax.swing.JComboBox<>();
        Jolor = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        JtextMicroscopio = new javax.swing.JTextArea();
        JCreaccion1 = new javax.swing.JComboBox<>();
        JCsangre1 = new javax.swing.JComboBox<>();
        JRcoprocultivo = new javax.swing.JCheckBox();
        JRuroanalisis = new javax.swing.JCheckBox();
        jSeparator7 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Uroanálisis"));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JCcolor1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCcolor1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AMARILLO", "AMBAR", "ROJO" }));
        JCcolor1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Color"));
        jPanel7.add(JCcolor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 100, 40));

        JCph.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ÁCIDO", "ALCALINO", "NEUTRA" }));
        JCph.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PH"));
        jPanel7.add(JCph, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 100, 40));

        JCglucosa1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCglucosa1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCglucosa1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Glucosa"));
        jPanel7.add(JCglucosa1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 100, 40));

        TxtOlor1.setText("SUIGENERIS");
        TxtOlor1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Olor"));
        jPanel7.add(TxtOlor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 100, 40));

        TxtDensidad.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Densidad"));
        jPanel7.add(TxtDensidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 100, 40));

        JCproteinas.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCproteinas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSTIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCproteinas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Proteínas"));
        jPanel7.add(JCproteinas, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, 100, 40));

        JChemoglobina.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JChemoglobina.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JChemoglobina.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hemoglobina"));
        jPanel7.add(JChemoglobina, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, 100, 40));

        JCaspecto.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCaspecto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CLARO", "LIGERO TURBIO", "TURBIO" }));
        JCaspecto.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Aspecto"));
        jPanel7.add(JCaspecto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 100, -1));

        JCbilirrubina.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCbilirrubina.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCbilirrubina.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina"));
        JCbilirrubina.setLightWeightPopupEnabled(false);
        jPanel7.add(JCbilirrubina, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 100, 40));

        JCpigmentos.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        JCpigmentos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCpigmentos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Pigmentos Biliares"));
        jPanel7.add(JCpigmentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 170, 110, 40));

        JCurobilinogeno1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCurobilinogeno1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCurobilinogeno1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Urobilinógeno"));
        jPanel7.add(JCurobilinogeno1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, 110, 40));

        JCcuerposCe.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCcuerposCe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCcuerposCe.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cuerpos Cétonicos"));
        jPanel7.add(JCcuerposCe, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 110, 40));

        JCnitridos.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCnitridos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCnitridos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nitritos"));
        jPanel7.add(JCnitridos, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 110, -1));

        TxtLeucositos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Leucocitos"));
        jPanel7.add(TxtLeucositos, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, 210, 40));

        JCbacterias.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCbacterias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ESCASAS", "MODERADAS", "ABUNDANTES" }));
        JCbacterias.setBorder(javax.swing.BorderFactory.createTitledBorder("Bacterias"));
        jPanel7.add(JCbacterias, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 50, 100, 40));

        JCEP.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCEP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ESCASAS", "MODERADAS", "ABUNDANTES" }));
        JCEP.setBorder(javax.swing.BorderFactory.createTitledBorder("Celulas E.P."));
        jPanel7.add(JCEP, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 50, 100, 40));

        TxtHematies.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hematies"));
        jPanel7.add(TxtHematies, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 90, 100, 40));

        TxtCelulasredondas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Células Redondas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        jPanel7.add(TxtCelulasredondas, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 90, 110, 40));

        Txtcristales.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cristales"));
        jPanel7.add(Txtcristales, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 130, 110, 40));

        Txtcilindros.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cilindro"));
        jPanel7.add(Txtcilindros, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 100, 40));

        TXTfungicas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Formas Fungicas"));
        jPanel7.add(TXTfungicas, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, 210, 40));

        TxtFilamentos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "ESCASAS", "MODERADAS", "ABUNDANTES" }));
        TxtFilamentos.setBorder(javax.swing.BorderFactory.createTitledBorder("Filamentos de Mucina"));
        jPanel7.add(TxtFilamentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 210, 210, 40));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel7.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 10, 250));

        JtextObservaciones.setColumns(20);
        JtextObservaciones.setLineWrap(true);
        JtextObservaciones.setRows(5);
        JtextObservaciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Observaciones"));
        jScrollPane4.setViewportView(JtextObservaciones);

        jPanel7.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 580, 50));

        jPanel9.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 610, 330));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BtnAgregar.setText("Agregar");
        BtnAgregar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnAgregar.setContentAreaFilled(false);
        BtnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 120, 30));

        BtnCancelar.setText("NUEVO");
        BtnCancelar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnCancelar.setContentAreaFilled(false);
        BtnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 120, 30));

        jPanel9.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 390, 70));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane1.setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JPregistro.setBackground(new java.awt.Color(255, 255, 255));
        JPregistro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTPnombre.setEditable(false);
        TXTPnombre.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre")));
        TXTPnombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPnombreActionPerformed(evt);
            }
        });
        TXTPnombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPnombreKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPnombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 160, 50));

        TXTPcorreo.setEditable(false);
        TXTPcorreo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Correo"));
        TXTPcorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPcorreoKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPcorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 160, 50));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Sexo"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JRMasculino.setBackground(new java.awt.Color(255, 255, 255));
        JRMasculino.setText("Masculino");
        JRMasculino.setEnabled(false);
        JRMasculino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRMasculinoActionPerformed(evt);
            }
        });
        jPanel5.add(JRMasculino, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        JRfemenino.setBackground(new java.awt.Color(255, 255, 255));
        JRfemenino.setText("Femenino");
        JRfemenino.setEnabled(false);
        JRfemenino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRfemeninoActionPerformed(evt);
            }
        });
        jPanel5.add(JRfemenino, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, -1, -1));

        JPregistro.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 350, 50));

        TXTPdireccion.setEditable(false);
        TXTPdireccion.setColumns(20);
        TXTPdireccion.setLineWrap(true);
        TXTPdireccion.setRows(5);
        TXTPdireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Dirección"));
        TXTPdireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPdireccionKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(TXTPdireccion);

        JPregistro.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 350, 120));

        FechaNacimiento.setBackground(new java.awt.Color(255, 255, 255));
        FechaNacimiento.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha de Nacimiento"));
        FechaNacimiento.setToolTipText("");
        FechaNacimiento.setEnabled(false);
        FechaNacimiento.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        JPregistro.add(FechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 350, 50));

        TXTPtelefono.setEditable(false);
        TXTPtelefono.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Telefono"));
        try {
            TXTPtelefono.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        JPregistro.add(TXTPtelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, 170, 50));

        TXTPapellido.setEditable(false);
        TXTPapellido.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Apellido"));
        TXTPapellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPapellidoKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPapellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 0, 170, 50));

        jPanel1.add(JPregistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 400, 380));

        TXTPcedula.setText("V-");
        TXTPcedula.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cédula"));
        TXTPcedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPcedulaActionPerformed(evt);
            }
        });
        TXTPcedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyTyped(evt);
            }
        });
        jPanel1.add(TXTPcedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 260, 50));

        BtnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/magnifier-1_icon-icons.com_56924.png"))); // NOI18N
        BtnSearch.setBorderPainted(false);
        BtnSearch.setContentAreaFilled(false);
        BtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(BtnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, 50, 50));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 400, 20));
        jPanel1.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 400, 10));

        FechaAc6.setBackground(new java.awt.Color(0, 0, 0));
        FechaAc6.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        FechaAc6.setText("                                   P A C I E N T E ");
        jPanel1.add(FechaAc6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 380, 20));
        jPanel1.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 400, 10));

        IdPacientess.setText("ID");
        jPanel1.add(IdPacientess, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, -1, 50));

        jTabbedPane1.addTab("tab1", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "PACIENTE", "CEDULA", "EDAD", "SEXO", "CORREO", "ESTUDIO"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 370, 450));

        jTabbedPane1.addTab("tab2", jPanel2);

        jPanel9.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 390, 560));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Coproanalisis"), "Coproanalisis"));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton34.setText("Generar");
        jButton34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton34.setContentAreaFilled(false);
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton34ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton34, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 140, 100, 30));

        jButton20.setText("Cancelar");
        jButton20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton20.setContentAreaFilled(false);
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton20, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 180, 100, 30));

        jLabel2.setForeground(new java.awt.Color(0, 0, 51));
        jLabel2.setText("IMPRIMIR: ");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, -1, 30));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JCmoco.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCmoco.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO" }));
        JCmoco.setBorder(javax.swing.BorderFactory.createTitledBorder("Moco"));
        jPanel6.add(JCmoco, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 90, 50));

        JCrestos.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCrestos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AUSENTE", "PRESENTE" }));
        JCrestos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Res. Alimenticie", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        jPanel6.add(JCrestos, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 90, 50));

        JCconsistencia.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCconsistencia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BLANDA", "DURA", "LIQUIDA" }));
        JCconsistencia.setBorder(javax.swing.BorderFactory.createTitledBorder("Consistencia"));
        jPanel6.add(JCconsistencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 60, 100, 50));

        JCcolor4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCcolor4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MARRÓN", "NEGRO", "GRIS", "VERDE", "AMARILLO", "ROJO", "ACOLICA", "NARANJA" }));
        JCcolor4.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));
        jPanel6.add(JCcolor4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 100, 50));

        JCAspect.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        JCAspect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HETEROGENEO", "HOMOGENEO" }));
        JCAspect.setBorder(javax.swing.BorderFactory.createTitledBorder("Aspecto"));
        JCAspect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCAspectActionPerformed(evt);
            }
        });
        jPanel6.add(JCAspect, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 100, 50));

        Jolor.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        Jolor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FECAL", "FETIDO" }));
        Jolor.setBorder(javax.swing.BorderFactory.createTitledBorder("Olor"));
        jPanel6.add(Jolor, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 60, 90, 50));

        JtextMicroscopio.setColumns(20);
        JtextMicroscopio.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
        JtextMicroscopio.setLineWrap(true);
        JtextMicroscopio.setRows(5);
        JtextMicroscopio.setBorder(javax.swing.BorderFactory.createTitledBorder("Examen Microscopio"));
        JtextMicroscopio.setMargin(new java.awt.Insets(1, 1, 1, 1));
        JtextMicroscopio.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane3.setViewportView(JtextMicroscopio);

        jPanel6.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 410, 110));

        JCreaccion1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCreaccion1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ÁCIDA", "ALCALINA" }));
        JCreaccion1.setBorder(javax.swing.BorderFactory.createTitledBorder("Reacción"));
        jPanel6.add(JCreaccion1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, 90, 50));

        JCsangre1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCsangre1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO" }));
        JCsangre1.setBorder(javax.swing.BorderFactory.createTitledBorder("Sangre"));
        jPanel6.add(JCsangre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, 100, 50));

        jPanel4.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 480, 250));

        JRcoprocultivo.setBackground(new java.awt.Color(255, 255, 255));
        JRcoprocultivo.setText("Coproanálisis");
        jPanel4.add(JRcoprocultivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 80, -1, -1));

        JRuroanalisis.setBackground(new java.awt.Color(255, 255, 255));
        JRuroanalisis.setText("Uroanálisis");
        jPanel4.add(JRuroanalisis, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 50, -1, -1));

        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel4.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, 10, 270));

        jPanel9.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 340, 610, 280));

        getContentPane().add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1050, 630));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
      
    
    
    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton34ActionPerformed
      
        
           if (TXTPapellido.getText().equals("") 
                   
               
               || TXTPnombre.getText().equals("")
               || TXTPcedula.getText().equals("") 
               || TXTPcorreo.getText().equals("") 
               || TXTPtelefono.getText().equals("") 
               || TXTPdireccion.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "ASIGNE UN PACIENTE, Y VERIFIQUE QUE TODOS LOS CAMPOS SE ENCUENTRAN COMPLETADOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);

        }
        
           
        
           
            else if (!JRuroanalisis.isSelected() && !JRcoprocultivo.isSelected()) {
            JOptionPane.showMessageDialog(null, "DEBE TILDAR AL MENOS UN ESTUDIO A IMPRIMIR", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);
            }
           
           
           
       
           else if (JRuroanalisis.isSelected()){
           
               
                //--------------------------------------- ACTUALIZAR    
            String nivelUsuario=MP.getNivel(); 
            String especialidad= MP.getEspecialidad();
            if(especialidad.equals("Bioanalista")&& !estadoEstudio.equals("") ||  
               nivelUsuario.equals("Administrador") && !estadoEstudio.equals("")){
               labDao.ConsultarFirma(); 
            Maxid=idCallestudios;
            pdf();  
       
            labDao.actualizarUro(
                       Maxid, 
                       JCcolor1.getSelectedItem().toString(), 
                       TxtOlor1.getText(),
                       TxtDensidad.getText(), 
                       JCaspecto.getSelectedItem().toString(), 
                       JCph.getSelectedItem().toString(), 
                       JCglucosa1.getSelectedItem().toString(), 
                       JCproteinas.getSelectedItem().toString(), 
                       JChemoglobina.getSelectedItem().toString(), 
                       JCnitridos.getSelectedItem().toString(), 
                       JCcuerposCe.getSelectedItem().toString(), 
                       JCurobilinogeno1.getSelectedItem().toString(), 
                       JCpigmentos.getSelectedItem().toString(), 
                       JCbilirrubina.getSelectedItem().toString(), 
                       TxtLeucositos.getText(),
                       JCbacterias.getSelectedItem().toString(), 
                       JCEP.getSelectedItem().toString(), 
                       TxtHematies.getText(),
                       TxtCelulasredondas.getText(),
                       TxtFilamentos.getSelectedItem().toString(),
                       Txtcilindros.getText(),
                       Txtcristales.getText(),
                       TXTfungicas.getText()
                       
                       
              ); 
            
            
            updateReporte(); 
            cancelarexamen();
            
            String Fecha = new SimpleDateFormat("yyyy/MM/dd").format(Menu.FechaAdmin.getDate());
            String accion = "HORA: "+ Menu.Time.getText()+" Corrigió el examen N° "+Maxid+" de: " +TXTPnombre.getText() +" "+ TXTPapellido.getText();
            audit.corregirEstudio(
                    idusuario, 
                    accion,
                    Fecha 
                    );
            
            backtoConsulta();
            }
           
    //--------------------------------------- AGREGAR    
            
            
               else{
               labDao.ConsultarFirma(); 
               MaxIdestudios(); 
               
               labDao.agregarUro(
                       Maxid, 
                       JCcolor1.getSelectedItem().toString(), 
                       TxtOlor1.getText(),
                       TxtDensidad.getText(), 
                       JCaspecto.getSelectedItem().toString(), 
                       JCph.getSelectedItem().toString(), 
                       JCglucosa1.getSelectedItem().toString(), 
                       JCproteinas.getSelectedItem().toString(), 
                       JChemoglobina.getSelectedItem().toString(), 
                       JCnitridos.getSelectedItem().toString(), 
                       JCcuerposCe.getSelectedItem().toString(), 
                       JCurobilinogeno1.getSelectedItem().toString(), 
                       JCpigmentos.getSelectedItem().toString(), 
                       JCbilirrubina.getSelectedItem().toString(), 
                       TxtLeucositos.getText(),
                       JCbacterias.getSelectedItem().toString(), 
                       JCEP.getSelectedItem().toString(), 
                       TxtHematies.getText(),
                       TxtCelulasredondas.getText(),
                       TxtFilamentos.getSelectedItem().toString(),
                       Txtcilindros.getText(),
                       Txtcristales.getText(),
                       TXTfungicas.getText()
               );    
               
               
               pdf();  
               guardarReporte();  
               cancelarexamen();
               JOptionPane.showMessageDialog(null, "GENERANDO REPORTE...","ESTUDIO",1);
               }
           
               
               
               
           }
           
           
           
   
               
               else if (JRcoprocultivo.isSelected()){
               
                
                //--------------------------------------- ACTUALIZAR    
            String nivelUsuario=MP.getNivel(); 
            if(nivelUsuario.equals("Lcdo.")&& !estadoEstudio.equals("") || 
               nivelUsuario.equals("Administrador") && !estadoEstudio.equals("")){
             labDao.ConsultarFirma(); 
               
            Maxid=idCallestudios;
            pdf();  
       
            labDao.actualizarCopro(
                       Maxid, 
                       JCcolor4.getSelectedItem().toString(), 
                       JCAspect.getSelectedItem().toString(), 
                       JCconsistencia.getSelectedItem().toString(), 
                       JCreaccion1.getSelectedItem().toString(), 
                       JCmoco.getSelectedItem().toString(), 
                       Jolor.getSelectedItem().toString(), 
                       JCsangre1.getSelectedItem().toString(), 
                       JCrestos.getSelectedItem().toString(), 
                       JtextMicroscopio.getText()
                       
                       
              ); 
            
            
            updateReporte(); 
            cancelarexamen();
            
            String Fecha = new SimpleDateFormat("dd/MM/yyyy").format(Menu.FechaAdmin.getDate());
            String accion = "HORA: "+ Menu.Time.getText()+" Corrigió el examen de: " +TXTPnombre.getText() +" "+ TXTPapellido.getText();
            audit.corregirEstudio(
                    idusuario, 
                    accion,
                    Fecha 
                    );
            
            backtoConsulta();
            }
           
    //--------------------------------------- AGREGAR    
            
            
               else{
               labDao.ConsultarFirma(); 
               MaxIdestudios(); 
               
               labDao.agregarCopro(
                       Maxid, 
                       JCcolor4.getSelectedItem().toString(), 
                       JCAspect.getSelectedItem().toString(), 
                       JCconsistencia.getSelectedItem().toString(), 
                       JCreaccion1.getSelectedItem().toString(), 
                       JCmoco.getSelectedItem().toString(), 
                       Jolor.getSelectedItem().toString(), 
                       JCsangre1.getSelectedItem().toString(), 
                       JCrestos.getSelectedItem().toString(), 
                       JtextMicroscopio.getText()
               );    
               
               
               pdf();  
               guardarReporte();  
               cancelarexamen();
               JOptionPane.showMessageDialog(null, "GENERANDO REPORTE...","ESTUDIO",1);
               }
               
               
               
               }
        
        
        
  else if (JRuroanalisis.isSelected() && JRcoprocultivo.isSelected() ){
  
  
  
      
      
             //--------------------------------------- ACTUALIZAR    
            String nivelUsuario=MP.getNivel(); 
            if(nivelUsuario.equals("Lcdo.")&& !estadoEstudio.equals("") || 
               nivelUsuario.equals("Administrador") && !estadoEstudio.equals("")){
             labDao.ConsultarFirma(); 
               
            Maxid=idCallestudios;
            pdf();  
       
            labDao.actualizarUro(
                       Maxid, 
                       JCcolor1.getSelectedItem().toString(), 
                       TxtOlor1.getText(),
                       TxtDensidad.getText(), 
                       JCaspecto.getSelectedItem().toString(), 
                       JCph.getSelectedItem().toString(), 
                       JCglucosa1.getSelectedItem().toString(), 
                       JCproteinas.getSelectedItem().toString(), 
                       JChemoglobina.getSelectedItem().toString(), 
                       JCnitridos.getSelectedItem().toString(), 
                       JCcuerposCe.getSelectedItem().toString(), 
                       JCurobilinogeno1.getSelectedItem().toString(), 
                       JCpigmentos.getSelectedItem().toString(), 
                       JCbilirrubina.getSelectedItem().toString(), 
                       TxtLeucositos.getText(),
                       JCbacterias.getSelectedItem().toString(), 
                       JCEP.getSelectedItem().toString(), 
                       TxtHematies.getText(),
                       TxtCelulasredondas.getText(),
                       TxtFilamentos.getSelectedItem().toString(),
                       Txtcilindros.getText(),
                       Txtcristales.getText(),
                       TXTfungicas.getText()
                       
              ); 
            
            
            
            labDao.actualizarCopro(
                       Maxid, 
                       JCcolor4.getSelectedItem().toString(), 
                       JCAspect.getSelectedItem().toString(), 
                       JCconsistencia.getSelectedItem().toString(), 
                       JCreaccion1.getSelectedItem().toString(), 
                       JCmoco.getSelectedItem().toString(), 
                       Jolor.getSelectedItem().toString(), 
                       JCsangre1.getSelectedItem().toString(), 
                       JCrestos.getSelectedItem().toString(), 
                       JtextMicroscopio.getText()
                       
                       
              ); 
            
            
            updateReporte(); 
            cancelarexamen();
            
            String Fecha = new SimpleDateFormat("dd/MM/yyyy").format(Menu.FechaAdmin.getDate());
            String accion = "HORA: "+ Menu.Time.getText()+" Corrigió el examen de: " +TXTPnombre.getText() +" "+ TXTPapellido.getText();
            audit.corregirEstudio(
                    idusuario, 
                    accion,
                    Fecha 
                    );
            
            backtoConsulta();
            }
           
            
            
            
            
            
            
            
            
    //--------------------------------------- AGREGAR    
            
            
               else{
               labDao.ConsultarFirma(); 
               MaxIdestudios(); 
               
               labDao.agregarUro(
                       Maxid, 
                       JCcolor1.getSelectedItem().toString(), 
                       TxtOlor1.getText(),
                       TxtDensidad.getText(), 
                       JCaspecto.getSelectedItem().toString(), 
                       JCph.getSelectedItem().toString(), 
                       JCglucosa1.getSelectedItem().toString(), 
                       JCproteinas.getSelectedItem().toString(), 
                       JChemoglobina.getSelectedItem().toString(), 
                       JCnitridos.getSelectedItem().toString(), 
                       JCcuerposCe.getSelectedItem().toString(), 
                       JCurobilinogeno1.getSelectedItem().toString(), 
                       JCpigmentos.getSelectedItem().toString(), 
                       JCbilirrubina.getSelectedItem().toString(), 
                       TxtLeucositos.getText(),
                       JCbacterias.getSelectedItem().toString(), 
                       JCEP.getSelectedItem().toString(), 
                       TxtHematies.getText(),
                       TxtCelulasredondas.getText(),
                       TxtFilamentos.getSelectedItem().toString(),
                       Txtcilindros.getText(),
                       Txtcristales.getText(),
                       TXTfungicas.getText()
               );    
               
               
                 labDao.agregarCopro(
                       Maxid, 
                       JCcolor4.getSelectedItem().toString(), 
                       JCAspect.getSelectedItem().toString(), 
                       JCconsistencia.getSelectedItem().toString(), 
                       JCreaccion1.getSelectedItem().toString(), 
                       JCmoco.getSelectedItem().toString(), 
                       Jolor.getSelectedItem().toString(), 
                       JCsangre1.getSelectedItem().toString(), 
                       JCrestos.getSelectedItem().toString(), 
                       JtextMicroscopio.getText()
                       
                       
              ); 
            
               
               pdf();  
               guardarReporte();  
               cancelarexamen();
               JOptionPane.showMessageDialog(null, "GENERANDO REPORTE...","ESTUDIO",1);
               }
           
               
      
      
      
      
      
      
      
      
      
      
      
      
  
  
  }
        

   
    }//GEN-LAST:event_jButton34ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed

        
                if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea cancelar los resultado?",
            "Cancelar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  { cancelarexamen();
         }
                
                else{}
                
    }//GEN-LAST:event_jButton20ActionPerformed

    private void BtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSearchActionPerformed
    procesarPaciente();
    }//GEN-LAST:event_BtnSearchActionPerformed

    private void BtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarActionPerformed

        Connection con;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps;
        ResultSet rs;

        Pattern pattern = Pattern.compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
        String Correo = TXTPcorreo.getText();
        Matcher mather = pattern.matcher(Correo);

        if (TXTPapellido.getText().equals("") || TXTPnombre.getText().equals("") || FechaNacimiento.getDate()==null
            || TXTPcedula.getText().equals("") || TXTPcorreo.getText().equals("") || TXTPtelefono.getText().equals("") || TXTPdireccion.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "TODOS LOS CAMPOS SON OBLIGATORIOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);

        } else if (mather.find() == false) {
            JOptionPane.showMessageDialog(null, "EMAIL INVALIDO, VERIFIQUE", "EMAIL INVALIDO", JOptionPane.ERROR_MESSAGE);
            this.TXTPcorreo.requestFocus();
        }

        else {

            String sql="SELECT Idpaciente, Nombre, Apellido, Cedula, Telefono, Direccion FROM table_paciente  WHERE Cedula='"+ TXTPcedula.getText() +"'";

            try{
                con = cn.getConnection();
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();
                if(rs.next()){JOptionPane.showMessageDialog(null, "EL PACIENTE YA SE ENCUENTRA", "DATO DUPLICADO",JOptionPane.ERROR_MESSAGE);}

                else{
                    AuditoriaAgregar();
                    AgregarPaciente();
                    Callpacient();
                    BtnAgregar.setEnabled(false);
                    //      TxtMotivo.setEnabled(true);

                }

            }catch(Exception e){System.out.println(e);}
        }
    }//GEN-LAST:event_BtnAgregarActionPerformed

    private void BtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelarActionPerformed
        limpiarCampos();
        DesactivarCampos();
        JPregistro.setVisible(false);
        TXTPcedula.setText("V-");
        BtnAgregar.setEnabled(true);
        BtnSearch.setEnabled(true);  
        TXTPcedula.setEnabled(true);
        BtnAgregar.setEnabled(false);
        
    }//GEN-LAST:event_BtnCancelarActionPerformed

    private void TXTPcedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPcedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPcedulaActionPerformed

    private void TXTPcedulaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='V' || car=='E'  || car=='-'|| car=='J'|| car =='H' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTPcedula.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==14)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='V' && car!='E' && car!='-' && car != 'J' && car!='H' || car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }

    }//GEN-LAST:event_TXTPcedulaKeyTyped

    private void TXTPnombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPnombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPnombreActionPerformed

    private void TXTPnombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPnombreKeyTyped
          va.longitud(TXTPnombre.getText(), 30, evt);
    }//GEN-LAST:event_TXTPnombreKeyTyped

    private void TXTPapellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPapellidoKeyTyped
        va.longitud(TXTPapellido.getText(), 30, evt);
    }//GEN-LAST:event_TXTPapellidoKeyTyped

    private void TXTPcorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcorreoKeyTyped
         va.longitud(TXTPcorreo.getText(), 30, evt);
    }//GEN-LAST:event_TXTPcorreoKeyTyped

    private void TXTPdireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPdireccionKeyTyped
         va.longitud(TXTPdireccion .getText(), 80, evt);
    }//GEN-LAST:event_TXTPdireccionKeyTyped

    private void JCAspectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCAspectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JCAspectActionPerformed

    private void JRMasculinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRMasculinoActionPerformed
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
    }//GEN-LAST:event_JRMasculinoActionPerformed

    private void JRfemeninoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRfemeninoActionPerformed
      JRfemenino.setSelected(true);
      JRMasculino.setSelected(false);
      Sexo="Femenino";
    }//GEN-LAST:event_JRfemeninoActionPerformed

    private void TXTPcedulaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyPressed
                 if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
   procesarPaciente();

} 
    }//GEN-LAST:event_TXTPcedulaKeyPressed

    
    
    
    public static String getEdad(Date fechaNacimiento) {
    if (fechaNacimiento != null) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        StringBuilder result = new StringBuilder();
        if (fechaNacimiento != null) {
            result.append(sdf.format(fechaNacimiento));
            result.append(" (");
            Calendar c = new GregorianCalendar();
            c.setTime(fechaNacimiento);
            result.append(calcularEdad(c));
            result.append(" años)");
        }
        return result.toString();
    }
    return "";
}

private static int calcularEdad(Calendar fechaNac) {
    Calendar today = Calendar.getInstance();
    int diffYear = today.get(Calendar.YEAR) - fechaNac.get(Calendar.YEAR);
    int diffMonth = today.get(Calendar.MONTH) - fechaNac.get(Calendar.MONTH);
    int diffDay = today.get(Calendar.DAY_OF_MONTH) - fechaNac.get(Calendar.DAY_OF_MONTH);
    // Si está en ese año pero todavía no los ha cumplido
    if (diffMonth < 0 || (diffMonth == 0 && diffDay < 0)) {
        diffYear = diffYear - 1;
    }
    return diffYear;
}
    
    
    
    
    
     public void pdf() {
      try {

                   
        /*-------------------------------------------------------------------------------------*/
            
            String fechaN = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts1= fechaN.split("/");
            String an1 = dateParts1[0];
            String mes1 = dateParts1[1];
            String dia1 = dateParts1[2];
            
            
            String an_actual = Validar.fecha_actual();
            String mes_actual = Validar.fecha_mes();
            String dia_actual = Validar.fecha_dia();
            
           /* System.out.println("Hoy es :"+dia_actual+" "+ mes_actual+" "+an_actual);*/
            
            
            
        
            
            int diferenciadia=Integer.parseInt(dia_actual)- Integer.parseInt(dia1);
            int diferenciames=Integer.parseInt(mes_actual)- Integer.parseInt(mes1);
            int diferencian=Integer.parseInt(an_actual)- Integer.parseInt(an1);;
        
      /*      
                
            System.out.println("Fecha de nacimiento :"+dia1+" "+ mes1+" "+an1);
           
            
            
          System.out.println("Dia" +dia_actual+"- " +dia1 +" ="+diferenciadia);
          System.out.println("Mes" +mes_actual+"- " +mes1 +"= "+diferenciames);  
          System.out.println("Año" +an_actual+"- " +an1 +"= "+diferencian);   
            
            
          System.out.println("Tu cumpleaños es :"+diferenciadia+" "+ diferenciames+" "+diferencian); */
            
   if (diferenciames < 0 || (diferenciames == 0 && diferenciadia < 0)) {
        diferencian = diferencian - 1;
    }
 
   
          
          
          
          
         DateTimeFormatter fth = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).ofPattern("dd-MM-yyyy--HH-mm");
         LocalDateTime fechaactual = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
          

         
            String Paciente=TXTPnombre.getText()+ " "+ TXTPapellido.getText(); 
            PdfNames=TXTPcedula.getText()+"_"+Paciente+"_"+Maxid;
    
        
          
          
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            Paragraph saltolinea = new Paragraph();
          

            FileOutputStream archivo;
            //String rut = System.getProperty("user.home");
            File file = new File("C://Fundaginebra//Reportes//"+PdfNames+".pdf");
            archivo = new FileOutputStream(file);
            Document doc = new Document();
            PdfWriter writer=  PdfWriter.getInstance(doc, archivo);
            doc.open();
       
            com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\src\\imagenes\\Fundacionlogo1.png");
            header.setAlignment(Chunk.ALIGN_CENTER);

            Paragraph fecha = new Paragraph();
            Font negrita = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
            fecha.add(Chunk.NEWLINE);
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
            String Hora = Menu.Time.getText()+" "+Menu.jLabel102.getText();
            //fecha.add( "  Fecha: " + Fecha + "\n" +"  Hora: "+ Hora ) ;

            
            
         
            
            PdfPTable Encabezado = new PdfPTable(1);
            Encabezado.setWidthPercentage(25);
            Encabezado.getDefaultCell().setBorder(0);
            float[] ColumnaEncabezado = new float[]{50f};
            Encabezado.setWidths(ColumnaEncabezado);
            Encabezado.setHorizontalAlignment(Element.ALIGN_LEFT);
            Encabezado.addCell(header);
            doc.add(Encabezado);
          
            PdfContentByte CB = writer.getDirectContent();  
            BaseFont BF2 = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
  
            CB.beginText();
            CB.setFontAndSize(BF2, 12);
            CB.setTextMatrix(200, 800);
            CB.showText(empresa);
            CB.setFontAndSize(BF, 10);
            CB.setTextMatrix(260, 790);
            CB.showText(rif);
            
            
            

            if(fechaEstudio==null){ 
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 780);
            CB.showText("FECHA: "+ Fecha);
            
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("HORA: "+ Hora);    
              
            }
            
            else if( !fechaEstudio.equals(Fecha)){          
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("FECHA: "+ fechaEstudio);
            }
            
            else{
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 780);
            CB.showText("FECHA: "+ Fecha);
            
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("HORA: "+ Hora);
            }

   
            
            if(!Factura.equals("")){
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(460, 760);
            CB.showText("FACTURA: #"+ Factura);
            }

            
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(235, 740);
            CB.showText(ubicacion);
          
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(210, 730);
            CB.showText(telefonos); 
           /*
            CB.setTextMatrix(168, 725);
            CB.showText("__________________________________________________________________");
          */
            CB.endText();
            
            
            
      
       //BODY 
       
       
       
            PdfPTable Tablatitle0 = new PdfPTable(1); 
            
            Tablatitle0.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tablatitle0.setWidthPercentage(100);  
            Tablatitle0.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablatitle0.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph tx0columna1 = new Paragraph("-----ANÁLISIS DE ORINA-----");
            tx0columna1.getFont().setStyle(Font.BOLD);
            tx0columna1.getFont().setSize(9);        
            tx0columna1.setFont(Letra);
            tx0columna1.setAlignment(Element.ALIGN_CENTER);
            Tablatitle0.addCell(tx0columna1);
     
                
            PdfPTable Tablatitle1 = new PdfPTable(1); 
            Tablatitle1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tablatitle1.setWidthPercentage(100);  
            Tablatitle1.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablatitle1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph tx1columna1 = new Paragraph("-----ANÁLISIS DE HECES-----");
            tx1columna1.getFont().setStyle(Font.BOLD);
            tx1columna1.getFont().setSize(9);        
            tx1columna1.setFont(Letra);
            tx1columna1.setAlignment(Element.ALIGN_CENTER);
            Tablatitle1.addCell(tx1columna1);
     
            
            
                  
            PdfPTable Tablatitle = new PdfPTable(2); 
            
            Tablatitle.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            
            Tablatitle.setWidthPercentage(100);  
            Tablatitle.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablatitle.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph txcolumna1 = new Paragraph("ANÁLISIS REALIZADO");
            txcolumna1.getFont().setStyle(Font.BOLD);
            txcolumna1.getFont().setSize(9);        
            txcolumna1.setFont(Letra);
            txcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tablatitle.addCell(txcolumna1);
     
                
            Paragraph txcolumna2 = new Paragraph("RESULTADOS");
            txcolumna2.getFont().setStyle(Font.BOLD);
            txcolumna2.getFont().setSize(9);        
            txcolumna2.setFont(Letra);
            txcolumna2.setAlignment(Element.ALIGN_CENTER);
            Tablatitle.addCell(txcolumna2);
            

            PdfPTable Tabla = new PdfPTable(3); 
            Tabla.setWidthPercentage(100);  
            float[] medidaCeldas = {1f, 3f, 1f };
            Tabla.setWidths(medidaCeldas);
            Tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            if(order>0){
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid+" | "+ order);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1);
            }
            else{
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1); 
            }
     
                
            Paragraph tcolumna2 = new Paragraph("RESULTADOS DEL ANÁLISIS");
            tcolumna2.getFont().setStyle(Font.BOLD);
            tcolumna2.getFont().setSize(12);        
            tcolumna2.setFont(Letra);
            tcolumna2.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna2);

            Paragraph tcolumna3 = new Paragraph("N° DE PACIENTE: " +IdPaciente+" ");
            tcolumna3.getFont().setStyle(Font.BOLD);
            tcolumna3.getFont().setSize(8);        
            tcolumna3.setFont(Letra);
            tcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna3);
        

              
            
            PdfPTable Tabla0 = new PdfPTable(4); 
            // Tabla0.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla0.setWidthPercentage(100);  
            float[] medidaCeldas0 = {3f, 2f, 1f,2f};
            Tabla0.setWidths(medidaCeldas0);
            Tabla0.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla0.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t0columna1 = new Paragraph("PACIENTE: "+ Paciente);
            t0columna1.getFont().setStyle(Font.BOLD);
            t0columna1.getFont().setSize(8);        
            t0columna1.setFont(Letra);
            t0columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna1);
     
                
            Paragraph t0columna2 = new Paragraph("CÉDULA: "+TXTPcedula.getText());
            t0columna2.getFont().setStyle(Font.BOLD);
            t0columna2.getFont().setSize(8);        
            t0columna2.setFont(Letra);
            t0columna2.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna2);

            Paragraph t0columna3 = new Paragraph("EDAD: "+Integer.toString(diferencian));
            t0columna3.getFont().setStyle(Font.BOLD);
            t0columna3.getFont().setSize(8);        
            t0columna3.setFont(Letra);
            t0columna3.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna3);
        
            Paragraph t0columna4 = new Paragraph("SEXO: " +Sexo);
            t0columna4.getFont().setStyle(Font.BOLD);
            t0columna4.getFont().setSize(8);        
            t0columna4.setFont(Letra);
            t0columna4.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna4);
        
            
            /*
            Tabla0.addCell(new Paragraph(Paciente,FontFactory.getFont("Arial",8,Font.NORMAL))); 
            Tabla0.addCell(new Paragraph(TXTPcedula.getText(),FontFactory.getFont("Arial",8,Font.NORMAL))); 
            Tabla0.addCell(new Paragraph(Integer.toString(diferencian),FontFactory.getFont("Arial",8,Font.NORMAL))); 
            Tabla0.addCell(new Paragraph(Sexo,FontFactory.getFont("Arial",8,Font.NORMAL))); 
      */
            
            
            PdfPTable Tabla1 = new PdfPTable(1); 
            Tabla1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla1.setWidthPercentage(100);  
            float[] medidaCeldas1 = {5f};
            Tabla1.setWidths(medidaCeldas1);
            Tabla1.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           
            Paragraph t1columna1 = new Paragraph("CARACTERES GENERALES");
            t1columna1.getFont().setStyle(Font.BOLD);
            t1columna1.getFont().setSize(9);        
            t1columna1.setFont(Letra);
            t1columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla1.addCell(t1columna1);
     

            PdfPTable Tabla2 = new PdfPTable(2); 
            Tabla2.setWidthPercentage(100);  
            Tabla2.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            float[] medidaCeldas2 = {4f, 4f};
            Tabla2.setWidths(medidaCeldas2);
            Tabla2.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t2columna1 = new Paragraph("");
            t2columna1.getFont().setStyle(Font.BOLD);
            t2columna1.getFont().setSize(9);        
            t2columna1.setFont(Letra);
            t2columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna1);
     
                
            Paragraph t2columna2 = new Paragraph();
            t2columna2.getFont().setStyle(Font.BOLD);
            t2columna2.getFont().setSize(9);        
            t2columna2.setFont(Letra);
            t2columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna2);

        
            
            
       
            if(!JCcolor1.getSelectedItem().equals("Seleccionar")){    
           Tabla2.addCell(new Paragraph("Color",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(JCcolor1.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
                    
             if(!TxtOlor1.getText().equals("")){   
           Tabla2.addCell(new Paragraph("Olor",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtOlor1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
             }
                    
             if(!TxtOlor1.getText().equals("")){     
           Tabla2.addCell(new Paragraph("Densidad",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtDensidad.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
             }
        
             if(!JCaspecto.getSelectedItem().equals("Seleccionar")){  
           Tabla2.addCell(new Paragraph("Aspecto",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(JCaspecto.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
             }
                  
           if(!JCph.getSelectedItem().equals("Seleccionar")){   
           Tabla2.addCell(new Paragraph("PH",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(JCph.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
          
              
           PdfPTable Tabla3 = new PdfPTable(1); 
           Tabla3.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
           Tabla3.setWidthPercentage(100);  
           Tabla3.setWidths(medidaCeldas1);
           Tabla3.setHorizontalAlignment(Element.ALIGN_CENTER);
           Tabla3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

           Paragraph t3columna1 = new Paragraph("ANÁLISIS QUIMICO");
           t3columna1.getFont().setStyle(Font.BOLD);
           t3columna1.getFont().setSize(9);        
           t3columna1.setFont(Letra);
           t3columna1.setAlignment(Element.ALIGN_LEFT);
           Tabla3.addCell(t3columna1);
           
           
           
           
            
            PdfPTable Tabla4 = new PdfPTable(2); 
            Tabla4.setWidthPercentage(100);  
            Tabla4.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tabla4.setWidths(medidaCeldas2);
            Tabla4.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t4columna1 = new Paragraph();
            t4columna1.getFont().setStyle(Font.BOLD);
            t4columna1.getFont().setSize(9);        
            t4columna1.setFont(Letra);
            t4columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla4.addCell(t4columna1);
     
                
            Paragraph t4columna2 = new Paragraph();
            t4columna2.getFont().setStyle(Font.BOLD);
            t4columna2.getFont().setSize(9);        
            t4columna2.setFont(Letra);
            t4columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla4.addCell(t4columna2);

        
        
       
             if(!JCglucosa1.getSelectedItem().equals("Seleccionar")){       
           Tabla4.addCell(new Paragraph("Glucosa",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(JCglucosa1.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
             }
                    
            if(!JCproteinas.getSelectedItem().equals("Seleccionar")){        
           Tabla4.addCell(new Paragraph("Proteinas",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(JCproteinas.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
                    
            if(!JChemoglobina.getSelectedItem().equals("Seleccionar")){         
           Tabla4.addCell(new Paragraph("Hemoglobina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(JChemoglobina.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
            
            
         if(!JCnitridos.getSelectedItem().equals("Seleccionar")){   
           Tabla4.addCell(new Paragraph("Nitritos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(JCnitridos.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
         }
         
             if(!JCcuerposCe.getSelectedItem().equals("Seleccionar")){   
           Tabla4.addCell(new Paragraph("Cuerpos Cetonicos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(JCcuerposCe.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
             }
             
             
             if(!JCurobilinogeno1.getSelectedItem().equals("Seleccionar")){           
           Tabla4.addCell(new Paragraph("Urobilinogeno",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(JCurobilinogeno1.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
             }
             
            if(!JCpigmentos.getSelectedItem().equals("Seleccionar")){   
           Tabla4.addCell(new Paragraph("Pigmentos Biliares",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(JCpigmentos.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
            
            
             if(!JCbilirrubina.getSelectedItem().equals("Seleccionar")){   
           Tabla4.addCell(new Paragraph("Bilirrubina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(JCbilirrubina.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            
             }
            
             
             
           PdfPTable Tabla5 = new PdfPTable(1); 
           Tabla5.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
           Tabla5.setWidthPercentage(100);  
           Tabla5.setWidths(medidaCeldas1);
           Tabla5.setHorizontalAlignment(Element.ALIGN_CENTER);
           Tabla5.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

           Paragraph t5columna1 = new Paragraph("ANÁLISIS MICROSCÓPICO");
           t5columna1.getFont().setStyle(Font.BOLD);
           t5columna1.getFont().setSize(9);        
           t5columna1.setFont(Letra);
           t5columna1.setAlignment(Element.ALIGN_LEFT);
           Tabla5.addCell(t5columna1);
           
           
           
            PdfPTable Tabla6 = new PdfPTable(2); 
            Tabla6.setWidthPercentage(100);  
            Tabla6.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tabla6.setWidths(medidaCeldas2);
            Tabla6.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla6.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t6columna1 = new Paragraph("");
            t6columna1.getFont().setStyle(Font.BOLD);
            t6columna1.getFont().setSize(9);        
            t6columna1.setFont(Letra);
            t6columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla6.addCell(t6columna1);
     
                
            Paragraph t6columna2 = new Paragraph("");
            t6columna2.getFont().setStyle(Font.BOLD);
            t6columna2.getFont().setSize(9);        
            t6columna2.setFont(Letra);
            t6columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla6.addCell(t6columna2);

        
        
       
            if(!JCbacterias.getSelectedItem().equals("Seleccionar")){     
           Tabla6.addCell(new Paragraph("Bacterias",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(JCbacterias.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
                    
             if(!JCEP.getSelectedItem().equals("Seleccionar")){     
           Tabla6.addCell(new Paragraph("Celulas Epiteliales",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(JCEP.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
             }
           
           if(!TxtLeucositos.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Leucocitos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TxtLeucositos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           if(!TxtHematies.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Hematies",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TxtHematies.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           if(!TxtCelulasredondas.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Células Redondas",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TxtCelulasredondas.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
            if(!TxtFilamentos.getSelectedItem().equals("Seleccionar")){ 
           Tabla6.addCell(new Paragraph("Filamentos de Mucina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TxtFilamentos.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
  
           if(!Txtcilindros.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Cilindros",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(Txtcilindros.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           if(!Txtcristales.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Cristales",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(Txtcristales.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           if(!TXTfungicas.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Formas Fungicas",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTfungicas.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
         
           
           
            
            PdfPTable TableObservacion = new PdfPTable(1); 
            TableObservacion.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           // Tabla9.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            float[] medidaObservacion = {5f};
            TableObservacion.setWidthPercentage(100);  
            TableObservacion.setWidths(medidaObservacion);
            TableObservacion.setHorizontalAlignment(Element.ALIGN_CENTER);
            TableObservacion.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            
           
            Paragraph tOcolumna1 = new Paragraph("Observaciones");
            tOcolumna1.getFont().setStyle(Font.BOLD);
            tOcolumna1.getFont().setSize(9);        
            tOcolumna1.setFont(Letra);
            tOcolumna1.setAlignment(Element.ALIGN_LEFT);
            TableObservacion.addCell(tOcolumna1);
            TableObservacion.addCell(new Paragraph(JtextObservaciones.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));  
           
           
           
           
           
           
           
           
           
           
            PdfPTable Tabla7 = new PdfPTable(1); 
            Tabla7.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla7.setWidthPercentage(100);  

            Tabla7.setWidths(medidaCeldas1);
            Tabla7.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla7.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            
            
            Paragraph t7columna1 = new Paragraph("");
            t7columna1.getFont().setStyle(Font.BOLD);
            t7columna1.getFont().setSize(9);        
            t7columna1.setFont(Letra);
            t7columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla7.addCell(t7columna1);
     

           
           
           
            PdfPTable Tabla8 = new PdfPTable(2); 
            Tabla8.setWidthPercentage(100);  
            Tabla8.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tabla8.setWidths(medidaCeldas2);
            Tabla8.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla8.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t8columna1 = new Paragraph();
            t8columna1.getFont().setStyle(Font.BOLD);
            t8columna1.getFont().setSize(9);        
            t8columna1.setFont(Letra);
            t8columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla8.addCell(t8columna1);
     
                
            Paragraph t8columna2 = new Paragraph();
            t8columna2.getFont().setStyle(Font.BOLD);
            t8columna2.getFont().setSize(9);        
            t8columna2.setFont(Letra);
            t8columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla8.addCell(t8columna2);

        
        
       
               if(!JCcolor4.getSelectedItem().equals("Seleccionar")){      
           Tabla8.addCell(new Paragraph("Color",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(JCcolor4.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
               }
             
               if(!JCAspect.getSelectedItem().equals("Seleccionar")){ 
           Tabla8.addCell(new Paragraph("Aspecto",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(JCAspect.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
               }
               
               
               if(!JCconsistencia.getSelectedItem().equals("Seleccionar")){ 
           Tabla8.addCell(new Paragraph("Consistencia",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(JCconsistencia.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
               }
               
               if(!JCreaccion1.getSelectedItem().equals("Seleccionar")){ 
           Tabla8.addCell(new Paragraph("Reacción",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(JCreaccion1.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
               }
               
               if(!JCmoco.getSelectedItem().equals("Seleccionar")){ 
           Tabla8.addCell(new Paragraph("Moco",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(JCmoco.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
               }
               
               if(!JCsangre1.getSelectedItem().equals("Seleccionar")){ 
           Tabla8.addCell(new Paragraph("Sangre",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(JCsangre1.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
               }
               
               if(!JCrestos.getSelectedItem().equals("Seleccionar")){ 
           Tabla8.addCell(new Paragraph("Restos Alimenticios",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(JCrestos.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
               }
               
               if(!Jolor.getSelectedItem().equals("Seleccionar")){ 
           Tabla8.addCell(new Paragraph("Olor",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(Jolor.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
               }
           
           
            PdfPTable Tabla9 = new PdfPTable(1); 
            Tabla9.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla9.setWidthPercentage(100);  
            Tabla9.setWidths(medidaCeldas1);
            Tabla9.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla9.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            
            
            Paragraph t9columna1 = new Paragraph("EXAMEN MICROSCOPICO \n ");
            t9columna1.getFont().setStyle(Font.BOLD);
            t9columna1.getFont().setSize(9);        
            t9columna1.setFont(Letra);
            t9columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla9.addCell(t9columna1);
            Tabla9.addCell(new Paragraph(JtextMicroscopio.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));           
           
           
           
            
            
             
           PdfPTable Tablafirma = new PdfPTable(3); 
           Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           Tablafirma.setWidthPercentage(100);  
           float[] medidaCeldasP = {3f, 1f, 3f};
           Tablafirma.setWidths(medidaCeldasP);
           Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
           Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
           Paragraph tPcolumna1 = new Paragraph("\n\n\n\n  "+piepagina);
           tPcolumna1.getFont().setStyle(Font.BOLD);
           tPcolumna1.getFont().setSize(8);        
           tPcolumna1.setFont(Letra);
           tPcolumna1.setAlignment(Element.ALIGN_CENTER);
           Tablafirma.addCell(tPcolumna1);

                
           com.itextpdf.text.Image FirmaLcdo = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\dist\\imagen.bin");
           FirmaLcdo.setAlignment(Chunk.ALIGN_CENTER);
           Tablafirma.addCell(FirmaLcdo);

           Paragraph tPcolumna3 = new Paragraph("\n\n\n\n" + writer.getPageNumber()+ " Pág");
           tPcolumna3.getFont().setStyle(Font.BOLD);
           tPcolumna3.getFont().setSize(8);        
           tPcolumna3.setFont(Letra);
           tPcolumna3.setAlignment(Element.ALIGN_CENTER);
           Tablafirma.addCell(tPcolumna3);
           


           knowaboutlcdo(); 
           PdfPTable TablafirmaLcdo = new PdfPTable(1); 
           TablafirmaLcdo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           TablafirmaLcdo.setWidthPercentage(100);  
           float[] medidaCeldasFirma = {20f};
           TablafirmaLcdo.setWidths(medidaCeldasFirma);
           TablafirmaLcdo.setHorizontalAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
           Paragraph tPcolumnaFirma1 = new Paragraph("________________ \n "+NameOfLcdo);
           tPcolumnaFirma1.getFont().setStyle(Font.BOLD);
           tPcolumnaFirma1.getFont().setSize(8);        
           tPcolumnaFirma1.setFont(Letra);
           tPcolumnaFirma1.setAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.addCell(tPcolumnaFirma1);
           
           
           
            
            
            
            
            
            
            
            
            
            if(JRuroanalisis.isSelected() && JRcoprocultivo.isSelected()){

            saltolinea.add("\n");
            doc.add(Tabla);
            
            doc.add(Tabla0);
            doc.add(saltolinea);
        
            
            /** ORINA **/
            doc.add(Tablatitle0);
            doc.add(Tablatitle);
            doc.add(Tabla1);
            doc.add(Tabla2);
           // doc.add(saltolinea);
            
            doc.add(Tabla3);
            doc.add(Tabla4);
          //  doc.add(saltolinea);
            
            doc.add(Tabla5);
            doc.add(Tabla6);
            doc.add(saltolinea);
            if(!JtextObservaciones.getText().equals("")){
            doc.add(TableObservacion);
            }
            
            /** HECES **/
            doc.add(saltolinea); 
            doc.add(Tablatitle1);
            doc.add(Tablatitle);
            doc.add(Tabla7);
            doc.add(Tabla8);
            doc.add(Tabla9);
         
            //FOOTER
           addFooterConfirma(writer);
            
        }
           
            
            
            
            
            
            
           else if(JRuroanalisis.isSelected()){ 
           

            saltolinea.add("\n");
            doc.add(Tabla);
            doc.add(Tabla0);
            doc.add(saltolinea);
            
            /** ORINA **/
            doc.add(Tablatitle0);
            doc.add(Tablatitle);
            doc.add(Tabla1);
            doc.add(Tabla2);
           // doc.add(saltolinea);
            
            doc.add(Tabla3);
            doc.add(Tabla4);
          //  doc.add(saltolinea);
            
            doc.add(Tabla5);
            doc.add(Tabla6);
            
            if(!JtextObservaciones.getText().equals("")){
            doc.add(TableObservacion);
            }
            
            
            doc.add(saltolinea); 
            doc.add(Tablafirma);
            doc.add(TablafirmaLcdo);

           
           }
           
            
            
           
           
           
           
           
           
           
            
            else if(JRcoprocultivo.isSelected()){  
               
             
            saltolinea.add("\n");
            doc.add(Tabla);
            doc.add(Tabla0);
            doc.add(saltolinea);
          
               
            doc.add(Tablatitle1);
            doc.add(Tablatitle);
            doc.add(Tabla7);
            doc.add(Tabla8);
            doc.add(Tabla9);
            doc.add(saltolinea); 
            doc.add(Tablafirma);
            doc.add(TablafirmaLcdo);
            
            }
           
           
           
           
           
           
           
           
           
           
            doc.close();
            archivo.close();
         //  Desktop.getDesktop().open(file);
        } catch (DocumentException | IOException e) {
           System.out.println(e);
           JOptionPane.showMessageDialog(null, "NO SE CONSIGUE LA CARPETA FUNDAGINEBRA EN DISCO C", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
      
     
     
     
     
     
     
     
   
    
    /*
         
            private void addHeader(PdfWriter writer){
   
                
                
                PdfPTable footer = new PdfPTable(1);
    try {

        footer.setWidths(new int[]{100});
        footer.setTotalWidth(527);
        footer.setLockedWidth(false);
        footer.getDefaultCell().setFixedHeight(40);
        footer.getDefaultCell().setBorder(Rectangle.TOP);
        footer.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);

        // add current page count
        footer.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
        footer.addCell(new Phrase(String.format("@Fundaginebra                                              |    www.fundaginebra.org    |                                            "+ writer.getPageNumber()+ " | Pág") , new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));

        // write page
        PdfContentByte canvas = writer.getDirectContent();
        canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
        footer.writeSelectedRows(0, -1, 34, 50, canvas);
        canvas.endMarkedContentSequence();
    } catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    }
}
         
   
   */
   
   
         
         
      String NameOfLcdo, Consultanlcdo;
     
     public void knowaboutlcdo(){
     
    Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null; 
         
         
         try{
         
       String query="Select FirmaLcdo from tableinfo where idinfo=? ";
       
       con = EnlaceBd.getConnection();
       ps = con.prepareStatement(query);
       ps.setInt(1, 1);
       rs=ps.executeQuery();
         
        if(rs.next()){
       Consultanlcdo= rs.getString("FirmaLcdo");
      
       if(!Consultanlcdo.equals("")){NameOfLcdo="Lcdo/a "+ Consultanlcdo;}
       else{NameOfLcdo="";}
       
       
         }

         }catch(Exception e){ System.out.println(e);} finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
     }

       
         
         
         
     
     
     
     
     
 private void addFooterConfirma(PdfWriter writer) throws IOException{
                 
     knowaboutlcdo();    
    try {

            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
     
          

           
           PdfPTable TablafirmaLcdo = new PdfPTable(1); 
           TablafirmaLcdo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           TablafirmaLcdo.setWidthPercentage(100);  
           float[] medidaCeldasFirma = {20f};
           TablafirmaLcdo.setWidths(medidaCeldasFirma);
           TablafirmaLcdo.setHorizontalAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
           Paragraph tPcolumnaFirma1 = new Paragraph("________________ \n "+ NameOfLcdo);
           tPcolumnaFirma1.getFont().setStyle(Font.BOLD);
           tPcolumnaFirma1.getFont().setSize(8);        
           tPcolumnaFirma1.setFont(Letra);
           tPcolumnaFirma1.setAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.addCell(tPcolumnaFirma1);

            
            
            
          PdfPTable Tablafirma = new PdfPTable(3); 
          Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
          Tablafirma.setWidthPercentage(100);  
          float[] medidaCeldasP = {3f, 1f, 3f };
          Tablafirma.setWidths(medidaCeldasP);
          Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
          Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        
          Paragraph tPcolumna1 = new Paragraph("\n\n\n\n  "+piepagina);
          tPcolumna1.getFont().setStyle(Font.BOLD);
          tPcolumna1.getFont().setSize(8);        
          tPcolumna1.setFont(Letra);
          tPcolumna1.setAlignment(Element.ALIGN_CENTER);
          Tablafirma.addCell(tPcolumna1);


            
            
            
         com.itextpdf.text.Image FirmaLcdo = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\dist\\imagen.bin");
         FirmaLcdo.setAlignment(Chunk.ALIGN_CENTER);
         Tablafirma.addCell(FirmaLcdo);
   

         

            
            
            
            
            
            
        Paragraph tPcolumna3 = new Paragraph( "\n\n\n\n\n" + writer.getPageNumber()+ " Pág");
        tPcolumna3.getFont().setStyle(Font.BOLD);
        tPcolumna3.getFont().setSize(8);        
        tPcolumna3.setFont(Letra);
        tPcolumna3.setAlignment(Element.ALIGN_CENTER);
        Tablafirma.addCell(tPcolumna3); 
             

     
        Tablafirma.setTotalWidth(527);
        Tablafirma.setLockedWidth(false);
        Tablafirma.getDefaultCell().setFixedHeight(40);
        Tablafirma.getDefaultCell().setBorder(Rectangle.TOP);
        Tablafirma.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);
        
        TablafirmaLcdo.setTotalWidth(527);
        TablafirmaLcdo.setLockedWidth(false);
        TablafirmaLcdo.getDefaultCell().setFixedHeight(40);
        TablafirmaLcdo.getDefaultCell().setBorder(Rectangle.TOP);
        TablafirmaLcdo.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);
        
        // write page
        PdfContentByte canvas = writer.getDirectContent();
        canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
        

        Tablafirma.writeSelectedRows(0, -1, 34, 120, canvas);
        TablafirmaLcdo.writeSelectedRows(0, -1, 34, 80, canvas);
        
        canvas.endMarkedContentSequence();
    } catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    }
}

     
     
     
     
     
     
     
     
     
     
     
     
         
         
         
   
         
         
           
 public void Callpacient() {  
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    String Cedula = TXTPcedula.getText().trim();  // Usar trim para eliminar espacios extra.

    // Validación temprana de la cédula antes de hacer la consulta
    if (Cedula.isEmpty() || Cedula.equals("V-")) {
        JOptionPane.showMessageDialog(null, "EL CAMPO CÉDULA NO PUEDE ESTAR VACIO Y DEBE LLEVAR V-", "CAMPO VACIO", JOptionPane.WARNING_MESSAGE);
        return; // Salir si la cédula es inválida
    }
    
    try {
        // Primera consulta para obtener IdPaciente
        String query = "SELECT Idpaciente FROM table_paciente WHERE Cedula = ?";
        con = cn.getConnection();
        ps = con.prepareStatement(query);
        ps.setString(1, Cedula);
        rs = ps.executeQuery();
        
        if (rs.next()) { // Si se encuentra el paciente
            IdPaciente = rs.getInt("Idpaciente");
            IdPacientess.setText(Integer.toString(IdPaciente));

            // Segunda consulta para obtener los detalles del paciente
            String sql2 = "SELECT Nombre, Apellido, Cedula, Telefono, Correo, Direccion, Sexo, date_format(FechNacimiento, '%d/%m/%Y') AS Fecha FROM table_paciente WHERE Idpaciente = ?";
            ps = con.prepareStatement(sql2);
            ps.setInt(1, IdPaciente);
            rs = ps.executeQuery();

            if (rs.next()) { // Si se obtienen los detalles del paciente
                String nombre = rs.getString("Nombre");
                String apellido = rs.getString("Apellido");
                String telefono = rs.getString("Telefono");
                String correo = rs.getString("Correo");
                String direccion = rs.getString("Direccion");
                Sexo = rs.getString("Sexo");
                String nacimiento = rs.getString("Fecha");

                // Asignar valores a los campos
                TXTPnombre.setText(nombre);
                TXTPapellido.setText(apellido);
                TXTPcorreo.setText(correo);
                TXTPtelefono.setText(telefono);
                TXTPdireccion.setText(direccion);
                
                // Selección de sexo
                if (Sexo.equals("Femenino")) {
                    JRfemenino.setSelected(true);
                    JRMasculino.setSelected(false);
                } else if (Sexo.equals("Masculino")) {
                    JRMasculino.setSelected(true);
                    JRfemenino.setSelected(false);
                }
                
                // Convertir fecha de nacimiento
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                FechaNacimiento.setDate(formato.parse(nacimiento));

                JPregistro.setVisible(true);  // Mostrar panel de registro
                TXTPcedula.setEnabled(false); // Desactivar el campo de cédula
            }
        } else {  // Si no se encuentra el paciente
            int option = JOptionPane.showConfirmDialog(rootPane, "El paciente no se encuentra registrado. ¿Desea registrarlo?", 
                                                        "Registro Paciente", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                goToRegister();  // Ir al formulario de registro
            } else {
                BtnAgregar.setVisible(false);  // Ocultar el botón de agregar
                TXTPcedula.setEnabled(true);   // Rehabilitar campo de cédula
                BtnSearch.setEnabled(true);    // Habilitar búsqueda
            }
        }
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}
     
     
        public void goToRegister(){
  
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       JPacientes pac = new JPacientes();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(pac);
       pac.setClosable(true);
       pac.setIconifiable(true);
       
        try {
            pac.setMaximum(true);
        } catch (Exception e) {
        }
        pac.toFront();
        pac.setVisible(true);

   } 
     
     
     
     public void AgregarPaciente(){                                             
    
    Connection con;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps;
    ResultSet rs;
    

          try {

              
                    
        java.sql.Date fechaU;
        Date dateU = FechaNacimiento.getDate();
        long dU = dateU.getTime();
        fechaU = new java.sql.Date(dU);
        
        
        
            String fecha = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts= fecha.split("/");
            String an = dateParts[0];
            String mes = dateParts[1];
            String dia = dateParts[2];
            String an_actual = Validar.fecha_actual();

            int edad;
            edad= Integer.parseInt(an_actual)-Integer.parseInt(an);
        
        
        
        
              
              
            String sql = "INSERT INTO table_paciente (Nombre, Apellido, Cedula,Telefono,Correo,Direccion, Sexo, FechNacimiento, edad) VALUES (?,?,?,?,?,?,?,?,?)";
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
      
            ps.setString(1, TXTPnombre.getText());
            ps.setString(2, TXTPapellido.getText());
            ps.setString(3, TXTPcedula.getText());
            ps.setString(4, TXTPtelefono.getText());
            ps.setString(5, TXTPcorreo.getText());
            ps.setString(6, TXTPdireccion.getText());
            ps.setString(7, Sexo);
            ps.setDate(8, fechaU);
            ps.setInt(9, edad);
            ps.execute();
  
            
            
  JOptionPane.showMessageDialog(null, "EL PACIENTE HA SIDO REGISTRADO","REGISTRO DE PACIENTES", 1);
        } catch (Exception e) {
      
            JOptionPane.showMessageDialog(null, e);
        }


      
          
          
    } 
     

    
    public void guardar_pdf(int codigo, int idexamen, int idpaciente, int idusuario, String Fecha, File ruta) {
        
        
   
        
        PdfDAO1 pa = new PdfDAO1();
        PdfVO po = new PdfVO();
        po.setCodigopdf(codigo);
        po.setIdexamen(idexamen);
        po.setIdpaciente(idpaciente);
        po.setIdusuario(idusuario);
        po.setFecha(Fecha);
        
        try {
            byte[] pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
            po.setArchivopdf(pdf);
        } catch (IOException ex) {
            po.setArchivopdf(null);
            System.out.println("Error al agregar archivo pdf "+ex.getMessage());
        }
        pa.Agregar_PdfVO(po);
    }

    String PdfNames;
     int idexamen;
    public void guardarReporte()
    {

      
        ruta_archivo="C://Fundaginebra//Reportes//"+PdfNames+".pdf";
    
        if(JRuroanalisis.isSelected() && JRcoprocultivo.isSelected()){ idexamen=1015; }
        else if(JRuroanalisis.isSelected()){ idexamen=1013; }
        else if(JRcoprocultivo.isSelected()){ idexamen=1014; }
         
        
        
        int idpaciente= Integer.parseInt(IdPacientess.getText());
 
        String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
        sql s = new sql();
        
        int codigo = s.auto_increment("SELECT MAX(codigopdf) FROM table_laboratorio;");
        File ruta = new File(ruta_archivo);
       
        
        
        
        if ( ruta_archivo.trim().length() != 0) {
            guardar_pdf(codigo, idexamen, idpaciente, idusuario, Fecha, ruta);
 
         //   tpdf.visualizar_PdfVO(tabla);
            ruta_archivo = "";
           // activa_boton(false, false, false);
  
        } else {
            JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
        }
    
    }
     /*
         public void seleccionar_pdf() {
        JFileChooser j = new JFileChooser();
        FileNameExtensionFilter fi = new FileNameExtensionFilter("pdf", "pdf");
        j.setFileFilter(fi);
        int se = j.showOpenDialog(this);
        if (se == 0) {
            this.btnseleccionar.setText("" + j.getSelectedFile().getName());
            ruta_archivo = j.getSelectedFile().getAbsolutePath();

        } else {
        }
    }
*/
     
     
     
     
     
     
     
     
     
     
     
     
     
          public void ActivarCampos() {
   
                 TXTPnombre.setEditable(true);
                 TXTPapellido.setEditable(true);
                 TXTPcorreo.setEditable(true);
                 TXTPtelefono.setEditable(true);
                 TXTPdireccion.setEditable(true);
                 JRMasculino.setEnabled(true);
                 JRfemenino.setEnabled(true);
                 FechaNacimiento.setEnabled(true);
                 BtnAgregar.setEnabled(true);
                 BtnAgregar.setVisible(true);
                
                 
       
           
    }
    
                
    public void limpiarCamposNoregistro() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true); 
      FechaNacimiento.setCalendar(null);
    }  
    
       
                   public void DesactivarCampos() {
   
                 TXTPnombre.setEditable(false);
                 TXTPapellido.setEditable(false);
                 TXTPcorreo.setEditable(false);
                 TXTPtelefono.setEditable(false);
                 TXTPdireccion.setEditable(false);
                 JRMasculino.setEnabled(false);
                 JRfemenino.setEnabled(false);
                 FechaNacimiento.setEnabled(false);
                 BtnAgregar.setEnabled(false);
               
       
           
    }
     
     
     
     
     
     

    String Sexo;
    int IdPaciente;
    
    
    public void limpiarCampos() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcedula.setText("V-");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true);  
      FechaNacimiento.setCalendar(null);
    }
    
    
        
        void limpiarTabla() {
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i);
            i = i - 1;
        }
    }
        
        
   
        

   int Maxid;
    public void MaxIdestudios() {
    Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs=null;
    
   
       try {

            String sql = "SELECT MAX(COdigopdf) from table_laboratorio ";
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
            Maxid= rs.getInt("MAX(codigopdf)")+1;
        
            }
            
          
            

        } catch (Exception e) { JOptionPane.showMessageDialog(null, e);}
     
    finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
     
     
     }
    
       public void cancelarexamen() 
        
        {
        
        jButton34.setEnabled(true);
        TxtOlor1.setText("");
        TxtDensidad.setText("");
        JtextMicroscopio.setText("");
        TxtDensidad.setText("");
        JRuroanalisis.setSelected(false);
        JRcoprocultivo.setSelected(false);
     
        jPanel6.setEnabled(true);
      
        jPanel6.setVisible(true);

        

        TxtLeucositos.setText("");
        TxtHematies.setText("");
        TxtCelulasredondas.setText("");

        
        Txtcilindros.setText("");
        Txtcristales.setText("");

        JtextMicroscopio.setText("");
        TXTfungicas.setText("");
        JtextObservaciones.setText("");
       
        }
        
public void AuditoriaAgregar(){
            
            
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Agrego al paciente "+ TXTPnombre.getText()+" "+TXTPapellido.getText() +" " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idusuario);
            ps.setInt(2, idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
      finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
     
    }   
       





 public void updateReporte()
    {

      
        ruta_archivo="C://Fundaginebra//Reportes//"+PdfNames+".pdf";
        int codigo =  idCallestudios;
        File ruta = new File(ruta_archivo);
       
        
       
        
        if ( ruta_archivo.trim().length() != 0) {
 
         update_pdf(codigo, ruta);
         ruta_archivo = "";

  
        } else {
            //JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
        }
    
    }
       
       

      
       public void update_pdf(int codigo, File ruta) {
           
        updateLaboratorio pa = new updateLaboratorio();
        updateLaboratorioDao po = new  updateLaboratorioDao();
        pa.setIdlabUpdate(codigo);
        
        try {
            byte[] pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
            pa.setArchivoUpdate(pdf);
        } catch (IOException ex) {
            pa.setArchivoUpdate(null);
            System.out.println("Error al agregar archivo pdf "+ex);
        }
        po.updateLaboratorio(pa);
    }




 public void mostrarUroanalisis() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_uroanalisis` WHERE id_historiaUR=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            JCcolor1.setSelectedItem((rs.getString("Color")));
            TxtOlor1.setText(rs.getString("Olor"));
            TxtDensidad.setText(rs.getString("Densidad"));
            JCaspecto.setSelectedItem((rs.getString("Aspecto")));
            JCph.setSelectedItem((rs.getString("PH")));
            JCglucosa1.setSelectedItem((rs.getString("Glucosa")));
            JCproteinas.setSelectedItem((rs.getString("Proteinas")));
            JChemoglobina.setSelectedItem((rs.getString("Hemoglobina")));
            JCnitridos.setSelectedItem((rs.getString("Nitritos")));
            JCcuerposCe.setSelectedItem((rs.getString("Cetonico")));
            JCurobilinogeno1.setSelectedItem((rs.getString("Urobilinogeno")));
            JCpigmentos.setSelectedItem((rs.getString("Pgmentos")));
            JCbilirrubina.setSelectedItem((rs.getString("Bilirrubina")));
            TxtLeucositos.setText(rs.getString("Leucocitos"));
            JCbacterias.setSelectedItem((rs.getString("Bacterias")));
            JCEP.setSelectedItem((rs.getString("CelulcasEP")));
            TxtHematies.setText(rs.getString("Hematies"));
            TxtCelulasredondas.setText(rs.getString("CelulasRedondas"));
            TxtFilamentos.setSelectedItem(rs.getString("Filamentos"));
            Txtcilindros.setText(rs.getString("cilindros"));
            Txtcristales.setText(rs.getString("cristales"));
            TXTfungicas.setText(rs.getString("Fungicas"));
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    }  finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}




 public void mostrarCopro() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_coproanalisis` WHERE id_historiaCO=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        System.out.println(idCallestudios);
        while (rs.next()) {
           JCcolor4.setSelectedItem((rs.getString("Color")));
           JCAspect.setSelectedItem((rs.getString("Aspecto")));
           JCconsistencia.setSelectedItem((rs.getString("Consistencia")));
           JCreaccion1.setSelectedItem((rs.getString("Reaccion")));
           JCmoco.setSelectedItem((rs.getString("Moco")));
           Jolor.setSelectedItem((rs.getString("Olor")));
           JCsangre1.setSelectedItem((rs.getString("Sangre")));
           JCrestos.setSelectedItem((rs.getString("Alimentos")));
           JtextMicroscopio.setText(rs.getString("Observacion"));
      
        }

    } catch (SQLException e) {
    
    }  finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}





   
   
   




   public void backtoConsulta(){
   
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       ConsultaLaboratorio jlab = new ConsultaLaboratorio();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(jlab);
       jlab.setClosable(true);
       jlab.setIconifiable(true);
       
        try {
            jlab.setMaximum(true);
        } catch (Exception e) {
        }
        jlab.toFront();
        jlab.setVisible(true);

   
   }
   










       public int idCallestudios=0;
       public String estadoEstudio="";
       private int labid;               
       private String labEstudio, labCedula, fechaEstudio;  
       
       
       
        public void setfechaEstudio(String fecha) {
        this.fechaEstudio = fecha;
    }        
       
       public String getfechaEstudio() {
        return fechaEstudio;
    }   
       
       public void setValorA(int labid2) {
        this.labid = labid2;
    }        
       
       public int getValorA() {
        return labid;
    } 

       
        public void setValorB(String labEstudio2) {
        this.labEstudio = labEstudio2;
    }        
         public String getValorB() {
        return labEstudio;
    }
         
         
        public void setValorC(String labCedula2) {
        this.labCedula = labCedula2;
    }        
         public String getValorC() {
        return labCedula;
    }

         
         
         
                int order=0;
          String Factura="";
   public void knowAboutplace(){
        
       
          SimpleDateFormat FormatoFecha = new SimpleDateFormat("yyyy/MM/dd");
          String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
          
          if(!estadoEstudio.equals("")){  
          
          String fechaEstudio1 = fechaEstudio; 
          String[] partesFecha = fechaEstudio1.split("/");
          String mesFormateado = String.format("%02d", Integer.parseInt(partesFecha[1]));
          Fecha = partesFecha[2] + "/" + mesFormateado + "/" + partesFecha[0];
           }
          
          
          
          Connection con=null;
          EnlaceBd cn = new EnlaceBd();
          PreparedStatement ps=null;
          ResultSet rs=null;
     
       
         String busqueda = this.TXTPcedula.getText();
         try{
         String sql="SELECT id_orden, lugar, cedula, nombre, apellido, fecha, Factura " +
                     "FROM orden_lab o " +
                     "INNER JOIN table_paciente n " +
                     "ON o.paciente = n.Idpaciente " +
                     "WHERE Cedula = ? AND fecha = ?";
      
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setString(1, busqueda );
        ps.setString(2, Fecha);
        rs=ps.executeQuery();
        if(rs.next()){
        order=rs.getInt("lugar");
        Factura=rs.getString("Factura");
    //  System.out.println(order);
         }
        
        else{
        Factura="";
        }


}catch(Exception e){

System.out.println("error en knowAboutPlace"+e);
}
         
 finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }}
         
         
    public void procesarPaciente() {
    // Primero valida la cédula
    String cedula = TXTPcedula.getText();
    if ("V-".equals(cedula) || cedula.isEmpty()) {
        JOptionPane.showMessageDialog(null, "CAMPO VACIO O CÉDULA INVALIDA", "CÉDULA", JOptionPane.ERROR_MESSAGE);
        TXTPcedula.setText("V-");
        return; // Detiene la ejecución si la cédula es inválida
    }
    
    // Luego, llama a knowAboutplace para buscar la factura
    knowAboutplace();
    
    if (Factura.equals("")) {
        // Si no se encuentra factura, pregunta si desea registrar
        if (JOptionPane.showConfirmDialog(rootPane, "ESTE PACIENTE NO TIENE UN NÚMERO DE ORDEN NI FACTURA ASIGNADO ¿DESEA AGREGARLO?",
            "PACIENTE", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {       
            goToRegister();
        }
    } else {
        // Si ya tiene factura, se puede proceder con la llamada a Callpacient()
        Callpacient();
    }
}


    
    
  DefaultTableModel modelo = new DefaultTableModel();
  
  Temporal MP = new Temporal();
  Mprincipal Menu = new Mprincipal();
  int idusuario=MP.getTexto();

  Encriptar encriptar = new Encriptar();
  JCPacientes pacientes  = new JCPacientes();
  JPacientesDao pacientesDao  = new JPacientesDao();     
  Tabla_PdfVO tpdf = new Tabla_PdfVO();   
  String ruta_archivo = "";
  String Usuario;
  Validar va = new Validar();
  
 labEstudiosBdDao labDao = new labEstudiosBdDao();
 Jlab_auditorias audit = new Jlab_auditorias();
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgregar;
    private javax.swing.JButton BtnCancelar;
    private javax.swing.JButton BtnSearch;
    private javax.swing.JLabel FechaAc6;
    private com.toedter.calendar.JDateChooser FechaNacimiento;
    private javax.swing.JTextField IdPacientess;
    private javax.swing.JComboBox<String> JCAspect;
    private javax.swing.JComboBox<String> JCEP;
    private javax.swing.JComboBox<String> JCaspecto;
    private javax.swing.JComboBox<String> JCbacterias;
    private javax.swing.JComboBox<String> JCbilirrubina;
    private javax.swing.JComboBox<String> JCcolor1;
    private javax.swing.JComboBox<String> JCcolor4;
    private javax.swing.JComboBox<String> JCconsistencia;
    private javax.swing.JComboBox<String> JCcuerposCe;
    private javax.swing.JComboBox<String> JCglucosa1;
    private javax.swing.JComboBox<String> JChemoglobina;
    private javax.swing.JComboBox<String> JCmoco;
    private javax.swing.JComboBox<String> JCnitridos;
    private javax.swing.JComboBox<String> JCph;
    private javax.swing.JComboBox<String> JCpigmentos;
    private javax.swing.JComboBox<String> JCproteinas;
    private javax.swing.JComboBox<String> JCreaccion1;
    private javax.swing.JComboBox<String> JCrestos;
    private javax.swing.JComboBox<String> JCsangre1;
    private javax.swing.JComboBox<String> JCurobilinogeno1;
    private javax.swing.JPanel JPregistro;
    private javax.swing.JRadioButton JRMasculino;
    public javax.swing.JCheckBox JRcoprocultivo;
    private javax.swing.JRadioButton JRfemenino;
    public javax.swing.JCheckBox JRuroanalisis;
    private javax.swing.JComboBox<String> Jolor;
    private javax.swing.JTextArea JtextMicroscopio;
    private javax.swing.JTextArea JtextObservaciones;
    private javax.swing.JTextField TXTPapellido;
    public javax.swing.JTextField TXTPcedula;
    private javax.swing.JTextField TXTPcorreo;
    private javax.swing.JTextArea TXTPdireccion;
    private javax.swing.JTextField TXTPnombre;
    private javax.swing.JFormattedTextField TXTPtelefono;
    private javax.swing.JTextField TXTfungicas;
    private javax.swing.JTextField TxtCelulasredondas;
    private javax.swing.JTextField TxtDensidad;
    private javax.swing.JComboBox<String> TxtFilamentos;
    private javax.swing.JTextField TxtHematies;
    private javax.swing.JTextField TxtLeucositos;
    private javax.swing.JTextField TxtOlor1;
    private javax.swing.JTextField Txtcilindros;
    private javax.swing.JTextField Txtcristales;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton34;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

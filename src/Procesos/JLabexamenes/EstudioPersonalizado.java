/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Procesos.JLabexamenes;

import Clases.Encriptar;
import Clases.EnlaceBd;
import Clases.JCPacientes;
import Clases.JPacientesDao;
import Clases.PdfDAO1;
import Clases.PdfVO;
import Clases.Temporal;
import Clases.Validar;
import Clases.sql;
import Menu.Mprincipal;
import Registros.JPacientes;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FCGinebraI
 */
public class EstudioPersonalizado extends javax.swing.JInternalFrame {

    /**
     * Creates new form JERutina
     */
    public EstudioPersonalizado() {
        initComponents();
         ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
        informacionpdf();
        MaxIdestudios();
        Estudio1.setVisible(false);
        Estudio2.setVisible(false);
        Estudio3.setVisible(false);
        BtnSearch.setEnabled(false);
        jButton21.setEnabled(false);
        TXTPcedula.setEnabled(false);
     this.JRMasculino.setSelected(true);
     JPregistro.setVisible(false);
     BtnAgregar.setVisible(false);
 
       cantidad=0;
       cantidad2=0;
       cantidad3=0;
       IdPacientess.setVisible(false);
       jButton20.setVisible(false);
       jButton34.setVisible(false);
       jButton21.setVisible(false);
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        BtnAgregar = new javax.swing.JButton();
        BtnCancelar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        JPregistro = new javax.swing.JPanel();
        TXTPnombre = new javax.swing.JTextField();
        TXTPcorreo = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        JRMasculino = new javax.swing.JRadioButton();
        JRfemenino = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TXTPdireccion = new javax.swing.JTextArea();
        FechaNacimiento = new com.toedter.calendar.JDateChooser();
        TXTPtelefono = new javax.swing.JFormattedTextField();
        TXTPapellido = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        TXTPcedula = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        FechaAc6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        BtnSearch = new javax.swing.JButton();
        IdPacientess = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jButton34 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        Estudio3 = new javax.swing.JPanel();
        TxtRef0 = new javax.swing.JTextField();
        TxtUnd0 = new javax.swing.JTextField();
        TXTNOMBRESTUDIO0 = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        JTperzonalizar1 = new javax.swing.JTable();
        TxtAnalisis0 = new javax.swing.JTextField();
        TxtResultado0 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        Estudio2 = new javax.swing.JPanel();
        TxtRef1 = new javax.swing.JTextField();
        TxtUnidad1 = new javax.swing.JTextField();
        TXTNOMBRESTUDIO1 = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        JTperzonalizar2 = new javax.swing.JTable();
        TxtAnalisis1 = new javax.swing.JTextField();
        TxtResultado1 = new javax.swing.JTextField();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        Estudio1 = new javax.swing.JPanel();
        TxtReferencia2 = new javax.swing.JTextField();
        TxtUnidad2 = new javax.swing.JTextField();
        TXTNOMBRESTDIO2 = new javax.swing.JTextField();
        jScrollPane10 = new javax.swing.JScrollPane();
        JTperzonalizar3 = new javax.swing.JTable();
        TxtAnalisis2 = new javax.swing.JTextField();
        TxtResultado2 = new javax.swing.JTextField();
        jButton16 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BtnAgregar.setText("Agregar");
        BtnAgregar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnAgregar.setContentAreaFilled(false);
        BtnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 120, 30));

        BtnCancelar.setText("NUEVO");
        BtnCancelar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnCancelar.setContentAreaFilled(false);
        BtnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 120, 30));

        jPanel9.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 560, 380, 60));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane1.setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JPregistro.setBackground(new java.awt.Color(255, 255, 255));
        JPregistro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTPnombre.setEditable(false);
        TXTPnombre.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre")));
        JPregistro.add(TXTPnombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 140, 50));

        TXTPcorreo.setEditable(false);
        TXTPcorreo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Correo"));
        JPregistro.add(TXTPcorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 140, 50));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Sexo"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JRMasculino.setBackground(new java.awt.Color(255, 255, 255));
        JRMasculino.setText("Masculino");
        JRMasculino.setEnabled(false);
        jPanel5.add(JRMasculino, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        JRfemenino.setBackground(new java.awt.Color(255, 255, 255));
        JRfemenino.setText("Femenino");
        JRfemenino.setEnabled(false);
        jPanel5.add(JRfemenino, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, -1, -1));

        JPregistro.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 330, 50));

        TXTPdireccion.setEditable(false);
        TXTPdireccion.setColumns(20);
        TXTPdireccion.setLineWrap(true);
        TXTPdireccion.setRows(5);
        TXTPdireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Dirección"));
        jScrollPane2.setViewportView(TXTPdireccion);

        JPregistro.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 330, 110));

        FechaNacimiento.setBackground(new java.awt.Color(255, 255, 255));
        FechaNacimiento.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha de Nacimiento"));
        FechaNacimiento.setToolTipText("");
        FechaNacimiento.setEnabled(false);
        FechaNacimiento.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        JPregistro.add(FechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 330, 50));

        TXTPtelefono.setEditable(false);
        TXTPtelefono.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Telefono"));
        try {
            TXTPtelefono.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        JPregistro.add(TXTPtelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 150, 50));

        TXTPapellido.setEditable(false);
        TXTPapellido.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Apellido"));
        JPregistro.add(TXTPapellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 150, 50));
        JPregistro.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 380, 20));

        jPanel1.add(JPregistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 380, 400));

        TXTPcedula.setText("V-");
        TXTPcedula.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cédula"));
        TXTPcedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyTyped(evt);
            }
        });
        jPanel1.add(TXTPcedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 260, 50));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 400, 20));

        FechaAc6.setBackground(new java.awt.Color(0, 0, 0));
        FechaAc6.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        FechaAc6.setText("                                   P A C I E N T E ");
        jPanel1.add(FechaAc6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 380, 20));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Cantidad de Estudios", "1", "2", "3" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 260, 30));

        BtnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/magnifier-1_icon-icons.com_56924.png"))); // NOI18N
        BtnSearch.setBorderPainted(false);
        BtnSearch.setContentAreaFilled(false);
        BtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(BtnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, 50, 50));

        IdPacientess.setText("ID");
        jPanel1.add(IdPacientess, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 30, 40));

        jTabbedPane1.addTab("tab1", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "PACIENTE", "CEDULA", "EDAD", "SEXO", "CORREO", "ESTUDIO"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 330, 450));

        jTabbedPane1.addTab("tab2", jPanel2);

        jPanel9.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 380, 580));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton34.setText("Generar");
        jButton34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton34.setContentAreaFilled(false);
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton34ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton34, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 550, 150, 30));

        jButton20.setText("Cancelar");
        jButton20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton20.setContentAreaFilled(false);
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton20, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 550, 150, 30));

        Estudio3.setBackground(new java.awt.Color(255, 255, 255));
        Estudio3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Estudio3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TxtRef0.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Referencia"));
        Estudio3.add(TxtRef0, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 90, 50));

        TxtUnd0.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Unidad"));
        Estudio3.add(TxtUnd0, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 90, 50));

        TXTNOMBRESTUDIO0.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Titulo del Estudio"));
        Estudio3.add(TXTNOMBRESTUDIO0, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 210, 40));

        JTperzonalizar1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Estudio", "Resultado", "Unidad", "Refencia"
            }
        ));
        jScrollPane7.setViewportView(JTperzonalizar1);

        Estudio3.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 380, 110));

        TxtAnalisis0.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Análisis realizado"));
        TxtAnalisis0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtAnalisis0ActionPerformed(evt);
            }
        });
        Estudio3.add(TxtAnalisis0, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 120, 50));

        TxtResultado0.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Resultado"));
        Estudio3.add(TxtResultado0, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 120, 50));

        jButton9.setText("Retirar");
        jButton9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton9.setContentAreaFilled(false);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        Estudio3.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 130, 80, 20));

        jButton10.setText("Agregar");
        jButton10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton10.setContentAreaFilled(false);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        Estudio3.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 130, 80, 20));

        jPanel6.add(Estudio3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 320, 620, 220));

        Estudio2.setBackground(new java.awt.Color(255, 255, 255));
        Estudio2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Estudio2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TxtRef1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Referencia"));
        Estudio2.add(TxtRef1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 90, 50));

        TxtUnidad1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Unidad"));
        Estudio2.add(TxtUnidad1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 90, 50));

        TXTNOMBRESTUDIO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Titulo del Estudio"));
        Estudio2.add(TXTNOMBRESTUDIO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 210, 40));

        JTperzonalizar2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Estudio", "Resultado", "Unidad", "Referencia"
            }
        ));
        jScrollPane9.setViewportView(JTperzonalizar2);

        Estudio2.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 380, 110));

        TxtAnalisis1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Análisis realizado"));
        TxtAnalisis1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtAnalisis1ActionPerformed(evt);
            }
        });
        Estudio2.add(TxtAnalisis1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 120, 50));

        TxtResultado1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Resultado"));
        Estudio2.add(TxtResultado1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 120, 50));

        jButton13.setText("Retirar");
        jButton13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton13.setContentAreaFilled(false);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        Estudio2.add(jButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 130, 80, 20));

        jButton14.setText("Agregar");
        jButton14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton14.setContentAreaFilled(false);
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        Estudio2.add(jButton14, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 130, 80, 20));

        jPanel6.add(Estudio2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 620, 160));

        Estudio1.setBackground(new java.awt.Color(255, 255, 255));
        Estudio1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Estudio1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TxtReferencia2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Referencia"));
        Estudio1.add(TxtReferencia2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 90, 50));

        TxtUnidad2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Unidad"));
        Estudio1.add(TxtUnidad2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 90, 50));

        TXTNOMBRESTDIO2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Titulo del Estudio"));
        Estudio1.add(TXTNOMBRESTDIO2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 210, 40));

        JTperzonalizar3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Estudio", "Resultado", "Unidad", "Referencia"
            }
        ));
        jScrollPane10.setViewportView(JTperzonalizar3);

        Estudio1.add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 380, 110));

        TxtAnalisis2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Análisis realizado"));
        TxtAnalisis2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtAnalisis2ActionPerformed(evt);
            }
        });
        Estudio1.add(TxtAnalisis2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 120, 50));

        TxtResultado2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Resultado"));
        TxtResultado2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtResultado2ActionPerformed(evt);
            }
        });
        Estudio1.add(TxtResultado2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 120, 50));

        jButton16.setText("Agregar");
        jButton16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton16.setContentAreaFilled(false);
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        Estudio1.add(jButton16, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 130, 80, 20));

        jButton15.setText("Retirar");
        jButton15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton15.setContentAreaFilled(false);
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        Estudio1.add(jButton15, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 130, 80, 20));

        jPanel6.add(Estudio1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 620, 160));

        jButton21.setText("Previsualizar");
        jButton21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton21.setContentAreaFilled(false);
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton21, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 550, 150, 30));

        jPanel9.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 20, 620, 600));

        getContentPane().add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1050, 630));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton34ActionPerformed

        
        
   
        
        
        
        
        
        

      
              if (TXTPapellido.getText().equals("") 
                   
           
                   
                   || TXTPnombre.getText().equals("")
                   || TXTPcedula.getText().equals("") 
                   || TXTPcorreo.getText().equals("") 
                   || TXTPtelefono.getText().equals("") 
                   || TXTPdireccion.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "ASIGNE UN PACIENTE, Y VERIFIQUE QUE TODOS LOS CAMPOS SE ENCUENTRAN COMPLETADOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);

        }
        else{   
                  
                  
                          
             if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea generar este informe?",
            "Generar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
                  
                  
                  JOptionPane.showMessageDialog(null, "GENERANDO REPORTE...","ESTUDIO",1);   MaxIdestudios();  pdf();  guardarReporte(); 
                  limpiarCampos();
                  DesactivarCampos();
                  JPregistro.setVisible(false);

                  BtnAgregar.setEnabled(true);
                  BtnSearch.setEnabled(true);
                  TXTPcedula.setEnabled(true);
                  BtnAgregar.setEnabled(false);
                  jComboBox1.setSelectedItem("Seleccionar Cantidad de Estudios");
                  CancelarTodo();}
        }
              
              
          
             
             
             
             
                

        
         
        

        
        
        
    }//GEN-LAST:event_jButton34ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
  


       if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea cancelar los resultado?",
            "Cancelar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
       CancelarTodo(); }
                
                else{}
                
    }//GEN-LAST:event_jButton20ActionPerformed

    private void TxtAnalisis0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtAnalisis0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtAnalisis0ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        if(jComboBox1.getSelectedIndex()!=-1){

    
            Combobox();
        
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

              if (TXTPapellido.getText().equals("") || TXTPnombre.getText().equals("") || FechaNacimiento.getDate()==null
            || TXTPcedula.getText().equals("") || TXTPcorreo.getText().equals("") || TXTPtelefono.getText().equals("")
            || TXTPdireccion.getText().equals("")
            || TXTNOMBRESTUDIO0.getText().equals("")  
            || TxtAnalisis0.getText().equals("")       
            || TxtResultado0.getText().equals("")         
                   ) {

            JOptionPane.showMessageDialog(null, "TITULO, ANALISIS Y RESULTADO SON OBLIGATORIOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE); }    
        else {
        int row = JTperzonalizar1.getRowCount();
    Object[] content = new Object[row];
    for (int i = 0; i < row; i++) {
        content[i] = JTperzonalizar1.getValueAt(i, 1);
    }
    Object value_to_find= TxtAnalisis0.getText();
    boolean exist = Arrays.asList(content).contains(value_to_find);
    if (exist){
        JOptionPane.showMessageDialog(null, "EXAMEN DUPLICADO", "EXAMEN", JOptionPane.ERROR_MESSAGE);
    } else {
          

     
      cantidad=cantidad+1;
       addexamen0();
       limpiarFila3();
 jButton21.setEnabled(true);
      }    } 
      
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
      
 int fila = JTperzonalizar1.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe Seleccionar una Fila", "Fila",1);
        } else {
   

        try {
            int FilaRemover;
            DefaultTableModel Mode = (DefaultTableModel) JTperzonalizar1.getModel();
            FilaRemover = this.JTperzonalizar1.getSelectedRow();
            Mode.removeRow(FilaRemover);
cantidad=cantidad-1;
        } catch (Exception e){ System.out.println("" + e);
        }  }
         
    }//GEN-LAST:event_jButton9ActionPerformed

    private void TxtAnalisis1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtAnalisis1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtAnalisis1ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
int fila = JTperzonalizar2.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe Seleccionar una Fila", "Fila",1);
        } else {
   

        try {
            int FilaRemover;
            DefaultTableModel Mode = (DefaultTableModel) JTperzonalizar2.getModel();
            FilaRemover = this.JTperzonalizar2.getSelectedRow();
            Mode.removeRow(FilaRemover);
cantidad2=cantidad2-1;
        } catch (Exception e){ System.out.println("" + e);
        }  }
         
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed

               if (TXTPapellido.getText().equals("") || TXTPnombre.getText().equals("") || FechaNacimiento.getDate()==null
            || TXTPcedula.getText().equals("") || TXTPcorreo.getText().equals("") || TXTPtelefono.getText().equals("")
            || TXTPdireccion.getText().equals("")
            || TXTNOMBRESTUDIO1.getText().equals("")  
            || TxtAnalisis1.getText().equals("")       
            || TxtResultado1.getText().equals("")         
                   ) {

            JOptionPane.showMessageDialog(null, "TITULO, ANALISIS Y RESULTADO SON OBLIGATORIOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE); } 
               
       else {        
        
    int row = JTperzonalizar2.getRowCount();
    Object[] content = new Object[row];
    for (int i = 0; i < row; i++) {
        content[i] = JTperzonalizar2.getValueAt(i, 1);
    }
    Object value_to_find= TxtAnalisis1.getText();
    boolean exist = Arrays.asList(content).contains(value_to_find);
    if (exist){
        JOptionPane.showMessageDialog(null, "EXAMEN DUPLICADO", "EXAMEN", JOptionPane.ERROR_MESSAGE);
    } else {
          

     
      cantidad2=cantidad2+1;
       addexamen2();
       limpiarFila2();
 jButton21.setEnabled(true);
      }}  
               
               
    }//GEN-LAST:event_jButton14ActionPerformed

    private void TxtAnalisis2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtAnalisis2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtAnalisis2ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
     int fila = JTperzonalizar3.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe Seleccionar una Fila", "Fila",1);
        } else {
   

        try {
            int FilaRemover;
            DefaultTableModel Mode = (DefaultTableModel) JTperzonalizar3.getModel();
            FilaRemover = this.JTperzonalizar3.getSelectedRow();
            Mode.removeRow(FilaRemover);
cantidad3=cantidad3-1;
        } catch (Exception e){ System.out.println("" + e);
        }  }
         
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed

           if (TXTPapellido.getText().equals("") || TXTPnombre.getText().equals("") || FechaNacimiento.getDate()==null
            || TXTPcedula.getText().equals("") || TXTPcorreo.getText().equals("") || TXTPtelefono.getText().equals("")
            || TXTPdireccion.getText().equals("")
            || TxtAnalisis2.getText().equals("")  
            || TxtResultado2.getText().equals("")       
            || TXTNOMBRESTDIO2.getText().equals("")         
                   ) {

           JOptionPane.showMessageDialog(null, "TITULO, ANALISIS Y RESULTADO SON OBLIGATORIOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE); } 
           
           
else{
        
        int row = JTperzonalizar3.getRowCount();
    Object[] content = new Object[row];
    for (int i = 0; i < row; i++) {
        content[i] = JTperzonalizar3.getValueAt(i, 1);
    }
    Object value_to_find= TxtAnalisis2.getText();
    boolean exist = Arrays.asList(content).contains(value_to_find);
    if (exist){
        JOptionPane.showMessageDialog(null, "EXAMEN DUPLICADO", "EXAMEN", JOptionPane.ERROR_MESSAGE);
    } else {
          

     
      cantidad3=cantidad3+1;
       addexamen();
      jButton21.setEnabled(true);
       limpiarFila1();
       
       
 
      }    
           }    
    }//GEN-LAST:event_jButton16ActionPerformed

    
    public void  limpiarFila1(){
    
    //  TXTNOMBRESTDIO2.setText("");
       TxtAnalisis2.setText("");
       TxtUnidad2.setText("");
       TxtResultado2.setText("");
       TxtReferencia2.setText("");
    }
    
    
    public void  limpiarFila2(){
    
     // TXTNOMBRESTDIO2.setText("");
       TxtAnalisis2.setText("");
       TxtUnidad2.setText("");
       TxtResultado2.setText("");
       TxtReferencia2.setText("");
       
       
      // TXTNOMBRESTUDIO1.setText("");
       TxtAnalisis1.setText("");
       TxtUnidad1.setText("");
       TxtResultado1.setText("");
       TxtRef1.setText("");
    }
    
    
    
     public void  limpiarFila3(){
    
     // TXTNOMBRESTDIO2.setText("");
       TxtAnalisis2.setText("");
       TxtUnidad2.setText("");
       TxtResultado2.setText("");
       TxtReferencia2.setText("");
       
       
     //  TXTNOMBRESTUDIO1.setText("");
       TxtAnalisis1.setText("");
       TxtUnidad1.setText("");
       TxtResultado1.setText("");
       TxtRef1.setText("");
       
       
       
     //  TXTNOMBRESTUDIO0.setText("");
       TxtAnalisis0.setText("");
       TxtUnd0.setText("");
       TxtResultado0.setText("");
       TxtRef0.setText("");
    }
    
    
    private void TxtResultado2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtResultado2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtResultado2ActionPerformed

    private void BtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSearchActionPerformed
    procesarPaciente();
    }//GEN-LAST:event_BtnSearchActionPerformed

    private void BtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarActionPerformed

        Connection con;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps;
        ResultSet rs;

        Pattern pattern = Pattern.compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
        String Correo = TXTPcorreo.getText();
        Matcher mather = pattern.matcher(Correo);

        if (TXTPapellido.getText().equals("") || TXTPnombre.getText().equals("") || FechaNacimiento.getDate()==null
            || TXTPcedula.getText().equals("") || TXTPcorreo.getText().equals("") || TXTPtelefono.getText().equals("") || TXTPdireccion.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "TODOS LOS CAMPOS SON OBLIGATORIOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);

        } else if (mather.find() == false) {
            JOptionPane.showMessageDialog(null, "EMAIL INVALIDO, VERIFIQUE", "EMAIL INVALIDO", JOptionPane.ERROR_MESSAGE);
            this.TXTPcorreo.requestFocus();
        }

        else {

            String sql="SELECT Idpaciente, Nombre, Apellido, Cedula, Telefono, Direccion FROM table_paciente  WHERE Cedula='"+ TXTPcedula.getText() +"'";

            try{
                con = cn.getConnection();
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();
                if(rs.next()){JOptionPane.showMessageDialog(null, "EL PACIENTE YA SE ENCUENTRA", "DATO DUPLICADO",JOptionPane.ERROR_MESSAGE);}

                else{
                    AuditoriaAgregar();
                    AgregarPaciente();
                    Callpacient();
                    BtnAgregar.setEnabled(false);
                    //      TxtMotivo.setEnabled(true);

                }

            }catch(Exception e){System.out.println(e);}
        }
    }//GEN-LAST:event_BtnAgregarActionPerformed

    private void BtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelarActionPerformed
        limpiarCampos();
        DesactivarCampos();
        JPregistro.setVisible(false);
        TXTPcedula.setText("V-");
        BtnAgregar.setEnabled(true);
        BtnSearch.setEnabled(true);
        TXTPcedula.setEnabled(true);
        BtnAgregar.setEnabled(false);

    }//GEN-LAST:event_BtnCancelarActionPerformed

    private void TXTPcedulaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyTyped
   char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='V' || car=='E'  || car=='-'|| car=='J'|| car =='H' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTPcedula.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='V' && car!='E' && car!='-' && car != 'J' && car!='H' || car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTPcedulaKeyTyped

    private void TXTPcedulaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyPressed
           if(evt.getKeyCode()==KeyEvent.VK_ENTER){
         procesarPaciente();

} 
    }//GEN-LAST:event_TXTPcedulaKeyPressed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed

              if (TXTPapellido.getText().equals("") 
                   
           
                   
                   || TXTPnombre.getText().equals("")
                   || TXTPcedula.getText().equals("") 
                   || TXTPcorreo.getText().equals("") 
                   || TXTPtelefono.getText().equals("") 
                   || TXTPdireccion.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "ASIGNE UN PACIENTE, Y VERIFIQUE QUE TODOS LOS CAMPOS SE ENCUENTRAN COMPLETADOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);

        }
        else{   
                  
                  
                          
           
                  
                  
      
                       JOptionPane.showMessageDialog(null, "PREVISUALIZAR NO ALMACENA EL REPORTE SOLO GENERA UNA VISTA PREVIA, GENERANDO VISTA PREVIA...","ESTUDIO", JOptionPane.WARNING_MESSAGE);    pdfPreview();   }
          
              
    }//GEN-LAST:event_jButton21ActionPerformed

  
    
    
 
        public void pdfPreview() {
      try {
       
          
          
          
                   
        /*-------------------------------------------------------------------------------------*/
            
            String fechaN = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts1= fechaN.split("/");
            String an1 = dateParts1[0];
            String mes1 = dateParts1[1];
            String dia1 = dateParts1[2];
            
            
            String an_actual = Validar.fecha_actual();
            String mes_actual = Validar.fecha_mes();
            String dia_actual = Validar.fecha_dia();

            
        
            
            int diferenciadia=Integer.parseInt(dia_actual)- Integer.parseInt(dia1);
            int diferenciames=Integer.parseInt(mes_actual)- Integer.parseInt(mes1);
            int diferencian=Integer.parseInt(an_actual)- Integer.parseInt(an1);;
        
     
            
   if (diferenciames < 0 || (diferenciames == 0 && diferenciadia < 0)) {
        diferencian = diferencian - 1;
    }
 
   
          
          
          
          
         DateTimeFormatter fth = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).ofPattern("dd-MM-yyyy--HH-mm");
         LocalDateTime fechaactual = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
          

         
             PdfNames=TXTPcedula.getText()+"_"+Maxid;
    
        
          
          
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            Paragraph saltolinea = new Paragraph();
          

            FileOutputStream archivo;
            //String rut = System.getProperty("user.home");
            File file = new File("C://Fundaginebra//Reportes//"+PdfNames+".pdf");
            archivo = new FileOutputStream(file);
            Document doc = new Document();
            PdfWriter writer=  PdfWriter.getInstance(doc, archivo);
            doc.open();
       
            com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\src\\imagenes\\Fundacionlogo1.png");
            header.setAlignment(Chunk.ALIGN_CENTER);

            Paragraph fecha = new Paragraph();
            Font negrita = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
            fecha.add(Chunk.NEWLINE);
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
            String Hora = Menu.Time.getText()+" "+Menu.jLabel102.getText();
            //fecha.add( "  Fecha: " + Fecha + "\n" +"  Hora: "+ Hora ) ;

            
            
            PdfPTable Encabezado = new PdfPTable(1);
            Encabezado.setWidthPercentage(25);
            Encabezado.getDefaultCell().setBorder(0);
            float[] ColumnaEncabezado = new float[]{50f};
            Encabezado.setWidths(ColumnaEncabezado);
            Encabezado.setHorizontalAlignment(Element.ALIGN_LEFT);
            Encabezado.addCell(header);
            doc.add(Encabezado);
          
            
            
            
            

            PdfContentByte CB = writer.getDirectContent();  
            BaseFont BF2 = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
  
             CB.beginText();
            CB.setFontAndSize(BF2, 12);
            CB.setTextMatrix(200, 800);
            CB.showText(empresa);
            CB.setFontAndSize(BF, 10);
            CB.setTextMatrix(260, 790);
            CB.showText(rif);
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 780);
            CB.showText("FECHA: "+ Fecha);
            
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("HORA: "+ Hora);
            
            if(!Factura.equals("")){
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(460, 760);
            CB.showText("FACTURA: #"+ Factura);
            }
            
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(235, 740);
            CB.showText(ubicacion);
          
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(210, 730);
            CB.showText(telefonos); 
            CB.setTextMatrix(168, 725);
            CB.showText("__________________________________________________________________");
          
            CB.endText();
            
      
       //BODY 
       
       
       
            PdfPTable Tabla = new PdfPTable(3); 
            Tabla.setWidthPercentage(100);  
            float[] medidaCeldas = {1f, 3f, 1f };
            Tabla.setWidths(medidaCeldas);
            Tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            if(order>0){
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid+" | "+ order);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1);
            }
            else{
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1); 
            }

     
                
            Paragraph tcolumna2 = new Paragraph("PREVIEW");
            tcolumna2.getFont().setStyle(Font.BOLD);
            tcolumna2.getFont().setSize(12);        
            tcolumna2.setFont(Letra);
            tcolumna2.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna2);

            Paragraph tcolumna3 = new Paragraph("N° DE PACIENTE: " +IdPaciente+" ");
            tcolumna3.getFont().setStyle(Font.BOLD);
            tcolumna3.getFont().setSize(8);        
            tcolumna3.setFont(Letra);
            tcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna3);
        

              
              
             
            String Paciente=TXTPnombre.getText()+ " "+ TXTPapellido.getText();  
            
            PdfPTable Tabla0 = new PdfPTable(4); 
            // Tabla0.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla0.setWidthPercentage(100);  
            float[] medidaCeldas0 = {3f, 2f, 1f,2f};
            Tabla0.setWidths(medidaCeldas0);
            Tabla0.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla0.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t0columna1 = new Paragraph("PACIENTE: "+ Paciente);
            t0columna1.getFont().setStyle(Font.BOLD);
            t0columna1.getFont().setSize(8);        
            t0columna1.setFont(Letra);
            t0columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna1);
     
                
            Paragraph t0columna2 = new Paragraph("CÉDULA: "+TXTPcedula.getText());
            t0columna2.getFont().setStyle(Font.BOLD);
            t0columna2.getFont().setSize(8);        
            t0columna2.setFont(Letra);
            t0columna2.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna2);

            Paragraph t0columna3 = new Paragraph("EDAD:" +Integer.toString(diferencian) + " años");
            t0columna3.getFont().setStyle(Font.BOLD);
            t0columna3.getFont().setSize(8);        
            t0columna3.setFont(Letra);
            t0columna3.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna3);
        
            Paragraph t0columna4 = new Paragraph("SEXO: "+ Sexo);
            t0columna4.getFont().setStyle(Font.BOLD);
            t0columna4.getFont().setSize(8);        
            t0columna4.setFont(Letra);
            t0columna4.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna4);
            
            
            
            
            
            
                 
            PdfPTable TablaTitulo1 = new PdfPTable(1); 
            TablaTitulo1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            TablaTitulo1.setWidthPercentage(100);  
            float[] medidaCeldas1 = {5f};
            TablaTitulo1.setWidths(medidaCeldas1);
            TablaTitulo1.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaTitulo1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t1columna1 = new Paragraph("----- "+ TXTNOMBRESTDIO2.getText() +" ----- ",FontFactory.getFont("Arial",11,Font.BOLD));
            t1columna1.getFont().setStyle(Font.BOLD);
            t1columna1.getFont().setSize(10);        
            t1columna1.setFont(Letra);
            t1columna1.setAlignment(Element.ALIGN_CENTER);
            TablaTitulo1.addCell(t1columna1);
       

                                        
            PdfPTable TablaTitulo2 = new PdfPTable(1); 
            TablaTitulo2.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            TablaTitulo2.setWidthPercentage(100);  
            TablaTitulo2.setWidths(medidaCeldas1);
            TablaTitulo2.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaTitulo2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph titulo2 = new Paragraph("----- "+ TXTNOMBRESTUDIO1.getText() +" ----- ",FontFactory.getFont("Arial",11,Font.BOLD));
            titulo2.getFont().setStyle(Font.BOLD);
            titulo2.getFont().setSize(10);        
            titulo2.setFont(Letra);
            titulo2.setAlignment(Element.ALIGN_CENTER);
            TablaTitulo2.addCell(titulo2);
          

            
            PdfPTable TablaTitulo3 = new PdfPTable(1); 
            TablaTitulo3.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            TablaTitulo3.setWidthPercentage(100);  
            TablaTitulo3.setWidths(medidaCeldas1);
            TablaTitulo3.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaTitulo3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph titulo3 = new Paragraph("----- "+ TXTNOMBRESTUDIO0.getText() +" ----- ",FontFactory.getFont("Arial",11,Font.BOLD));
            titulo3.getFont().setStyle(Font.BOLD);
            titulo3.getFont().setSize(10);        
            titulo3.setFont(Letra);
            titulo3.setAlignment(Element.ALIGN_CENTER);
            TablaTitulo3.addCell(titulo3);
            
            
            
            
            
   
            
            PdfPTable Tabla2 = new PdfPTable(4); 
            Tabla2.setWidthPercentage(100);  
            Tabla2.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            float[] medidaCeldas2 = {4f, 2f, 2f,4f};
            Tabla2.setWidths(medidaCeldas2);
            Tabla2.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t2columna1 = new Paragraph("ANALISIS REALIZADO");
            t2columna1.getFont().setStyle(Font.BOLD);
            t2columna1.getFont().setSize(9);        
            t2columna1.setFont(Letra);
            t2columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna1);
     
                
            Paragraph t2columna2 = new Paragraph("RESULTADOS");
            t2columna2.getFont().setStyle(Font.BOLD);
            t2columna2.getFont().setSize(9);        
            t2columna2.setFont(Letra);
            t2columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna2);

            Paragraph t2columna3 = new Paragraph("UNIDAD");
            t2columna3.getFont().setStyle(Font.BOLD);
            t2columna3.getFont().setSize(10);        
            t2columna3.setFont(Letra);
            t2columna3.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna3);

            Paragraph t2columna4 = new Paragraph("REFERENCIA");
            t2columna4.getFont().setStyle(Font.BOLD);
            t2columna4.getFont().setSize(9);        
            t2columna4.setFont(Letra);
            t2columna4.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna4);
            
            
           
            
            
            
            PdfPTable tablapro = new PdfPTable(4);
            tablapro.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            tablapro.setWidthPercentage(100);
            tablapro.getDefaultCell().setBorder(0);
            tablapro.setWidths(medidaCeldas2);
            tablapro.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell pro1 = new PdfPCell(new Phrase(""));
            PdfPCell pro2 = new PdfPCell(new Phrase(""));
            PdfPCell pro3 = new PdfPCell(new Phrase(""));
            PdfPCell pro4 = new PdfPCell(new Phrase(""));
            pro1.setBorder(0);
            pro2.setBorder(0);
            pro3.setBorder(0);
            pro4.setBorder(0);
            
            tablapro.addCell(pro1);
            tablapro.addCell(pro2);
            tablapro.addCell(pro3);
            tablapro.addCell(pro4);

            for (int i = 0; i < JTperzonalizar3.getRowCount(); i++) {
               
               
                
                String analisis = JTperzonalizar3.getValueAt(i, 1).toString();
                String resultados = JTperzonalizar3.getValueAt(i, 2).toString(); 
                String unidad = JTperzonalizar3.getValueAt(i, 3).toString()   ;
                String referencia = JTperzonalizar3.getValueAt(i, 4).toString()     ;
                   
                
                tablapro.addCell(new Paragraph(analisis,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(resultados,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(unidad,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(referencia,FontFactory.getFont("Arial",8,Font.NORMAL))); 
           
            }
         
            
            
            
            
            
            ///SEGUNDA TABLA
            
            
            
     
            PdfPTable tablapro1 = new PdfPTable(4);
            tablapro1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            tablapro1.setWidthPercentage(100);
            tablapro1.getDefaultCell().setBorder(0);
            tablapro1.setWidths(medidaCeldas2);
            tablapro1.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell pro5 = new PdfPCell(new Phrase(""));
            PdfPCell pro6 = new PdfPCell(new Phrase(""));
            PdfPCell pro7 = new PdfPCell(new Phrase(""));
            PdfPCell pro8 = new PdfPCell(new Phrase(""));
            pro5.setBorder(0);
            pro6.setBorder(0);
            pro7.setBorder(0);
            pro8.setBorder(0);
     
  
      
            tablapro1.addCell(pro5);
            tablapro1.addCell(pro6);
            tablapro1.addCell(pro7);
            tablapro1.addCell(pro8);

            for (int i = 0; i < JTperzonalizar2.getRowCount(); i++) {
               
               
                
                String analisis = JTperzonalizar2.getValueAt(i, 1).toString();
                String resultados = JTperzonalizar2.getValueAt(i, 2).toString(); 
                String unidad = JTperzonalizar2.getValueAt(i, 3).toString()   ;
                String referencia = JTperzonalizar2.getValueAt(i, 4).toString()     ;
             
                tablapro1.addCell(new Paragraph(analisis,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro1.addCell(new Paragraph(resultados,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro1.addCell(new Paragraph(unidad,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro1.addCell(new Paragraph(referencia,FontFactory.getFont("Arial",8,Font.NORMAL))); 
            }
            
            
            
            
            
            
    
            PdfPTable tablapro2 = new PdfPTable(4);
            tablapro2.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            tablapro2.setWidthPercentage(100);
            tablapro2.getDefaultCell().setBorder(0);
            tablapro2.setWidths(medidaCeldas2);
            tablapro2.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell pro9 = new PdfPCell(new Phrase(""));
            PdfPCell pro10 = new PdfPCell(new Phrase(""));
            PdfPCell pro11 = new PdfPCell(new Phrase(""));
            PdfPCell pro12 = new PdfPCell(new Phrase(""));
            pro9.setBorder(0);
            pro10.setBorder(0);
            pro11.setBorder(0);
            pro12.setBorder(0);
     
  
      
            tablapro2.addCell(pro9);
            tablapro2.addCell(pro10);
            tablapro2.addCell(pro11);
            tablapro2.addCell(pro12);

            for (int i = 0; i < JTperzonalizar1.getRowCount(); i++) {
               
               
                
                String analisis = JTperzonalizar1.getValueAt(i, 1).toString();
                String resultados = JTperzonalizar1.getValueAt(i, 2).toString(); 
                String unidad = JTperzonalizar1.getValueAt(i, 3).toString()   ;
                String referencia = JTperzonalizar1.getValueAt(i, 4).toString()     ;
             
                tablapro2.addCell(new Paragraph(analisis,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro2.addCell(new Paragraph(resultados,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro2.addCell(new Paragraph(unidad,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro2.addCell(new Paragraph(referencia,FontFactory.getFont("Arial",8,Font.NORMAL))); 
            }
            
 



           
           
           
           
           
           
           
           
            PdfPTable Tablafirma = new PdfPTable(3); 
            Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tablafirma.setWidthPercentage(100);  
            float[] medidaCeldasP = {3f, 1f, 3f};
            Tablafirma.setWidths(medidaCeldasP);
            Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph tPcolumna1 = new Paragraph("\n\n\n\n "+ piepagina);
            tPcolumna1.getFont().setStyle(Font.BOLD);
            tPcolumna1.getFont().setSize(8);        
            tPcolumna1.setFont(Letra);
            tPcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna1);

                
            com.itextpdf.text.Image FirmaLcdo = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\dist\\imagen.bin");
            FirmaLcdo.setAlignment(Chunk.ALIGN_CENTER);
            Tablafirma.addCell(FirmaLcdo);

            Paragraph tPcolumna3 = new Paragraph("\n\n\n\n" + writer.getPageNumber()+ " Pág");
            tPcolumna3.getFont().setStyle(Font.BOLD);
            tPcolumna3.getFont().setSize(8);        
            tPcolumna3.setFont(Letra);
            tPcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna3);
           
           
           
                   
           knowaboutlcdo(); 
           PdfPTable TablafirmaLcdo = new PdfPTable(1); 
           TablafirmaLcdo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           TablafirmaLcdo.setWidthPercentage(100);  
           float[] medidaCeldasFirma = {20f};
           TablafirmaLcdo.setWidths(medidaCeldasFirma);
           TablafirmaLcdo.setHorizontalAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
           Paragraph tPcolumnaFirma1 = new Paragraph("________________ \n "+NameOfLcdo);
           tPcolumnaFirma1.getFont().setStyle(Font.BOLD);
           tPcolumnaFirma1.getFont().setSize(8);        
           tPcolumnaFirma1.setFont(Letra);
           tPcolumnaFirma1.setAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.addCell(tPcolumnaFirma1);

           
        
           
            saltolinea.add("\n");
            doc.add(saltolinea); 
            doc.add(Tabla);
            
            doc.add(Tabla0);
            doc.add(saltolinea);
           
            
        if(jComboBox1.getSelectedItem().equals("1")){
            doc.add(TablaTitulo1);
            doc.add(Tabla2);
            doc.add(saltolinea); 
   
          
         
            doc.add(tablapro);
            
            
      
              }
          
        
        else   if(jComboBox1.getSelectedItem().equals("2")){
       
          
            doc.add(TablaTitulo1); 
            doc.add(Tabla2);
 
            doc.add(saltolinea);
            doc.add(tablapro);
            
           
            doc.add(saltolinea);
            doc.add(TablaTitulo2); 
            doc.add(Tabla2);
       
            doc.add(saltolinea); 
            doc.add(tablapro1);
            
     
            
              }
            
            
            
            else   if(jComboBox1.getSelectedItem().equals("3")){
  
            doc.add(TablaTitulo1); 
            doc.add(Tabla2);
         
           
            doc.add(saltolinea);
            doc.add(tablapro);
            
            
            
            
            doc.add(saltolinea);
            doc.add(TablaTitulo2); 
            doc.add(Tabla2);
           
            doc.add(saltolinea); 
            doc.add(tablapro1);
            
            
            doc.add(saltolinea);
            doc.add(TablaTitulo3); 
            doc.add(Tabla2);
         
            doc.add(saltolinea); 
        
            doc.add(tablapro2);
 
            
       

            
              }

            
         
            doc.close();
            archivo.close();
            Desktop.getDesktop().open(file);
        } catch (DocumentException | IOException e) {
           System.out.println(e);
           JOptionPane.showMessageDialog(null, "NO SE CONSIGUE LA CARPETA FUNDAGINEBRA EN DISCO C", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
      
    
    
    
    
    
     
     public void pdf() {
      try {
       
          
          
          
                   
        /*-------------------------------------------------------------------------------------*/
            
            String fechaN = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts1= fechaN.split("/");
            String an1 = dateParts1[0];
            String mes1 = dateParts1[1];
            String dia1 = dateParts1[2];
            
            
            String an_actual = Validar.fecha_actual();
            String mes_actual = Validar.fecha_mes();
            String dia_actual = Validar.fecha_dia();

            
        
            
            int diferenciadia=Integer.parseInt(dia_actual)- Integer.parseInt(dia1);
            int diferenciames=Integer.parseInt(mes_actual)- Integer.parseInt(mes1);
            int diferencian=Integer.parseInt(an_actual)- Integer.parseInt(an1);;
        
     
            
   if (diferenciames < 0 || (diferenciames == 0 && diferenciadia < 0)) {
        diferencian = diferencian - 1;
    }
 
   
          
          
          
          
         DateTimeFormatter fth = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).ofPattern("dd-MM-yyyy--HH-mm");
         LocalDateTime fechaactual = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
          

         
             PdfNames=TXTPcedula.getText()+"_"+Maxid;
    
        
          
          
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            Paragraph saltolinea = new Paragraph();
          

            FileOutputStream archivo;
            //String rut = System.getProperty("user.home");
            File file = new File("C://Fundaginebra//Reportes//"+PdfNames+".pdf");
            archivo = new FileOutputStream(file);
            Document doc = new Document();
            PdfWriter writer=  PdfWriter.getInstance(doc, archivo);
            doc.open();
       
            com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\src\\imagenes\\Fundacionlogo1.png");
            header.setAlignment(Chunk.ALIGN_CENTER);

            Paragraph fecha = new Paragraph();
            Font negrita = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
            fecha.add(Chunk.NEWLINE);
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
            String Hora = Menu.Time.getText()+" "+Menu.jLabel102.getText();
            //fecha.add( "  Fecha: " + Fecha + "\n" +"  Hora: "+ Hora ) ;

            
            
            PdfPTable Encabezado = new PdfPTable(1);
            Encabezado.setWidthPercentage(25);
            Encabezado.getDefaultCell().setBorder(0);
            float[] ColumnaEncabezado = new float[]{50f};
            Encabezado.setWidths(ColumnaEncabezado);
            Encabezado.setHorizontalAlignment(Element.ALIGN_LEFT);
            Encabezado.addCell(header);
            doc.add(Encabezado);
          
            
            
            
            

            PdfContentByte CB = writer.getDirectContent();  
            BaseFont BF2 = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
  
             CB.beginText();
            CB.setFontAndSize(BF2, 12);
            CB.setTextMatrix(200, 800);
            CB.showText(empresa);
            CB.setFontAndSize(BF, 10);
            CB.setTextMatrix(260, 790);
            CB.showText(rif);
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 780);
            CB.showText("FECHA: "+ Fecha);
            
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("HORA: "+ Hora);
            
            if(!Factura.equals("")){
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(460, 760);
            CB.showText("FACTURA: #"+ Factura);
            }
            
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(235, 740);
            CB.showText(ubicacion);
          
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(210, 730);
            CB.showText(telefonos); 
            CB.setTextMatrix(168, 725);
            CB.showText("__________________________________________________________________");
          
            CB.endText();
            
      
       //BODY 
       
       
       
            PdfPTable Tabla = new PdfPTable(3); 
            Tabla.setWidthPercentage(100);  
            float[] medidaCeldas = {1f, 3f, 1f };
            Tabla.setWidths(medidaCeldas);
            Tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            if(order>0){
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid+" | "+ order);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1);
            }
            else{
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1); 
            }

     
                
            Paragraph tcolumna2 = new Paragraph("RESULTADOS DEL ANÁLISIS");
            tcolumna2.getFont().setStyle(Font.BOLD);
            tcolumna2.getFont().setSize(12);        
            tcolumna2.setFont(Letra);
            tcolumna2.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna2);

            Paragraph tcolumna3 = new Paragraph("N° DE PACIENTE: " +IdPaciente+" ");
            tcolumna3.getFont().setStyle(Font.BOLD);
            tcolumna3.getFont().setSize(8);        
            tcolumna3.setFont(Letra);
            tcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna3);
        

              
              
             
            String Paciente=TXTPnombre.getText()+ " "+ TXTPapellido.getText();  
            
            PdfPTable Tabla0 = new PdfPTable(4); 
            // Tabla0.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla0.setWidthPercentage(100);  
            float[] medidaCeldas0 = {3f, 2f, 1f,2f};
            Tabla0.setWidths(medidaCeldas0);
            Tabla0.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla0.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t0columna1 = new Paragraph("PACIENTE: "+ Paciente);
            t0columna1.getFont().setStyle(Font.BOLD);
            t0columna1.getFont().setSize(8);        
            t0columna1.setFont(Letra);
            t0columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna1);
     
                
            Paragraph t0columna2 = new Paragraph("CÉDULA: "+TXTPcedula.getText());
            t0columna2.getFont().setStyle(Font.BOLD);
            t0columna2.getFont().setSize(8);        
            t0columna2.setFont(Letra);
            t0columna2.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna2);

            Paragraph t0columna3 = new Paragraph("EDAD:" +Integer.toString(diferencian) + " años");
            t0columna3.getFont().setStyle(Font.BOLD);
            t0columna3.getFont().setSize(8);        
            t0columna3.setFont(Letra);
            t0columna3.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna3);
        
            Paragraph t0columna4 = new Paragraph("SEXO: "+ Sexo);
            t0columna4.getFont().setStyle(Font.BOLD);
            t0columna4.getFont().setSize(8);        
            t0columna4.setFont(Letra);
            t0columna4.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna4);
            
            
            
            
            
            
                 
            PdfPTable TablaTitulo1 = new PdfPTable(1); 
            TablaTitulo1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            TablaTitulo1.setWidthPercentage(100);  
            float[] medidaCeldas1 = {5f};
            TablaTitulo1.setWidths(medidaCeldas1);
            TablaTitulo1.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaTitulo1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t1columna1 = new Paragraph("----- "+ TXTNOMBRESTDIO2.getText() +" ----- ",FontFactory.getFont("Arial",11,Font.BOLD));
            t1columna1.getFont().setStyle(Font.BOLD);
            t1columna1.getFont().setSize(10);        
            t1columna1.setFont(Letra);
            t1columna1.setAlignment(Element.ALIGN_CENTER);
            TablaTitulo1.addCell(t1columna1);
       

                                        
            PdfPTable TablaTitulo2 = new PdfPTable(1); 
            TablaTitulo2.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            TablaTitulo2.setWidthPercentage(100);  
            TablaTitulo2.setWidths(medidaCeldas1);
            TablaTitulo2.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaTitulo2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph titulo2 = new Paragraph("----- "+ TXTNOMBRESTUDIO1.getText() +" ----- ",FontFactory.getFont("Arial",11,Font.BOLD));
            titulo2.getFont().setStyle(Font.BOLD);
            titulo2.getFont().setSize(10);        
            titulo2.setFont(Letra);
            titulo2.setAlignment(Element.ALIGN_CENTER);
            TablaTitulo2.addCell(titulo2);
          

            
            PdfPTable TablaTitulo3 = new PdfPTable(1); 
            TablaTitulo3.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            TablaTitulo3.setWidthPercentage(100);  
            TablaTitulo3.setWidths(medidaCeldas1);
            TablaTitulo3.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaTitulo3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph titulo3 = new Paragraph("----- "+ TXTNOMBRESTUDIO0.getText() +" ----- ",FontFactory.getFont("Arial",11,Font.BOLD));
            titulo3.getFont().setStyle(Font.BOLD);
            titulo3.getFont().setSize(10);        
            titulo3.setFont(Letra);
            titulo3.setAlignment(Element.ALIGN_CENTER);
            TablaTitulo3.addCell(titulo3);
            
            
            
            
            
   
            
            PdfPTable Tabla2 = new PdfPTable(4); 
            Tabla2.setWidthPercentage(100);  
            Tabla2.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            float[] medidaCeldas2 = {4f, 2f, 2f,4f};
            Tabla2.setWidths(medidaCeldas2);
            Tabla2.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t2columna1 = new Paragraph("ANALISIS REALIZADO");
            t2columna1.getFont().setStyle(Font.BOLD);
            t2columna1.getFont().setSize(9);        
            t2columna1.setFont(Letra);
            t2columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna1);
     
                
            Paragraph t2columna2 = new Paragraph("RESULTADOS");
            t2columna2.getFont().setStyle(Font.BOLD);
            t2columna2.getFont().setSize(9);        
            t2columna2.setFont(Letra);
            t2columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna2);

            Paragraph t2columna3 = new Paragraph("UNIDAD");
            t2columna3.getFont().setStyle(Font.BOLD);
            t2columna3.getFont().setSize(10);        
            t2columna3.setFont(Letra);
            t2columna3.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna3);

            Paragraph t2columna4 = new Paragraph("REFERENCIA");
            t2columna4.getFont().setStyle(Font.BOLD);
            t2columna4.getFont().setSize(9);        
            t2columna4.setFont(Letra);
            t2columna4.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna4);
            
            
           
            
            
            
            PdfPTable tablapro = new PdfPTable(4);
            tablapro.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            tablapro.setWidthPercentage(100);
            tablapro.getDefaultCell().setBorder(0);
            tablapro.setWidths(medidaCeldas2);
            tablapro.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell pro1 = new PdfPCell(new Phrase(""));
            PdfPCell pro2 = new PdfPCell(new Phrase(""));
            PdfPCell pro3 = new PdfPCell(new Phrase(""));
            PdfPCell pro4 = new PdfPCell(new Phrase(""));
            pro1.setBorder(0);
            pro2.setBorder(0);
            pro3.setBorder(0);
            pro4.setBorder(0);
            
            tablapro.addCell(pro1);
            tablapro.addCell(pro2);
            tablapro.addCell(pro3);
            tablapro.addCell(pro4);

            for (int i = 0; i < JTperzonalizar3.getRowCount(); i++) {
               
               
                
                String analisis = JTperzonalizar3.getValueAt(i, 1).toString();
                String resultados = JTperzonalizar3.getValueAt(i, 2).toString(); 
                String unidad = JTperzonalizar3.getValueAt(i, 3).toString()   ;
                String referencia = JTperzonalizar3.getValueAt(i, 4).toString()     ;
                   
                
                tablapro.addCell(new Paragraph(analisis,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(resultados,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(unidad,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(referencia,FontFactory.getFont("Arial",8,Font.NORMAL))); 
           
            }
         
            
            
            
            
            
            ///SEGUNDA TABLA
            
            
            
     
            PdfPTable tablapro1 = new PdfPTable(4);
            tablapro1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            tablapro1.setWidthPercentage(100);
            tablapro1.getDefaultCell().setBorder(0);
            tablapro1.setWidths(medidaCeldas2);
            tablapro1.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell pro5 = new PdfPCell(new Phrase(""));
            PdfPCell pro6 = new PdfPCell(new Phrase(""));
            PdfPCell pro7 = new PdfPCell(new Phrase(""));
            PdfPCell pro8 = new PdfPCell(new Phrase(""));
            pro5.setBorder(0);
            pro6.setBorder(0);
            pro7.setBorder(0);
            pro8.setBorder(0);
     
  
      
            tablapro1.addCell(pro5);
            tablapro1.addCell(pro6);
            tablapro1.addCell(pro7);
            tablapro1.addCell(pro8);

            for (int i = 0; i < JTperzonalizar2.getRowCount(); i++) {
               
               
                
                String analisis = JTperzonalizar2.getValueAt(i, 1).toString();
                String resultados = JTperzonalizar2.getValueAt(i, 2).toString(); 
                String unidad = JTperzonalizar2.getValueAt(i, 3).toString()   ;
                String referencia = JTperzonalizar2.getValueAt(i, 4).toString()     ;
             
                tablapro1.addCell(new Paragraph(analisis,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro1.addCell(new Paragraph(resultados,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro1.addCell(new Paragraph(unidad,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro1.addCell(new Paragraph(referencia,FontFactory.getFont("Arial",8,Font.NORMAL))); 
            }
            
            
            
            
            
            
    
            PdfPTable tablapro2 = new PdfPTable(4);
            tablapro2.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            tablapro2.setWidthPercentage(100);
            tablapro2.getDefaultCell().setBorder(0);
            tablapro2.setWidths(medidaCeldas2);
            tablapro2.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            PdfPCell pro9 = new PdfPCell(new Phrase(""));
            PdfPCell pro10 = new PdfPCell(new Phrase(""));
            PdfPCell pro11 = new PdfPCell(new Phrase(""));
            PdfPCell pro12 = new PdfPCell(new Phrase(""));
            pro9.setBorder(0);
            pro10.setBorder(0);
            pro11.setBorder(0);
            pro12.setBorder(0);
     
  
      
            tablapro2.addCell(pro9);
            tablapro2.addCell(pro10);
            tablapro2.addCell(pro11);
            tablapro2.addCell(pro12);

            for (int i = 0; i < JTperzonalizar1.getRowCount(); i++) {
               
               
                
                String analisis = JTperzonalizar1.getValueAt(i, 1).toString();
                String resultados = JTperzonalizar1.getValueAt(i, 2).toString(); 
                String unidad = JTperzonalizar1.getValueAt(i, 3).toString()   ;
                String referencia = JTperzonalizar1.getValueAt(i, 4).toString()     ;
             
                tablapro2.addCell(new Paragraph(analisis,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro2.addCell(new Paragraph(resultados,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro2.addCell(new Paragraph(unidad,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro2.addCell(new Paragraph(referencia,FontFactory.getFont("Arial",8,Font.NORMAL))); 
            }
            
 



           
           
           
           
           
           
           
           
            PdfPTable Tablafirma = new PdfPTable(3); 
            Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tablafirma.setWidthPercentage(100);  
            float[] medidaCeldasP = {3f, 1f, 3f};
            Tablafirma.setWidths(medidaCeldasP);
            Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph tPcolumna1 = new Paragraph("\n\n\n\n "+ piepagina);
            tPcolumna1.getFont().setStyle(Font.BOLD);
            tPcolumna1.getFont().setSize(8);        
            tPcolumna1.setFont(Letra);
            tPcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna1);

                
            com.itextpdf.text.Image FirmaLcdo = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\dist\\imagen.bin");
            FirmaLcdo.setAlignment(Chunk.ALIGN_CENTER);
            Tablafirma.addCell(FirmaLcdo);

            Paragraph tPcolumna3 = new Paragraph("\n\n\n\n" + writer.getPageNumber()+ " Pág");
            tPcolumna3.getFont().setStyle(Font.BOLD);
            tPcolumna3.getFont().setSize(8);        
            tPcolumna3.setFont(Letra);
            tPcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna3);
           
           
           
                   
           knowaboutlcdo(); 
           PdfPTable TablafirmaLcdo = new PdfPTable(1); 
           TablafirmaLcdo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           TablafirmaLcdo.setWidthPercentage(100);  
           float[] medidaCeldasFirma = {20f};
           TablafirmaLcdo.setWidths(medidaCeldasFirma);
           TablafirmaLcdo.setHorizontalAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
           Paragraph tPcolumnaFirma1 = new Paragraph("________________ \n "+NameOfLcdo);
           tPcolumnaFirma1.getFont().setStyle(Font.BOLD);
           tPcolumnaFirma1.getFont().setSize(8);        
           tPcolumnaFirma1.setFont(Letra);
           tPcolumnaFirma1.setAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.addCell(tPcolumnaFirma1);

           
        
           
            saltolinea.add("\n");
            doc.add(saltolinea); 
            doc.add(Tabla);
            
            doc.add(Tabla0);
            doc.add(saltolinea);
           
            
        if(jComboBox1.getSelectedItem().equals("1")){
            doc.add(TablaTitulo1);
            doc.add(Tabla2);
            doc.add(saltolinea); 
   
          
         
            doc.add(tablapro);
            
            
            doc.add(saltolinea);
            doc.add(saltolinea);
            doc.add(Tablafirma);
            doc.add(TablafirmaLcdo);
            
              }
          
        
        else   if(jComboBox1.getSelectedItem().equals("2")){
       
          
            doc.add(TablaTitulo1); 
            doc.add(Tabla2);
 
            doc.add(saltolinea);
            doc.add(tablapro);
            
           
            doc.add(saltolinea);
            doc.add(TablaTitulo2); 
            doc.add(Tabla2);
       
            doc.add(saltolinea); 
            doc.add(tablapro1);
            
            doc.add(saltolinea);
            doc.add(saltolinea);
            doc.add(Tablafirma);
            doc.add(TablafirmaLcdo);
            
              }
            
            
            
            else   if(jComboBox1.getSelectedItem().equals("3")){
  
            doc.add(TablaTitulo1); 
            doc.add(Tabla2);
         
           
            doc.add(saltolinea);
            doc.add(tablapro);
            
            
            
            
            doc.add(saltolinea);
            doc.add(TablaTitulo2); 
            doc.add(Tabla2);
           
            doc.add(saltolinea); 
            doc.add(tablapro1);
            
            
            doc.add(saltolinea);
            doc.add(TablaTitulo3); 
            doc.add(Tabla2);
         
            doc.add(saltolinea); 
        
            doc.add(tablapro2);
            doc.add(saltolinea);
            doc.add(saltolinea);
            doc.add(Tablafirma);
            doc.add(TablafirmaLcdo);
            
       

            
              }

            
         
            doc.close();
            archivo.close();
            //Desktop.getDesktop().open(file);
        } catch (DocumentException | IOException e) {
           System.out.println(e);
           JOptionPane.showMessageDialog(null, "NO SE CONSIGUE LA CARPETA FUNDAGINEBRA EN DISCO C", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
      
    
    String NameOfLcdo, Consultanlcdo;
     
     public void knowaboutlcdo(){
     
    Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null; 
         
         
         try{
         
       String query="Select FirmaLcdo from tableinfo where idinfo=? ";
       
       con = EnlaceBd.getConnection();
       ps = con.prepareStatement(query);
       ps.setInt(1, 1);
       rs=ps.executeQuery();
         
        if(rs.next()){
       Consultanlcdo= rs.getString("FirmaLcdo");
      
       if(!Consultanlcdo.equals("")){NameOfLcdo="Lcdo/a "+ Consultanlcdo;}
       else{NameOfLcdo="";}
       
       
         }
       
       
       
       
         }catch(Exception e){ System.out.println(e);}
          finally {
            closeResources(rs, ps, con);
        }
     }
    
    
    
    
       private void addFooter(PdfWriter writer) throws IOException{

       try {


            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
     

            PdfPTable Tablafirma = new PdfPTable(3); 
            Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tablafirma.setWidthPercentage(100);  
            float[] medidaCeldasP = {3f, 3f, 3f };
            Tablafirma.setWidths(medidaCeldasP);
            Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        
            Paragraph tPcolumna1 = new Paragraph("www.fundaginebra.org");
            tPcolumna1.getFont().setStyle(Font.BOLD);
            tPcolumna1.getFont().setSize(8);        
            tPcolumna1.setFont(Letra);
            tPcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna1);

                
            Paragraph tPcolumna2 = new Paragraph("____________________ \n Firma");
            tPcolumna2.getFont().setStyle(Font.BOLD);
            tPcolumna2.getFont().setSize(8);        
            tPcolumna2.setFont(Letra);
            tPcolumna2.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna2);

            Paragraph tPcolumna3 = new Paragraph( " " + writer.getPageNumber()+ " Pág");
            tPcolumna3.getFont().setStyle(Font.BOLD);
            tPcolumna3.getFont().setSize(8);        
            tPcolumna3.setFont(Letra);
            tPcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna3); 
             

     
        Tablafirma.setTotalWidth(527);
        Tablafirma.setLockedWidth(false);
        Tablafirma.getDefaultCell().setFixedHeight(40);
        Tablafirma.getDefaultCell().setBorder(Rectangle.TOP);
        Tablafirma.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);
        
        
        
        // write page
        PdfContentByte canvas = writer.getDirectContent();
        canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
        Tablafirma.writeSelectedRows(0, -1, 34, 50, canvas);
        canvas.endMarkedContentSequence();
    } catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    }
}
    
    
    String Sexo;
    int IdPaciente;

          
     
         
 public void Callpacient() {  
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    String Cedula = TXTPcedula.getText().trim();  // Usar trim para eliminar espacios extra.

    // Validación temprana de la cédula antes de hacer la consulta
    if (Cedula.isEmpty() || Cedula.equals("V-")) {
        JOptionPane.showMessageDialog(null, "EL CAMPO CÉDULA NO PUEDE ESTAR VACIO Y DEBE LLEVAR V-", "CAMPO VACIO", JOptionPane.WARNING_MESSAGE);
        return; // Salir si la cédula es inválida
    }
    
    try {
        // Primera consulta para obtener IdPaciente
        String query = "SELECT Idpaciente FROM table_paciente WHERE Cedula = ?";
        con = cn.getConnection();
        ps = con.prepareStatement(query);
        ps.setString(1, Cedula);
        rs = ps.executeQuery();
        
        if (rs.next()) { // Si se encuentra el paciente
            IdPaciente = rs.getInt("Idpaciente");
            IdPacientess.setText(Integer.toString(IdPaciente));

            // Segunda consulta para obtener los detalles del paciente
            String sql2 = "SELECT Nombre, Apellido, Cedula, Telefono, Correo, Direccion, Sexo, date_format(FechNacimiento, '%d/%m/%Y') AS Fecha FROM table_paciente WHERE Idpaciente = ?";
            ps = con.prepareStatement(sql2);
            ps.setInt(1, IdPaciente);
            rs = ps.executeQuery();

            if (rs.next()) { // Si se obtienen los detalles del paciente
                String nombre = rs.getString("Nombre");
                String apellido = rs.getString("Apellido");
                String telefono = rs.getString("Telefono");
                String correo = rs.getString("Correo");
                String direccion = rs.getString("Direccion");
                Sexo = rs.getString("Sexo");
                String nacimiento = rs.getString("Fecha");

                // Asignar valores a los campos
                TXTPnombre.setText(nombre);
                TXTPapellido.setText(apellido);
                TXTPcorreo.setText(correo);
                TXTPtelefono.setText(telefono);
                TXTPdireccion.setText(direccion);
                
                // Selección de sexo
                if (Sexo.equals("Femenino")) {
                    JRfemenino.setSelected(true);
                    JRMasculino.setSelected(false);
                } else if (Sexo.equals("Masculino")) {
                    JRMasculino.setSelected(true);
                    JRfemenino.setSelected(false);
                }
                
                // Convertir fecha de nacimiento
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                FechaNacimiento.setDate(formato.parse(nacimiento));

                JPregistro.setVisible(true);  // Mostrar panel de registro
                TXTPcedula.setEnabled(false); // Desactivar el campo de cédula
            }
        } else {  // Si no se encuentra el paciente
            int option = JOptionPane.showConfirmDialog(rootPane, "El paciente no se encuentra registrado. ¿Desea registrarlo?", 
                                                        "Registro Paciente", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                goToRegister();  // Ir al formulario de registro
            } else {
                BtnAgregar.setVisible(false);  // Ocultar el botón de agregar
                TXTPcedula.setEnabled(true);   // Rehabilitar campo de cédula
                BtnSearch.setEnabled(true);    // Habilitar búsqueda
            }
        }
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}
     
     
         public void goToRegister(){
   
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       JPacientes pac = new JPacientes();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(pac);
       pac.setClosable(true);
       pac.setIconifiable(true);
       
        try {
            pac.setMaximum(true);
        } catch (Exception e) {
        }
        pac.toFront();
        pac.setVisible(true);

   }
     
     
     
       
       int cantidad=0,cantidad2=0, cantidad3=0;    
       
       
       
          public void addexamen0() {
     
       String Nombreexamen;
       String Unidad;
       String Resultadoexamen;
       String Referencia;
//controlT.AsignarPaciente(JTableLaboratorio, (String) JComboEstudio.getSelectedItem(), 0, modelo);
           
        modelo = (DefaultTableModel) JTperzonalizar1.getModel();
        Nombreexamen = TxtAnalisis0.getText();
        Unidad =  TxtUnd0.getText();
        Resultadoexamen=   TxtResultado0.getText();
        Referencia=   TxtRef0.getText();
                                      
            ArrayList lista = new ArrayList();
     
            lista.add(cantidad);
            lista.add(Nombreexamen);
            lista.add(Resultadoexamen);
            lista.add(Unidad);
            lista.add(Referencia);
           
            Object[] ob = new Object[8];
            ob[0] = lista.get(0);
            ob[1] = lista.get(1);
            ob[2] = lista.get(2);
            ob[3] = lista.get(3);
            ob[4] = lista.get(4);

                                       
            modelo.addRow(ob);
            JTperzonalizar1.setModel(modelo);
            JTperzonalizar1.setDefaultEditor(Object.class, null);
    }
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       public void addexamen() {
     
       String Nombreexamen;
       String Unidad;
       String Resultadoexamen;
       String Referencia;
//controlT.AsignarPaciente(JTableLaboratorio, (String) JComboEstudio.getSelectedItem(), 0, modelo);
           
        modelo = (DefaultTableModel) JTperzonalizar3.getModel();
        Nombreexamen = TxtAnalisis2.getText();
        Unidad =  TxtUnidad2.getText();
        Resultadoexamen=   TxtResultado2.getText();
        Referencia=   TxtReferencia2.getText();
                                      
            ArrayList lista = new ArrayList();
     
            lista.add(cantidad3);
            lista.add(Nombreexamen);
            lista.add(Resultadoexamen);
            lista.add(Unidad);
            lista.add(Referencia);
           
            Object[] ob = new Object[8];
            ob[0] = lista.get(0);
            ob[1] = lista.get(1);
            ob[2] = lista.get(2);
            ob[3] = lista.get(3);
            ob[4] = lista.get(4);

                                       
            modelo.addRow(ob);
            JTperzonalizar3.setModel(modelo);
            JTperzonalizar3.setDefaultEditor(Object.class, null);
    }
       
     
       
       
       
         public void addexamen2() {
           
       
       String Nombreexamen;
       String Unidad;
       String Resultadoexamen;
       String Referencia;
//controlT.AsignarPaciente(JTableLaboratorio, (String) JComboEstudio.getSelectedItem(), 0, modelo);
           
        modelo = (DefaultTableModel) JTperzonalizar2.getModel();
        Nombreexamen = TxtAnalisis1.getText();
        Unidad =  TxtUnidad1.getText();
        Resultadoexamen=   TxtResultado1.getText();
        Referencia=   TxtRef1.getText();
                                      
            ArrayList lista = new ArrayList();
     
            lista.add(cantidad2);
            lista.add(Nombreexamen);
            lista.add(Resultadoexamen);
            lista.add(Unidad);
            lista.add(Referencia);
           
            Object[] ob = new Object[8];
            ob[0] = lista.get(0);
            ob[1] = lista.get(1);
            ob[2] = lista.get(2);
            ob[3] = lista.get(3);
            ob[4] = lista.get(4);

                                       
            modelo.addRow(ob);
            JTperzonalizar2.setModel(modelo);
            JTperzonalizar2.setDefaultEditor(Object.class, null);
    }
       
       
       
       
       
       
       
       
       
       
       
       
     public void AgregarPaciente(){                                             
    
    Connection con;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps;
    ResultSet rs;
    

          try {

              
                    
        java.sql.Date fechaU;
        Date dateU = FechaNacimiento.getDate();
        long dU = dateU.getTime();
        fechaU = new java.sql.Date(dU);
        
        
        
            String fecha = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts= fecha.split("/");
            String an = dateParts[0];
            String mes = dateParts[1];
            String dia = dateParts[2];
            String an_actual = Validar.fecha_actual();

            int edad;
            edad= Integer.parseInt(an_actual)-Integer.parseInt(an);
        
        
        
        
              
              
            String sql = "INSERT INTO table_paciente (Nombre, Apellido, Cedula,Telefono,Correo,Direccion, Sexo, FechNacimiento, edad) VALUES (?,?,?,?,?,?,?,?,?)";
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
      
            ps.setString(1, TXTPnombre.getText());
            ps.setString(2, TXTPapellido.getText());
            ps.setString(3, TXTPcedula.getText());
            ps.setString(4, TXTPtelefono.getText());
            ps.setString(5, TXTPcorreo.getText());
            ps.setString(6, TXTPdireccion.getText());
            ps.setString(7, Sexo);
            ps.setDate(8, fechaU);
            ps.setInt(9, edad);
            ps.execute();
  
            
            
  JOptionPane.showMessageDialog(null, "EL PACIENTE HA SIDO REGISTRADO","REGISTRO DE PACIENTES", 1);
        } catch (Exception e) {
      
            JOptionPane.showMessageDialog(null, e);
        }


      
          
          
    } 
     
     
     
          public void ActivarCampos() {
   
                 TXTPnombre.setEditable(true);
                 TXTPapellido.setEditable(true);
                 TXTPcorreo.setEditable(true);
                 TXTPtelefono.setEditable(true);
                 TXTPdireccion.setEditable(true);
                 JRMasculino.setEnabled(true);
                 JRfemenino.setEnabled(true);
                 FechaNacimiento.setEnabled(true);
                 BtnAgregar.setEnabled(true);
                 BtnAgregar.setVisible(true);
                
                 
       
           
    }
    
                
    public void limpiarCamposNoregistro() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true); 
      FechaNacimiento.setCalendar(null);
    }  
    
       
                   public void DesactivarCampos() {
   
                 TXTPnombre.setEditable(false);
                 TXTPapellido.setEditable(false);
                 TXTPcorreo.setEditable(false);
                 TXTPtelefono.setEditable(false);
                 TXTPdireccion.setEditable(false);
                 JRMasculino.setEnabled(false);
                 JRfemenino.setEnabled(false);
                 FechaNacimiento.setEnabled(false);
                 BtnAgregar.setEnabled(false);
               
       
           
    }
     
     
     
     
     
     
       public void Combobox() {
   
         
           if(jComboBox1.getSelectedItem().equals("Seleccionar Cantidad de Estudios") )
           {
    
           
           DesactivarCampos();
           TXTPcedula.setEnabled(false);
           JPregistro.setVisible(false);
           BtnSearch.setEnabled(false);
           Estudio1.setVisible(false);
           Estudio2.setVisible(false);
           Estudio3.setVisible(false);
           jButton20.setVisible(false);
           jButton34.setVisible(false);
           jButton21.setVisible(false);
           
           }
     
           else if(jComboBox1.getSelectedItem().equals("1") )
           { 
               
              jButton20.setVisible(true);
              jButton34.setVisible(true);
              jButton21.setVisible(true); 
               
               Estudio1.setVisible(true);
               Estudio2.setVisible(false);
               Estudio3.setVisible(false);
        
               
               
               
        //   JtabedAsJTableLaboratorioAddIndex(1);

           TXTPcedula.setEditable(true);
           BtnSearch.setEnabled(true);
           TXTPcedula.setEnabled(true);
         //  limpiarTabla();
  
           }
           
           
                      else if(jComboBox1.getSelectedItem().equals("2") )
           { 
               
               
       
              jButton20.setVisible(true);
              jButton34.setVisible(true);
              jButton21.setVisible(true); 
               
               Estudio1.setVisible(true);
               Estudio2.setVisible(true);
               Estudio3.setVisible(false);
        //   JtabedAsJTableLaboratorioAddIndex(1);

           TXTPcedula.setEditable(true);
           BtnSearch.setEnabled(true);
           TXTPcedula.setEnabled(true);
           //limpiarTabla();
  
           }
           
           
           
           
             else if(jComboBox1.getSelectedItem().equals("3") )
           { 
               
               
       
              jButton20.setVisible(true);
              jButton34.setVisible(true);
              jButton21.setVisible(true); 
               
               Estudio1.setVisible(true);
               Estudio2.setVisible(true);
               Estudio3.setVisible(true);
               
        //   JtabedAsJTableLaboratorioAddIndex(1);

           TXTPcedula.setEditable(true);
           BtnSearch.setEnabled(true);
           TXTPcedula.setEnabled(true);
          // limpiarTabla();
  
           }
           
           
    }

  
       
       
       
           public void CancelarTodo() {
       cantidad=0;
       cantidad2=0;
       cantidad3=0;
       

       TxtAnalisis2.setText("");
       TxtUnidad2.setText("");
       TxtResultado2.setText("");
       TxtReferencia2.setText("");

 
       TxtAnalisis1.setText("");
       TxtUnidad1.setText("");
       TxtResultado1.setText("");
       TxtRef1.setText("");
         
    
       TxtAnalisis0.setText("");
       TxtUnd0.setText("");
       TxtResultado0.setText("");
       TxtRef0.setText("");
       TXTPcedula.setText("V-");   
       TXTPcedula.setEnabled(true);  
       jComboBox1.setEnabled(true);
      
       
       
       
       
       limpiarTablaAsignar();
         limpiarFila3();
   
    }
         
           
           
             
               
        void limpiarTablaAsignar() {
        DefaultTableModel tb0 = (DefaultTableModel) JTperzonalizar3.getModel();
        int a = JTperzonalizar3.getRowCount()-1;
        for (int i = a; i >= 0; i--) {
            tb0.removeRow(tb0.getRowCount()-1);

        }
        
        
        
        
        
            DefaultTableModel tb1 = (DefaultTableModel) JTperzonalizar2.getModel();
        int b = JTperzonalizar2.getRowCount()-1;
        for (int i = b; i >= 0; i--) {
            tb1.removeRow(tb1.getRowCount()-1);

        }
        
        
                
            DefaultTableModel tb2 = (DefaultTableModel) JTperzonalizar1.getModel();
        int c = JTperzonalizar1.getRowCount()-1;
        for (int i = c; i >= 0; i--) {
            tb2.removeRow(tb2.getRowCount()-1);

        }
        
        
    }  
           
           
           
           
           public void CancelarRegistro() {
      cantidad=0;
      cantidad2=0;
      cantidad3=0; 
      limpiarCampos();
      BtnAgregar.setVisible(false);
   
    }
    
       
       
       
       
       
       
       
       
    public void limpiarCampos() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcedula.setText("V-");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true);  
      FechaNacimiento.setCalendar(null);
    }
    
    
        
        void limpiarTabla() {
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i);
            i = i - 1;
        }
    }
        
        
    public void guardar_pdf(int codigo, int idexamen, int idpaciente, int idusuario, String Fecha, File ruta) {
        
        
   
        
        PdfDAO1 pa = new PdfDAO1();
        PdfVO po = new PdfVO();
        po.setCodigopdf(codigo);
        po.setIdexamen(idexamen);
        po.setIdpaciente(idpaciente);
        po.setIdusuario(idusuario);
        po.setFecha(Fecha);
        
        try {
            byte[] pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
            po.setArchivopdf(pdf);
        } catch (IOException ex) {
            po.setArchivopdf(null);
            System.out.println("Error al agregar archivo pdf "+ex.getMessage());
        }
        pa.Agregar_PdfVO(po);
    }

    String PdfNames;
    
    public void guardarReporte()
    {

      
        ruta_archivo="C://Fundaginebra//Reportes//"+PdfNames+".pdf";
        int idexamen = 1038;
        int idpaciente= Integer.parseInt(IdPacientess.getText());
      
        String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
        sql s = new sql();
        
        int codigo = s.auto_increment("SELECT MAX(codigopdf) FROM table_laboratorio;");
        File ruta = new File(ruta_archivo);
       
        
        
        
        if ( ruta_archivo.trim().length() != 0) {
            guardar_pdf(codigo, idexamen, idpaciente, idusuario, Fecha, ruta);
 
         //   tpdf.visualizar_PdfVO(tabla);
            ruta_archivo = "";
           // activa_boton(false, false, false);
  
        } else {
            JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
        }
    
    }
      
    int Maxid;
    public void MaxIdestudios() {
   Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs=null;
    
   
       try {

            String sql = "SELECT MAX(codigopdf) from table_laboratorio ";
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
            Maxid= rs.getInt("MAX(codigopdf)")+1;
        
            }
            
          
            

        } catch (Exception e) { JOptionPane.showMessageDialog(null, e);}
     
      finally {
            closeResources(rs, ps, con);
        }
     
     }
             
             
             
             
          public void AuditoriaAgregar(){
            
            
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Agrego al paciente "+ TXTPnombre.getText()+" "+TXTPapellido.getText() +" " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idusuario);
            ps.setInt(2, idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
      finally {
            closeResources(rs, ps, con);
        }
    }
        
             
             
             
      
 String  empresa, rif, ubicacion, telefonos, piepagina;
    public void informacionpdf() {

   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
   
        try {

            String sql = "select * from tableinfopdfs";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                empresa = rs.getString("nombrempresa");
                rif = rs.getString("rif");
                ubicacion = rs.getString("ubicacion");
                telefonos = rs.getString("telefonos");
                piepagina = rs.getString("infopiepagina");
               
            }

        } catch (Exception e) {System.out.println(e);
        }
        finally {
            closeResources(rs, ps, con);
        }
    }
    
          
          
          
         

          int order=0;
          String Factura="";
          public void knowAboutplace(){
                   
              
              
        if(TXTPcedula.getText().equals("V-") || TXTPcedula.getText().equals("") ){
        JOptionPane.showMessageDialog(null, "CAMPO VACIO O CÉDULA INVALIDA", "CÉDULA", JOptionPane.ERROR_MESSAGE);
        TXTPcedula.setText("V-");
        }   
                else{   
              
          SimpleDateFormat FormatoFecha = new SimpleDateFormat("yyyy/MM/dd");
          String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
            
          Connection con=null;
          EnlaceBd cn = new EnlaceBd();
          PreparedStatement ps=null;
          ResultSet rs=null;
     
       
         String busqueda = this.TXTPcedula.getText();

         try{
         String sql = "SELECT id_orden, lugar, n.cedula, n.nombre, n.apellido, fecha, Factura \n" +
"                 FROM orden_lab o \n" +
"                 INNER JOIN table_paciente n ON o.paciente = n.Idpaciente \n" +
"                 WHERE n.cedula = ? AND fecha = ?";
      
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setString(1, busqueda );
        ps.setString(2, Fecha);
        rs=ps.executeQuery();
        if(rs.next()){
        order=rs.getInt("lugar");
        Factura=rs.getString("Factura");
    //  System.out.println(order);
         }

}catch(Exception e){

System.out.println("error en knowAboutPlace"+e);
}
         
        finally {
            closeResources(rs, ps, con);
        }
          } 
          }

          
          
          
                
    public void procesarPaciente() {
    // Primero valida la cédula
    String cedula = TXTPcedula.getText();
    if ("V-".equals(cedula) || cedula.isEmpty()) {
        JOptionPane.showMessageDialog(null, "CAMPO VACIO O CÉDULA INVALIDA", "CÉDULA", JOptionPane.ERROR_MESSAGE);
        TXTPcedula.setText("V-");
        return; // Detiene la ejecución si la cédula es inválida
    }
    
    // Luego, llama a knowAboutplace para buscar la factura
    knowAboutplace();
    
    if (Factura.equals("")) {
        // Si no se encuentra factura, pregunta si desea registrar
        if (JOptionPane.showConfirmDialog(rootPane, "ESTE PACIENTE NO TIENE UN NÚMERO DE ORDEN NI FACTURA ASIGNADO ¿DESEA AGREGARLO?",
            "PACIENTE", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {       
            goToRegister();
        }
    } else {
        // Si ya tiene factura, se puede proceder con la llamada a Callpacient()
        Callpacient();
    }   }
          
    
    
    
    
    
           private void closeResources(ResultSet rs, PreparedStatement ps, Connection con) {
    try {
        if (rs != null) {
            rs.close();
        }
        if (ps != null) {
            ps.close();
        }
        if (con != null) {
            con.close();
        }
    } catch (Exception ex) {
        System.out.println("Error al cerrar la conexión o los recursos: " + ex.getMessage());
    }
}
    
    
    
    
    
    
    
    
    
    
                
  DefaultTableModel modelo = new DefaultTableModel();

  
  Temporal MP = new Temporal();
  Mprincipal Menu = new Mprincipal();
  int idusuario=MP.getTexto();

  
  Encriptar encriptar = new Encriptar();
  JCPacientes pacientes  = new JCPacientes();
  JPacientesDao pacientesDao  = new JPacientesDao();
  String ruta_archivo = "";
  String Usuario;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgregar;
    private javax.swing.JButton BtnCancelar;
    private javax.swing.JButton BtnSearch;
    private javax.swing.JPanel Estudio1;
    private javax.swing.JPanel Estudio2;
    private javax.swing.JPanel Estudio3;
    private javax.swing.JLabel FechaAc6;
    private com.toedter.calendar.JDateChooser FechaNacimiento;
    private javax.swing.JTextField IdPacientess;
    private javax.swing.JPanel JPregistro;
    private javax.swing.JRadioButton JRMasculino;
    private javax.swing.JRadioButton JRfemenino;
    private javax.swing.JTable JTperzonalizar1;
    private javax.swing.JTable JTperzonalizar2;
    private javax.swing.JTable JTperzonalizar3;
    private javax.swing.JTextField TXTNOMBRESTDIO2;
    private javax.swing.JTextField TXTNOMBRESTUDIO0;
    private javax.swing.JTextField TXTNOMBRESTUDIO1;
    private javax.swing.JTextField TXTPapellido;
    private javax.swing.JTextField TXTPcedula;
    private javax.swing.JTextField TXTPcorreo;
    private javax.swing.JTextArea TXTPdireccion;
    private javax.swing.JTextField TXTPnombre;
    private javax.swing.JFormattedTextField TXTPtelefono;
    private javax.swing.JTextField TxtAnalisis0;
    private javax.swing.JTextField TxtAnalisis1;
    private javax.swing.JTextField TxtAnalisis2;
    private javax.swing.JTextField TxtRef0;
    private javax.swing.JTextField TxtRef1;
    private javax.swing.JTextField TxtReferencia2;
    private javax.swing.JTextField TxtResultado0;
    private javax.swing.JTextField TxtResultado1;
    private javax.swing.JTextField TxtResultado2;
    private javax.swing.JTextField TxtUnd0;
    private javax.swing.JTextField TxtUnidad1;
    private javax.swing.JTextField TxtUnidad2;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Procesos.JLabexamenes;

import Clases.Encriptar;
import Clases.EnlaceBd;
import Clases.JCPacientes;
import Clases.JPacientesDao;
import Clases.Jlab_auditorias;
import Clases.PdfVO;
import Clases.Validar;
import Menu.Mprincipal;
import Clases.PdfDAO1;
import Clases.Tabla_PdfVO;
import Clases.Temporal;
import Clases.labEstudiosBdDao;
import Clases.sql;
import Clases.updateLaboratorio;
import Clases.updateLaboratorioDao;
import Consultas.ConsultaLaboratorio;
import Procesos.JLaboratorio;
import Registros.JPacientes;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FCGinebraI
 */
public class JHematologia extends javax.swing.JInternalFrame {

    /**
     * Creates new form JERutina
     */
    public JHematologia() {
    initComponents();
    ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
    informacionpdf();
    MaxIdestudios();
    this.JRMasculino.setSelected(true);
    JPregistro.setVisible(false);
    BtnAgregar.setVisible(false);
    IdPacientess.setVisible(false);
    CallReferencia();


    }
     
   String  empresa, rif, ubicacion, telefonos, piepagina;
   public void informacionpdf() {

   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
   
        try {

            String sql = "select * from tableinfopdfs";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                empresa = rs.getString("nombrempresa");
                rif = rs.getString("rif");
                ubicacion = rs.getString("ubicacion");
                telefonos = rs.getString("telefonos");
                piepagina = rs.getString("infopiepagina");
               
            }

        } catch (Exception e) {System.out.println(e);
        }   finally {
            closeResources(rs, ps, con);
        }  
        
        
               
    }


    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        BtnAgregar = new javax.swing.JButton();
        BtnCancelar = new javax.swing.JButton();
        jPanel25 = new javax.swing.JPanel();
        TxtLeucocitos = new javax.swing.JTextField();
        TxtLinfocitos = new javax.swing.JTextField();
        TxtHematocrito = new javax.swing.JTextField();
        TXtCHCM = new javax.swing.JTextField();
        TxtHemoglobina = new javax.swing.JTextField();
        TxtPlaquetas = new javax.swing.JTextField();
        TxtVCM = new javax.swing.JTextField();
        TxtNeutrofilos = new javax.swing.JTextField();
        jButton34 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        TxtLeucocitos1 = new javax.swing.JTextField();
        TxtLinfocitos1 = new javax.swing.JTextField();
        TxtHematocrito1 = new javax.swing.JTextField();
        TxtHemoglobina1 = new javax.swing.JTextField();
        TxtNeutrofilos1 = new javax.swing.JTextField();
        TxtVCM1 = new javax.swing.JTextField();
        TXtCHCM1 = new javax.swing.JTextField();
        TxtPlaquetas1 = new javax.swing.JTextField();
        jButton21 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        JtextObservaciones = new javax.swing.JTextArea();
        TxtEosinofilos = new javax.swing.JTextField();
        TxtEosinofilos1 = new javax.swing.JTextField();
        TxtMonocitos = new javax.swing.JTextField();
        TxtMonocitos1 = new javax.swing.JTextField();
        TxtBasofilo = new javax.swing.JTextField();
        TxtBasofilo1 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        JPregistro = new javax.swing.JPanel();
        TXTPnombre = new javax.swing.JTextField();
        TXTPcorreo = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        JRMasculino = new javax.swing.JRadioButton();
        JRfemenino = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TXTPdireccion = new javax.swing.JTextArea();
        FechaNacimiento = new com.toedter.calendar.JDateChooser();
        TXTPtelefono = new javax.swing.JFormattedTextField();
        TXTPapellido = new javax.swing.JTextField();
        TXTPcedula = new javax.swing.JTextField();
        BtnSearch = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        FechaAc6 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        IdPacientess = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BtnAgregar.setText("Agregar");
        BtnAgregar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnAgregar.setContentAreaFilled(false);
        BtnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 120, 30));

        BtnCancelar.setText("NUEVO");
        BtnCancelar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnCancelar.setContentAreaFilled(false);
        BtnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, 120, 30));

        jPanel9.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 400, 70));

        jPanel25.setBackground(new java.awt.Color(255, 255, 255));
        jPanel25.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "HEMATOLOG√çA COMPLETA"));
        jPanel25.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TxtLeucocitos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Leucocitos"));
        TxtLeucocitos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtLeucocitosFocusLost(evt);
            }
        });
        TxtLeucocitos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtLeucocitosKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtLeucocitosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtLeucocitosKeyTyped(evt);
            }
        });
        jPanel25.add(TxtLeucocitos, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 130, 40));

        TxtLinfocitos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Linfocitos"));
        TxtLinfocitos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtLinfocitosFocusLost(evt);
            }
        });
        TxtLinfocitos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtLinfocitosActionPerformed(evt);
            }
        });
        TxtLinfocitos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtLinfocitosKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtLinfocitosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtLinfocitosKeyTyped(evt);
            }
        });
        jPanel25.add(TxtLinfocitos, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 130, 40));

        TxtHematocrito.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hematocrito"));
        TxtHematocrito.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtHematocritoFocusLost(evt);
            }
        });
        TxtHematocrito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtHematocritoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtHematocritoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtHematocritoKeyTyped(evt);
            }
        });
        jPanel25.add(TxtHematocrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 130, 40));

        TXtCHCM.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "CHCM"));
        TXtCHCM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TXtCHCMFocusLost(evt);
            }
        });
        TXtCHCM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXtCHCMActionPerformed(evt);
            }
        });
        TXtCHCM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXtCHCMKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXtCHCMKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXtCHCMKeyTyped(evt);
            }
        });
        jPanel25.add(TXtCHCM, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, 130, 40));

        TxtHemoglobina.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hemoglobina"));
        TxtHemoglobina.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtHemoglobinaFocusLost(evt);
            }
        });
        TxtHemoglobina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtHemoglobinaActionPerformed(evt);
            }
        });
        TxtHemoglobina.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtHemoglobinaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtHemoglobinaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtHemoglobinaKeyTyped(evt);
            }
        });
        jPanel25.add(TxtHemoglobina, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 130, 40));

        TxtPlaquetas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Plaquetas"));
        TxtPlaquetas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtPlaquetasKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtPlaquetasKeyTyped(evt);
            }
        });
        jPanel25.add(TxtPlaquetas, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 260, 40));

        TxtVCM.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "VCM"));
        TxtVCM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtVCMFocusLost(evt);
            }
        });
        TxtVCM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtVCMKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtVCMKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtVCMKeyTyped(evt);
            }
        });
        jPanel25.add(TxtVCM, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 130, 40));

        TxtNeutrofilos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Neutrofilos"));
        TxtNeutrofilos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtNeutrofilosFocusLost(evt);
            }
        });
        TxtNeutrofilos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtNeutrofilosKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtNeutrofilosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtNeutrofilosKeyTyped(evt);
            }
        });
        jPanel25.add(TxtNeutrofilos, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 130, 40));

        jButton34.setText("Generar");
        jButton34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton34.setContentAreaFilled(false);
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton34ActionPerformed(evt);
            }
        });
        jPanel25.add(jButton34, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 550, 220, 30));

        jButton20.setText("Cancelar");
        jButton20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton20.setContentAreaFilled(false);
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel25.add(jButton20, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 550, 220, 30));
        jPanel25.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 500, 590, 20));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel25.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 30, 310));

        TxtLeucocitos1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia Leucocitos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TxtLeucocitos1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtLeucocitos1KeyTyped(evt);
            }
        });
        jPanel25.add(TxtLeucocitos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 130, 40));

        TxtLinfocitos1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia Linfocitos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TxtLinfocitos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtLinfocitos1ActionPerformed(evt);
            }
        });
        TxtLinfocitos1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtLinfocitos1KeyTyped(evt);
            }
        });
        jPanel25.add(TxtLinfocitos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, 130, 40));

        TxtHematocrito1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia Hematocrito", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TxtHematocrito1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtHematocrito1KeyTyped(evt);
            }
        });
        jPanel25.add(TxtHematocrito1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 150, 130, 40));

        TxtHemoglobina1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia Hemoglobina", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TxtHemoglobina1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtHemoglobina1KeyTyped(evt);
            }
        });
        jPanel25.add(TxtHemoglobina1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 150, 130, 40));

        TxtNeutrofilos1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia Neutrofilos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TxtNeutrofilos1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtNeutrofilos1KeyTyped(evt);
            }
        });
        jPanel25.add(TxtNeutrofilos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 70, 130, 40));

        TxtVCM1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia VCM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TxtVCM1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtVCM1KeyTyped(evt);
            }
        });
        jPanel25.add(TxtVCM1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 190, 130, 40));

        TXtCHCM1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia CHCM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TXtCHCM1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXtCHCM1ActionPerformed(evt);
            }
        });
        TXtCHCM1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXtCHCM1KeyTyped(evt);
            }
        });
        jPanel25.add(TXtCHCM1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 190, 130, 40));

        TxtPlaquetas1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia Plaquetas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TxtPlaquetas1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtPlaquetas1KeyTyped(evt);
            }
        });
        jPanel25.add(TxtPlaquetas1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 230, 260, 40));

        jButton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/modificar.png"))); // NOI18N
        jButton21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton21.setBorderPainted(false);
        jButton21.setContentAreaFilled(false);
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        jPanel25.add(jButton21, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 280, 110, 30));

        JtextObservaciones.setColumns(20);
        JtextObservaciones.setLineWrap(true);
        JtextObservaciones.setRows(5);
        JtextObservaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Observaciones")));
        JtextObservaciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JtextObservacionesKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(JtextObservaciones);

        jPanel25.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 560, 120));

        TxtEosinofilos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Eosinofilos"));
        TxtEosinofilos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtEosinofilosFocusLost(evt);
            }
        });
        TxtEosinofilos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtEosinofilosKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtEosinofilosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtEosinofilosKeyTyped(evt);
            }
        });
        jPanel25.add(TxtEosinofilos, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 130, 40));

        TxtEosinofilos1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia Eosinofilos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TxtEosinofilos1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtEosinofilos1FocusLost(evt);
            }
        });
        TxtEosinofilos1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtEosinofilos1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtEosinofilos1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtEosinofilos1KeyTyped(evt);
            }
        });
        jPanel25.add(TxtEosinofilos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 70, 130, 40));

        TxtMonocitos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Monocitos"));
        TxtMonocitos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtMonocitosFocusLost(evt);
            }
        });
        TxtMonocitos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtMonocitosKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtMonocitosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtMonocitosKeyTyped(evt);
            }
        });
        jPanel25.add(TxtMonocitos, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 130, 40));

        TxtMonocitos1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia Monocitos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TxtMonocitos1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtMonocitos1FocusLost(evt);
            }
        });
        TxtMonocitos1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtMonocitos1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtMonocitos1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtMonocitos1KeyTyped(evt);
            }
        });
        jPanel25.add(TxtMonocitos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 110, 130, 40));

        TxtBasofilo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Basofilo"));
        TxtBasofilo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtBasofiloFocusLost(evt);
            }
        });
        TxtBasofilo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtBasofiloKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtBasofiloKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtBasofiloKeyTyped(evt);
            }
        });
        jPanel25.add(TxtBasofilo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 130, 40));

        TxtBasofilo1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia Basofilo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TxtBasofilo1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtBasofilo1FocusLost(evt);
            }
        });
        TxtBasofilo1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtBasofilo1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtBasofilo1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtBasofilo1KeyTyped(evt);
            }
        });
        jPanel25.add(TxtBasofilo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 110, 130, 40));

        jPanel9.add(jPanel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, 590, 600));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane1.setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JPregistro.setBackground(new java.awt.Color(255, 255, 255));
        JPregistro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTPnombre.setEditable(false);
        TXTPnombre.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre")));
        TXTPnombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPnombreActionPerformed(evt);
            }
        });
        TXTPnombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPnombreKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPnombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 160, 50));

        TXTPcorreo.setEditable(false);
        TXTPcorreo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Correo"));
        TXTPcorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPcorreoKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPcorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 160, 50));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Sexo"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JRMasculino.setBackground(new java.awt.Color(255, 255, 255));
        JRMasculino.setText("Masculino");
        JRMasculino.setEnabled(false);
        JRMasculino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRMasculinoActionPerformed(evt);
            }
        });
        jPanel5.add(JRMasculino, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        JRfemenino.setBackground(new java.awt.Color(255, 255, 255));
        JRfemenino.setText("Femenino");
        JRfemenino.setEnabled(false);
        JRfemenino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRfemeninoActionPerformed(evt);
            }
        });
        jPanel5.add(JRfemenino, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, -1, -1));

        JPregistro.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 350, 50));

        TXTPdireccion.setEditable(false);
        TXTPdireccion.setColumns(20);
        TXTPdireccion.setLineWrap(true);
        TXTPdireccion.setRows(5);
        TXTPdireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Direcci√≥n"));
        TXTPdireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPdireccionKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(TXTPdireccion);

        JPregistro.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 350, 120));

        FechaNacimiento.setBackground(new java.awt.Color(255, 255, 255));
        FechaNacimiento.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha de Nacimiento"));
        FechaNacimiento.setToolTipText("");
        FechaNacimiento.setEnabled(false);
        FechaNacimiento.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        JPregistro.add(FechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 350, 50));

        TXTPtelefono.setEditable(false);
        TXTPtelefono.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Telefono"));
        try {
            TXTPtelefono.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        JPregistro.add(TXTPtelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, 170, 50));

        TXTPapellido.setEditable(false);
        TXTPapellido.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Apellido"));
        TXTPapellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPapellidoKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPapellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 0, 170, 50));

        jPanel1.add(JPregistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 400, 370));

        TXTPcedula.setText("V-");
        TXTPcedula.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "C√©dula"));
        TXTPcedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyTyped(evt);
            }
        });
        jPanel1.add(TXTPcedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 260, 50));

        BtnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/magnifier-1_icon-icons.com_56924.png"))); // NOI18N
        BtnSearch.setBorderPainted(false);
        BtnSearch.setContentAreaFilled(false);
        BtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(BtnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, 50, 50));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 400, 20));
        jPanel1.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 400, 20));

        FechaAc6.setBackground(new java.awt.Color(0, 0, 0));
        FechaAc6.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        FechaAc6.setText("                                   P A C I E N T E ");
        jPanel1.add(FechaAc6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 380, 20));
        jPanel1.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 400, 20));

        IdPacientess.setText("ID");
        jPanel1.add(IdPacientess, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, -1, 50));

        jTabbedPane1.addTab("tab1", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "PACIENTE", "CEDULA", "EDAD", "SEXO", "CORREO", "ESTUDIO"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 370, 450));

        jTabbedPane1.addTab("tab2", jPanel2);

        jPanel9.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 400, 560));

        getContentPane().add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1050, 630));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TxtLinfocitosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtLinfocitosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtLinfocitosActionPerformed

    
    
     
    
    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton34ActionPerformed
       
       
        valorTotal=0;
        
        
        if(!TxtEosinofilos.getText().equals("") && !TxtMonocitos.getText().equals("") && !TxtBasofilo.getText().equals("")){
        
           calcularValores();
        }
     
        
        
        
           if (TXTPapellido.getText().equals("") 
                   
           
                   || TxtVCM1.getText().equals("")
                   || TXtCHCM1.getText().equals("")
                   || TxtLinfocitos1.getText().equals("")
                   || TxtLeucocitos1.getText().equals("")
                   || TxtPlaquetas1.getText().equals("") 
                   || TXTPnombre.getText().equals("")
                   || TXTPcedula.getText().equals("") 
                   || TXTPcorreo.getText().equals("") 
                   || TXTPtelefono.getText().equals("") 
                   || TXTPdireccion.getText().equals(""))
   
        {

            JOptionPane.showMessageDialog(null, "ASIGNE UN PACIENTE, Y VERIFIQUE QUE TODOS LOS CAMPOS SE ENCUENTRAN COMPLETADOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);

        }
           
           
                 else if (TxtLeucocitos.getText().equals("") && TxtLinfocitos.getText().equals("") &&
                   TxtNeutrofilos.getText().equals("") && TxtEosinofilos.getText().equals("") &&
                   TxtMonocitos.getText().equals("")  && TxtBasofilo.getText().equals("") &&
                   TxtHemoglobina.getText().equals("")  && TxtHematocrito.getText().equals("") &&
                   TxtVCM.getText().equals("")  && TXtCHCM.getText().equals("") &&
                   TxtPlaquetas.getText().equals("") 
                   ) {
           JOptionPane.showMessageDialog(null, "DEBE LLENAR POR LO MENOS UN CAMPO DEL ESTUDIO", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);   
           }
           

           
           
           
        
        
          
           else if (valorTotal>100){
           
            JOptionPane.showMessageDialog(null, "LA SUMA DE LOS VALORES NEUTROFILOS, LINFOCITOS, EOSINOFILOS, MONOCITOS, BASOFILO: DA UN NUMERO MAYOR A 100, VALOR RECIBIDO: "+valorTotal, "VALIDACION", JOptionPane.ERROR_MESSAGE);

           
           }
           
           
           

           
             else{  
   
           //--------------------------------------- ACTUALIZAR
            labDao.ConsultarFirma(); 
            String nivelUsuario=MP.getNivel(); 
            String especialidad= MP.getEspecialidad();
            if(especialidad.equals("Bioanalista")&& !estadoEstudio.equals("") || 
            nivelUsuario.equals("Administrador") && !estadoEstudio.equals("")){
               
            Maxid=idCallestudios;
            pdf();  
       
            labDao.actualizarHematologia(
                       Maxid, 
                       TxtLeucocitos.getText(), 
                       TxtLinfocitos.getText(),
                       TxtNeutrofilos.getText(), 
                       TxtHemoglobina.getText(), 
                       TxtHematocrito.getText(), 
                       TxtVCM.getText(), 
                       TXtCHCM.getText(), 
                       TxtPlaquetas.getText(),
                       TxtEosinofilos.getText(),
                       TxtMonocitos.getText(),
                       TxtBasofilo.getText(),
                       JtextObservaciones.getText()
              ); 
            
            
            updateReporte(); 
            cancelarexamen();
            
            String Fecha = new SimpleDateFormat("yyyy/MM/dd").format(Menu.FechaAdmin.getDate());
            String accion = "HORA: "+ Menu.Time.getText()+" Corrigi√≥ el examen N¬∞ "+Maxid+" de: " +TXTPnombre.getText() +" "+ TXTPapellido.getText();
            audit.corregirEstudio(
                    idusuario, 
                    accion,
                    Fecha 
                    );
            
            backtoConsulta();
            }
           
    //--------------------------------------- AGREGAR    
            
            
               else{
               labDao.ConsultarFirma(); 
               MaxIdestudios(); 
               
               labDao.agregarHematologia(
                       Maxid, 
                       TxtLeucocitos.getText(), 
                       TxtLinfocitos.getText(),
                       TxtNeutrofilos.getText(), 
                       TxtHemoglobina.getText(), 
                       TxtHematocrito.getText(), 
                       TxtVCM.getText(), 
                       TXtCHCM.getText(), 
                       TxtPlaquetas.getText(),
                       TxtEosinofilos.getText(),
                       TxtMonocitos.getText(),
                       TxtBasofilo.getText(),
                       JtextObservaciones.getText()
               );    
               
               
               pdf();  
               guardarReporte();  
               cancelarexamen();
               JOptionPane.showMessageDialog(null, "GENERANDO REPORTE...","ESTUDIO",1);
               }
           
           
           }

   
    }//GEN-LAST:event_jButton34ActionPerformed

    
    
    
    
    
    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed

        
                if (JOptionPane.showConfirmDialog(rootPane, "¬øEst√° seguro que desea cancelar los resultados?",
            "Cancelar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
           cancelarexamen(); CallReferencia(); }
                
                else{}
                
    }//GEN-LAST:event_jButton20ActionPerformed

    private void BtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSearchActionPerformed
       procesarPaciente();

    }//GEN-LAST:event_BtnSearchActionPerformed

    private void BtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarActionPerformed

        Connection con;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps;
        ResultSet rs;

        Pattern pattern = Pattern.compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
        String Correo = TXTPcorreo.getText();
        Matcher mather = pattern.matcher(Correo);

        if (TXTPapellido.getText().equals("") || TXTPnombre.getText().equals("") || FechaNacimiento.getDate()==null
            || TXTPcedula.getText().equals("") || TXTPcorreo.getText().equals("") || TXTPtelefono.getText().equals("") || TXTPdireccion.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "TODOS LOS CAMPOS SON OBLIGATORIOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);

        } else if (mather.find() == false) {
            JOptionPane.showMessageDialog(null, "EMAIL INVALIDO, VERIFIQUE", "EMAIL INVALIDO", JOptionPane.ERROR_MESSAGE);
            this.TXTPcorreo.requestFocus();
        }

        else {

            String sql="SELECT Idpaciente, Nombre, Apellido, Cedula, Telefono, Direccion FROM table_paciente  WHERE Cedula='"+ TXTPcedula.getText() +"'";

            try{
                con = cn.getConnection();
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();
                if(rs.next()){JOptionPane.showMessageDialog(null, "EL PACIENTE YA SE ENCUENTRA", "DATO DUPLICADO",JOptionPane.ERROR_MESSAGE);}

                else{
                    AuditoriaAgregar();
                    AgregarPaciente();
                    Callpacient();
                    BtnAgregar.setEnabled(false);
                    //      TxtMotivo.setEnabled(true);

                }

            }catch(Exception e){System.out.println(e);}
        }
    }//GEN-LAST:event_BtnAgregarActionPerformed

    private void BtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelarActionPerformed
        limpiarCampos();
        DesactivarCampos();
        JPregistro.setVisible(false);
        TXTPcedula.setText("V-");
        BtnAgregar.setEnabled(true);
        BtnSearch.setEnabled(true);  
        TXTPcedula.setEnabled(true);
        BtnAgregar.setEnabled(false);
        
    }//GEN-LAST:event_BtnCancelarActionPerformed

    private void TXTPcedulaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyTyped
       char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='V' || car=='E'  || car=='-'|| car=='J'|| car =='H' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTPcedula.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==14)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='V' && car!='E' && car!='-' && car != 'J' && car!='H' || car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTPcedulaKeyTyped

    private void TXTPnombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPnombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPnombreActionPerformed

    private void TXTPnombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPnombreKeyTyped
          va.longitud(TXTPnombre.getText(), 30, evt);
    }//GEN-LAST:event_TXTPnombreKeyTyped

    private void TXTPapellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPapellidoKeyTyped
        va.longitud(TXTPapellido.getText(), 30, evt);
    }//GEN-LAST:event_TXTPapellidoKeyTyped

    private void TXTPcorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcorreoKeyTyped
         va.longitud(TXTPcorreo.getText(), 30, evt);
    }//GEN-LAST:event_TXTPcorreoKeyTyped

    private void TXTPdireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPdireccionKeyTyped
         va.longitud(TXTPdireccion .getText(), 80, evt);
    }//GEN-LAST:event_TXTPdireccionKeyTyped

    private void TxtNeutrofilosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtNeutrofilosKeyTyped
  char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtNeutrofilos.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }       
    }//GEN-LAST:event_TxtNeutrofilosKeyTyped

    private void TxtHemoglobinaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHemoglobinaKeyTyped
          char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtHemoglobina.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }  
    }//GEN-LAST:event_TxtHemoglobinaKeyTyped

    private void TxtHematocritoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHematocritoKeyTyped
         char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtHematocrito.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==7)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }  
    }//GEN-LAST:event_TxtHematocritoKeyTyped

    private void TxtVCMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtVCMKeyTyped
          char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtVCM.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==7)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }  
    }//GEN-LAST:event_TxtVCMKeyTyped

    private void TXtCHCMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXtCHCMKeyTyped
         char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXtCHCM.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==7)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }  
    }//GEN-LAST:event_TXtCHCMKeyTyped

    private void TxtLinfocitosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLinfocitosKeyTyped
          char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtLinfocitos.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }  
    }//GEN-LAST:event_TxtLinfocitosKeyTyped

    private void TxtLeucocitosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLeucocitosKeyTyped
          char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtLeucocitos.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }  
        

        
        
    }//GEN-LAST:event_TxtLeucocitosKeyTyped

    private void TxtPlaquetasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtPlaquetasKeyTyped
         char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car=='-' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtPlaquetas.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='-'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }  
    }//GEN-LAST:event_TxtPlaquetasKeyTyped

    private void TXtCHCMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXtCHCMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXtCHCMActionPerformed

    private void TxtLeucocitos1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLeucocitos1KeyTyped
    char car = evt.getKeyChar();

// VERIFICA Y LIMITA COMPOSICI√ìN DE LOS DATOS
if ((car == '.' || car == ',' || car == '-' || car == KeyEvent.VK_SPACE || (car >= '0' && car <= '9') || car == KeyEvent.VK_DELETE)) {
    String Caracteres = TxtLeucocitos1.getText();
    
    // CONTABILIZA LOS CARACTERES
    if (Caracteres.length() == 15) {
        evt.consume();
    }
} else {
    // EVITA EL INGRESO DE OTROS CARACTERES
    evt.consume();
} 
    }//GEN-LAST:event_TxtLeucocitos1KeyTyped

    private void TxtLinfocitos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtLinfocitos1ActionPerformed
     
    }//GEN-LAST:event_TxtLinfocitos1ActionPerformed

    
    
    private void TxtLinfocitos1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLinfocitos1KeyTyped
       char car = evt.getKeyChar();

// VERIFICA Y LIMITA COMPOSICI√ìN DE LOS DATOS
if ((car == '.' || car == ',' || car == '-' || car == KeyEvent.VK_SPACE || (car >= '0' && car <= '9') || car == KeyEvent.VK_DELETE)) {
    String Caracteres = TxtLinfocitos1.getText();
    
    // CONTABILIZA LOS CARACTERES
    if (Caracteres.length() == 15) {
        evt.consume();
    }
} else {
    // EVITA EL INGRESO DE OTROS CARACTERES
    evt.consume();
} 
    }//GEN-LAST:event_TxtLinfocitos1KeyTyped

    private void TxtHematocrito1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHematocrito1KeyTyped
               char car = evt.getKeyChar();

// VERIFICA Y LIMITA COMPOSICI√ìN DE LOS DATOS
if ((car == '.' || car == ',' || car == '-' || car == KeyEvent.VK_SPACE || (car >= '0' && car <= '9') || car == KeyEvent.VK_DELETE)) {
    String Caracteres = TxtHematocrito1.getText();
    
    // CONTABILIZA LOS CARACTERES
    if (Caracteres.length() == 15) {
        evt.consume();
    }
} else {
    // EVITA EL INGRESO DE OTROS CARACTERES
    evt.consume();
}
    }//GEN-LAST:event_TxtHematocrito1KeyTyped

    private void TxtHemoglobina1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHemoglobina1KeyTyped
                char car = evt.getKeyChar();

// VERIFICA Y LIMITA COMPOSICI√ìN DE LOS DATOS
if ((car == '.' || car == ',' || car == '-' || car == KeyEvent.VK_SPACE || (car >= '0' && car <= '9') || car == KeyEvent.VK_DELETE)) {
    String Caracteres = TxtHemoglobina1.getText();
    
    // CONTABILIZA LOS CARACTERES
    if (Caracteres.length() == 15) {
        evt.consume();
    }
} else {
    // EVITA EL INGRESO DE OTROS CARACTERES
    evt.consume();
}
    }//GEN-LAST:event_TxtHemoglobina1KeyTyped

    private void TxtNeutrofilos1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtNeutrofilos1KeyTyped
           char car = evt.getKeyChar();

// VERIFICA Y LIMITA COMPOSICI√ìN DE LOS DATOS
if ((car == '.' || car == ',' || car == '-' || car == KeyEvent.VK_SPACE || (car >= '0' && car <= '9') || car == KeyEvent.VK_DELETE)) {
    String Caracteres = TxtNeutrofilos1.getText();
    
    // CONTABILIZA LOS CARACTERES
    if (Caracteres.length() == 15) {
        evt.consume();
    }
} else {
    // EVITA EL INGRESO DE OTROS CARACTERES
    evt.consume();
} 
    }//GEN-LAST:event_TxtNeutrofilos1KeyTyped

    private void TxtVCM1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtVCM1KeyTyped
                  char car = evt.getKeyChar();

// VERIFICA Y LIMITA COMPOSICI√ìN DE LOS DATOS
if ((car == '.' || car == ',' || car == '-' || car == KeyEvent.VK_SPACE || (car >= '0' && car <= '9') || car == KeyEvent.VK_DELETE)) {
    String Caracteres = TxtVCM1.getText();
    
    // CONTABILIZA LOS CARACTERES
    if (Caracteres.length() == 15) {
        evt.consume();
    }
} else {
    // EVITA EL INGRESO DE OTROS CARACTERES
    evt.consume();
}
    }//GEN-LAST:event_TxtVCM1KeyTyped

    private void TXtCHCM1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXtCHCM1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXtCHCM1ActionPerformed

    private void TXtCHCM1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXtCHCM1KeyTyped
                        char car = evt.getKeyChar();

// VERIFICA Y LIMITA COMPOSICI√ìN DE LOS DATOS
if ((car == '.' || car == ',' || car == '-' || car == KeyEvent.VK_SPACE || (car >= '0' && car <= '9') || car == KeyEvent.VK_DELETE)) {
    String Caracteres = TXtCHCM1.getText();
    
    // CONTABILIZA LOS CARACTERES
    if (Caracteres.length() == 15) {
        evt.consume();
    }
} else {
    // EVITA EL INGRESO DE OTROS CARACTERES
    evt.consume();
}
    }//GEN-LAST:event_TXtCHCM1KeyTyped

    private void TxtPlaquetas1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtPlaquetas1KeyTyped
                            char car = evt.getKeyChar();

// VERIFICA Y LIMITA COMPOSICI√ìN DE LOS DATOS
if ((car == '.' || car == ',' || car == '-' || car == KeyEvent.VK_SPACE || (car >= '0' && car <= '9') || car == KeyEvent.VK_DELETE)) {
    String Caracteres = TxtPlaquetas1.getText();
    
    // CONTABILIZA LOS CARACTERES
    if (Caracteres.length() == 20) {
        evt.consume();
    }
} else {
    // EVITA EL INGRESO DE OTROS CARACTERES
    evt.consume();
}
    }//GEN-LAST:event_TxtPlaquetas1KeyTyped

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
    
                if (JOptionPane.showConfirmDialog(rootPane, "¬øEst√° seguro que desea actualizar los valores referenciales?",
            "Valores Referenciales", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
       AuditoriaModificar(); ActualizarReferencia(); CallReferencia(); }
                
                else{CallReferencia();}      
        
        
    }//GEN-LAST:event_jButton21ActionPerformed

    private void JRMasculinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRMasculinoActionPerformed
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
    }//GEN-LAST:event_JRMasculinoActionPerformed

    private void JRfemeninoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRfemeninoActionPerformed
      JRfemenino.setSelected(true);
      JRMasculino.setSelected(false);
      Sexo="Femenino";
    }//GEN-LAST:event_JRfemeninoActionPerformed

    private void TXTPcedulaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyPressed
    if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
    procesarPaciente();


} 
    }//GEN-LAST:event_TXTPcedulaKeyPressed

    private void TxtLeucocitosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtLeucocitosFocusLost
   
    }//GEN-LAST:event_TxtLeucocitosFocusLost

    private void TxtLinfocitosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtLinfocitosFocusLost
       
    }//GEN-LAST:event_TxtLinfocitosFocusLost

    private void TxtNeutrofilosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtNeutrofilosFocusLost
       
    }//GEN-LAST:event_TxtNeutrofilosFocusLost

    private void TxtHemoglobinaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtHemoglobinaFocusLost
      
    }//GEN-LAST:event_TxtHemoglobinaFocusLost

    private void TxtVCMFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtVCMFocusLost
        
    }//GEN-LAST:event_TxtVCMFocusLost

    private void TXtCHCMFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TXtCHCMFocusLost
       
    }//GEN-LAST:event_TXtCHCMFocusLost

    private void TxtHemoglobinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtHemoglobinaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtHemoglobinaActionPerformed

    private void TxtHematocritoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtHematocritoFocusLost
         
    }//GEN-LAST:event_TxtHematocritoFocusLost

    private void TxtLeucocitosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLeucocitosKeyPressed
         if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
        TxtLinfocitos.requestFocusInWindow();
        }
   

       
         
    }//GEN-LAST:event_TxtLeucocitosKeyPressed

    private void TxtLinfocitosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLinfocitosKeyPressed
               if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
        TxtNeutrofilos.requestFocusInWindow();
        }
    }//GEN-LAST:event_TxtLinfocitosKeyPressed

    private void TxtNeutrofilosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtNeutrofilosKeyPressed
                     if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
        TxtHemoglobina.requestFocusInWindow();
        }
    }//GEN-LAST:event_TxtNeutrofilosKeyPressed

    private void TxtHemoglobinaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHemoglobinaKeyPressed
                     if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
        TxtHematocrito.requestFocusInWindow();
        }
    }//GEN-LAST:event_TxtHemoglobinaKeyPressed

    private void TxtHematocritoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHematocritoKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
        TxtVCM.requestFocusInWindow();
        }
    }//GEN-LAST:event_TxtHematocritoKeyPressed

    private void TxtVCMKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtVCMKeyPressed
             if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
        TXtCHCM.requestFocusInWindow();
        }
    }//GEN-LAST:event_TxtVCMKeyPressed

    private void TXtCHCMKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXtCHCMKeyPressed
              if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
       TxtPlaquetas.requestFocusInWindow();
        }
    }//GEN-LAST:event_TXtCHCMKeyPressed

    private void JtextObservacionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JtextObservacionesKeyTyped
      va.longitud(JtextObservaciones.getText(), 200, evt);
    }//GEN-LAST:event_JtextObservacionesKeyTyped

    private void TxtLeucocitosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLeucocitosKeyReleased
        try {
       String text = TxtLeucocitos.getText().replace(',', '.');
       
       text = text.replaceAll("[.,]", "");
    
    // Reemplaza la coma decimal (',') por un punto ('.') como separador decimal.
       text = text.replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 4000 || valor > 10000) {
           Color lightRed = new Color(255, 192, 192);
            TxtLeucocitos.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtLeucocitos.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
       TxtLeucocitos.setBackground(Color.WHITE); // Manejar entrada no v√°lida
    }
    }//GEN-LAST:event_TxtLeucocitosKeyReleased

    private void TxtLinfocitosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLinfocitosKeyReleased
        try {
        String text = TxtLinfocitos.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 20 || valor > 40) {
           Color lightRed = new Color(255, 192, 192);
            TxtLinfocitos.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtLinfocitos.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtLinfocitos.setBackground(Color.WHITE); // Manejar entrada no v√°lida
    }
    }//GEN-LAST:event_TxtLinfocitosKeyReleased

    private void TxtNeutrofilosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtNeutrofilosKeyReleased
       try {
       String text = TxtNeutrofilos.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 50 || valor > 70) {
           Color lightRed = new Color(255, 192, 192);
            TxtNeutrofilos.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtNeutrofilos.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtNeutrofilos.setBackground(Color.WHITE); // Manejar entrada no v√°lida
    }
    }//GEN-LAST:event_TxtNeutrofilosKeyReleased

    private void TxtHemoglobinaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHemoglobinaKeyReleased
        try {
       String text = TxtHemoglobina.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 11 || valor > 16) {
           Color lightRed = new Color(255, 192, 192);
            TxtHemoglobina.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtHemoglobina.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtHemoglobina.setBackground(Color.WHITE); // Manejar entrada no v√°lida
    }
    }//GEN-LAST:event_TxtHemoglobinaKeyReleased

    private void TxtHematocritoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHematocritoKeyReleased
     
       try {
       String text = TxtHematocrito.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 37 || valor > 54) {
           Color lightRed = new Color(255, 192, 192);
            TxtHematocrito.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtHematocrito.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtHematocrito.setBackground(Color.WHITE); // Manejar entrada no v√°lida
    }
    }//GEN-LAST:event_TxtHematocritoKeyReleased

    private void TxtVCMKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtVCMKeyReleased
         
       try {
       String text = TxtVCM.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 80 || valor > 100) {
           Color lightRed = new Color(255, 192, 192);
            TxtVCM.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtVCM.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtVCM.setBackground(Color.WHITE); // Manejar entrada no v√°lida
    }
    }//GEN-LAST:event_TxtVCMKeyReleased

    private void TXtCHCMKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXtCHCMKeyReleased
           try {
       String text = TXtCHCM.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 31 || valor > 34) {
           Color lightRed = new Color(255, 192, 192);
            TXtCHCM.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXtCHCM.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXtCHCM.setBackground(Color.WHITE); // Manejar entrada no v√°lida
    }
    }//GEN-LAST:event_TXtCHCMKeyReleased

    private void TxtPlaquetasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtPlaquetasKeyReleased
       try {
       String text = TxtPlaquetas.getText().replace(',', '.');
       
       text = text.replaceAll("[.,]", "");
    
    // Reemplaza la coma decimal (',') por un punto ('.') como separador decimal.
       text = text.replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 150000 || valor > 450000) {
           Color lightRed = new Color(255, 192, 192);
            TxtPlaquetas.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtPlaquetas.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtPlaquetas.setBackground(Color.WHITE); // Manejar entrada no v√°lida
    }
    }//GEN-LAST:event_TxtPlaquetasKeyReleased

    private void TxtEosinofilosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtEosinofilosFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtEosinofilosFocusLost

    private void TxtEosinofilosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtEosinofilosKeyPressed

    private void TxtEosinofilosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilosKeyReleased
             try {
       String text = TxtEosinofilos.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 7) {
           Color lightRed = new Color(255, 192, 192);
            TxtEosinofilos.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtEosinofilos.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtEosinofilos.setBackground(Color.WHITE); // Manejar entrada no v√°lida
    }
    }//GEN-LAST:event_TxtEosinofilosKeyReleased

    private void TxtEosinofilosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilosKeyTyped
         char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtEosinofilos.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }   
    }//GEN-LAST:event_TxtEosinofilosKeyTyped

    private void TxtEosinofilos1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtEosinofilos1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtEosinofilos1FocusLost

    private void TxtEosinofilos1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilos1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtEosinofilos1KeyPressed

    private void TxtEosinofilos1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilos1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtEosinofilos1KeyReleased

    private void TxtEosinofilos1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilos1KeyTyped
                   char car = evt.getKeyChar();

// VERIFICA Y LIMITA COMPOSICI√ìN DE LOS DATOS
if ((car == '.' || car == ',' || car == '-' || car == KeyEvent.VK_SPACE || (car >= '0' && car <= '9') || car == KeyEvent.VK_DELETE)) {
    String Caracteres = TxtEosinofilos1.getText();
    
    // CONTABILIZA LOS CARACTERES
    if (Caracteres.length() == 15) {
        evt.consume();
    }
} else {
    // EVITA EL INGRESO DE OTROS CARACTERES
    evt.consume();
}
    }//GEN-LAST:event_TxtEosinofilos1KeyTyped

    private void TxtMonocitosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtMonocitosFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtMonocitosFocusLost

    private void TxtMonocitosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtMonocitosKeyPressed

    private void TxtMonocitosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitosKeyReleased
               try {
       String text = TxtMonocitos.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 11) {
           Color lightRed = new Color(255, 192, 192);
            TxtMonocitos.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtMonocitos.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtMonocitos.setBackground(Color.WHITE); // Manejar entrada no v√°lida
    }
    }//GEN-LAST:event_TxtMonocitosKeyReleased

    private void TxtMonocitosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitosKeyTyped
           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtMonocitos.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        } 
    }//GEN-LAST:event_TxtMonocitosKeyTyped

    private void TxtMonocitos1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtMonocitos1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtMonocitos1FocusLost

    private void TxtMonocitos1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitos1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtMonocitos1KeyPressed

    private void TxtMonocitos1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitos1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtMonocitos1KeyReleased

    private void TxtMonocitos1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitos1KeyTyped
 char car = evt.getKeyChar();

// VERIFICA Y LIMITA COMPOSICI√ìN DE LOS DATOS
if ((car == '.' || car == ',' || car == '-' || car == KeyEvent.VK_SPACE || (car >= '0' && car <= '9') || car == KeyEvent.VK_DELETE)) {
    String Caracteres = TxtMonocitos1.getText();
    
    // CONTABILIZA LOS CARACTERES
    if (Caracteres.length() == 15) {
        evt.consume();
    }
} else {
    // EVITA EL INGRESO DE OTROS CARACTERES
    evt.consume();
}
    }//GEN-LAST:event_TxtMonocitos1KeyTyped

    private void TxtBasofiloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtBasofiloFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtBasofiloFocusLost

    private void TxtBasofiloKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofiloKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtBasofiloKeyPressed

    private void TxtBasofiloKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofiloKeyReleased
           try {
       String text = TxtBasofilo.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 1) {
           Color lightRed = new Color(255, 192, 192);
            TxtBasofilo.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtBasofilo.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtBasofilo.setBackground(Color.WHITE); // Manejar entrada no v√°lida
    }
    }//GEN-LAST:event_TxtBasofiloKeyReleased

    private void TxtBasofiloKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofiloKeyTyped
              char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtBasofilo.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        } 
    }//GEN-LAST:event_TxtBasofiloKeyTyped

    private void TxtBasofilo1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtBasofilo1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtBasofilo1FocusLost

    private void TxtBasofilo1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofilo1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtBasofilo1KeyPressed

    private void TxtBasofilo1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofilo1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtBasofilo1KeyReleased

    private void TxtBasofilo1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofilo1KeyTyped
        char car = evt.getKeyChar();

// VERIFICA Y LIMITA COMPOSICI√ìN DE LOS DATOS
if ((car == '.' || car == ',' || car == '-' || car == KeyEvent.VK_SPACE || (car >= '0' && car <= '9') || car == KeyEvent.VK_DELETE)) {
    String Caracteres = TxtBasofilo1.getText();
    
    // CONTABILIZA LOS CARACTERES
    if (Caracteres.length() == 15) {
        evt.consume();
    }
} else {
    // EVITA EL INGRESO DE OTROS CARACTERES
    evt.consume();
}
    }//GEN-LAST:event_TxtBasofilo1KeyTyped

    
    
    
    public static String getEdad(Date fechaNacimiento) {
    if (fechaNacimiento != null) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        StringBuilder result = new StringBuilder();
        if (fechaNacimiento != null) {
            result.append(sdf.format(fechaNacimiento));
            result.append(" (");
            Calendar c = new GregorianCalendar();
            c.setTime(fechaNacimiento);
            result.append(calcularEdad(c));
            result.append(" a√±os)");
        }
        return result.toString();
    }
    return "";
}

private static int calcularEdad(Calendar fechaNac) {
    Calendar today = Calendar.getInstance();
    int diffYear = today.get(Calendar.YEAR) - fechaNac.get(Calendar.YEAR);
    int diffMonth = today.get(Calendar.MONTH) - fechaNac.get(Calendar.MONTH);
    int diffDay = today.get(Calendar.DAY_OF_MONTH) - fechaNac.get(Calendar.DAY_OF_MONTH);
    // Si est√° en ese a√±o pero todav√≠a no los ha cumplido
    if (diffMonth < 0 || (diffMonth == 0 && diffDay < 0)) {
        diffYear = diffYear - 1;
    }
    return diffYear;
}
    
    
    
    
    
     public void pdf() {
      try {
       
          
        /*-------------------------------------------------------------------------------------*/
            
            String fechaN = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts1= fechaN.split("/");
            String an1 = dateParts1[0];
            String mes1 = dateParts1[1];
            String dia1 = dateParts1[2];
            
            
            String an_actual = Validar.fecha_actual();
            String mes_actual = Validar.fecha_mes();
            String dia_actual = Validar.fecha_dia();
  
            
            int diferenciadia=Integer.parseInt(dia_actual)- Integer.parseInt(dia1);
            int diferenciames=Integer.parseInt(mes_actual)- Integer.parseInt(mes1);
            int diferencian=Integer.parseInt(an_actual)- Integer.parseInt(an1);;
        

            if (diferenciames < 0 || (diferenciames == 0 && diferenciadia < 0)) {
            diferencian = diferencian - 1;
            }
 
   
          
          
          
          
           DateTimeFormatter fth = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).ofPattern("dd-MM-yyyy--HH-mm");
           LocalDateTime fechaactual = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
          

          
            String Paciente=TXTPnombre.getText()+ " "+ TXTPapellido.getText(); 
            PdfNames=TXTPcedula.getText()+"_"+Paciente+"_"+Maxid;
    
        
          
          
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            Paragraph saltolinea = new Paragraph();
          

            FileOutputStream archivo;
            //String rut = System.getProperty("user.home");
            File file = new File("C://Fundaginebra//Reportes//"+PdfNames+".pdf");
            archivo = new FileOutputStream(file);
            Document doc = new Document();
            PdfWriter writer=  PdfWriter.getInstance(doc, archivo);
            doc.open();
       
            com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\src\\imagenes\\Fundacionlogo1.png");
            header.setAlignment(Chunk.ALIGN_CENTER);

            Paragraph fecha = new Paragraph();
            Font negrita = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
            fecha.add(Chunk.NEWLINE);
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
            String Hora = Menu.Time.getText()+" "+Menu.jLabel102.getText();
            //fecha.add( "  Fecha: " + Fecha + "\n" +"  Hora: "+ Hora ) ;

            
            
            PdfPTable Encabezado = new PdfPTable(1);
            Encabezado.setWidthPercentage(25);
            Encabezado.getDefaultCell().setBorder(0);
            float[] ColumnaEncabezado = new float[]{50f};
            Encabezado.setWidths(ColumnaEncabezado);
            Encabezado.setHorizontalAlignment(Element.ALIGN_LEFT);

            Encabezado.addCell(header);
            doc.add(Encabezado);
          
            
            
            
            

            PdfContentByte CB = writer.getDirectContent();  
            BaseFont BF2 = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
  
            CB.beginText();
            CB.setFontAndSize(BF2, 12);
            CB.setTextMatrix(200, 800);
            CB.showText(empresa);
            
            CB.setFontAndSize(BF, 10);
            CB.setTextMatrix(260, 790);
            CB.showText(rif);
            

            
            if(fechaEstudio==null){ 
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 780);
            CB.showText("FECHA: "+ Fecha);
            
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("HORA: "+ Hora);    
              
            }
            
            else if( !fechaEstudio.equals(Fecha)){          
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("FECHA: "+ fechaEstudio);
            }
            
            else{
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 780);
            CB.showText("FECHA: "+ Fecha);
            
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("HORA: "+ Hora);
            }
            
            
            
            
            if(!Factura.equals("")){
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(460, 760);
            CB.showText("FACTURA: #"+ Factura);
            }
            
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(235, 740);
            CB.showText(ubicacion);
          
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(210, 730);
            CB.showText(telefonos); 
            CB.setTextMatrix(168, 725);
            CB.showText("__________________________________________________________________");
          
            CB.endText();
            
      
       //BODY 
       
       
       
            PdfPTable Tabla = new PdfPTable(3); 
            Tabla.setWidthPercentage(100);  
            float[] medidaCeldas = {1f, 3f, 1f };
            Tabla.setWidths(medidaCeldas);
            Tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            if(order>0){
            Paragraph tcolumna1 = new Paragraph("N¬∞ ORDEN: "+Maxid+" | "+ order);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1);
            }
            else{
            Paragraph tcolumna1 = new Paragraph("N¬∞ ORDEN: "+Maxid);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1); 
            }
                
            Paragraph tcolumna2 = new Paragraph("RESULTADOS DEL AN√ÅLISIS");
            tcolumna2.getFont().setStyle(Font.BOLD);
            tcolumna2.getFont().setSize(12);        
            tcolumna2.setFont(Letra);
            tcolumna2.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna2);

            Paragraph tcolumna3 = new Paragraph("N¬∞ PACIENTE: " +IdPaciente+" ");
            tcolumna3.getFont().setStyle(Font.BOLD);
            tcolumna3.getFont().setSize(8);        
            tcolumna3.setFont(Letra);
            tcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna3);
        

              
              

            
            PdfPTable Tabla0 = new PdfPTable(4); 
            // Tabla0.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla0.setWidthPercentage(100);  
            float[] medidaCeldas0 = {3f, 2f, 1f,2f};
            Tabla0.setWidths(medidaCeldas0);
            Tabla0.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla0.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t0columna1 = new Paragraph("PACIENTE: "+ Paciente);
            t0columna1.getFont().setStyle(Font.BOLD);
            t0columna1.getFont().setSize(8);        
            t0columna1.setFont(Letra);
            t0columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna1);
     
                
            Paragraph t0columna2 = new Paragraph("C√âDULA: "+TXTPcedula.getText());
            t0columna2.getFont().setStyle(Font.BOLD);
            t0columna2.getFont().setSize(8);        
            t0columna2.setFont(Letra);
            t0columna2.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna2);

            Paragraph t0columna3 = new Paragraph("EDAD:" +Integer.toString(diferencian) + " a√±os");
            t0columna3.getFont().setStyle(Font.BOLD);
            t0columna3.getFont().setSize(8);        
            t0columna3.setFont(Letra);
            t0columna3.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna3);
        
            Paragraph t0columna4 = new Paragraph("SEXO: "+ Sexo);
            t0columna4.getFont().setStyle(Font.BOLD);
            t0columna4.getFont().setSize(8);        
            t0columna4.setFont(Letra);
            t0columna4.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna4);
            
            
            
            
            
            
                 
            PdfPTable Tabla1 = new PdfPTable(1); 
            Tabla1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla1.setWidthPercentage(100);  
            float[] medidaCeldas1 = {5f};
            Tabla1.setWidths(medidaCeldas1);
            Tabla1.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t1columna1 = new Paragraph("----- HEMATOLOG√çA ----- \n HEMATOLOGIA COMPLETA + PLAQUETAS");
            t1columna1.getFont().setStyle(Font.BOLD);
            t1columna1.getFont().setSize(10);        
            t1columna1.setFont(Letra);
            t1columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla1.addCell(t1columna1);
     
                

            
            
            
            PdfPTable Tabla2 = new PdfPTable(4); 
            Tabla2.setWidthPercentage(100);  
            Tabla2.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            float[] medidaCeldas2 = {4f, 2f, 2f,4f};
            Tabla2.setWidths(medidaCeldas2);
            Tabla2.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t2columna1 = new Paragraph("ANALISIS REALIZADO");
            t2columna1.getFont().setStyle(Font.BOLD);
            t2columna1.getFont().setSize(9);        
            t2columna1.setFont(Letra);
            t2columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna1);
     
                
            Paragraph t2columna2 = new Paragraph("RESULTADOS");
            t2columna2.getFont().setStyle(Font.BOLD);
            t2columna2.getFont().setSize(9);        
            t2columna2.setFont(Letra);
            t2columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna2);

            Paragraph t2columna3 = new Paragraph("UNIDAD");
            t2columna3.getFont().setStyle(Font.BOLD);
            t2columna3.getFont().setSize(10);        
            t2columna3.setFont(Letra);
            t2columna3.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna3);

            Paragraph t2columna4 = new Paragraph("REFERENCIA");
            t2columna4.getFont().setStyle(Font.BOLD);
            t2columna4.getFont().setSize(9);        
            t2columna4.setFont(Letra);
            t2columna4.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t2columna4);
            
            
            
         
           
            
           if(!TxtLeucocitos.getText().equals("")){
           Tabla2.addCell(new Paragraph("Leucocitos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtLeucocitos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("Cel/mm3",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtLeucocitos1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           
            if(!TxtLinfocitos.getText().equals("")){
           Tabla2.addCell(new Paragraph("Linfocitos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtLinfocitos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtLinfocitos1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));  
               }
            
            
            
            if(!TxtNeutrofilos.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Neutrofilos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtNeutrofilos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtNeutrofilos1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
              }         
           
            
           if(!TxtEosinofilos.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Eosinofilos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtEosinofilos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtEosinofilos1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
             }   
            
           if(!TxtMonocitos.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Monocitos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtMonocitos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtMonocitos1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
             }   
           
           if(!TxtBasofilo.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Basofilo",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtBasofilo.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtBasofilo1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
             }   
            
           if(!TxtHemoglobina.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Hemoglobina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtHemoglobina.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("g/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtHemoglobina1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
             }         
           
           
           if(!TxtHematocrito.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Hematocritos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtHematocrito.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtHematocrito1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
               }      
     
             
           if(!TxtVCM.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("VCM",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtVCM.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("fL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtVCM1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
            }  
            
           
           if(!TXtCHCM.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("CHCM",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TXtCHCM.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TXtCHCM1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TxtPlaquetas.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Cont. Plaquetas",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtPlaquetas.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("Cel/mm3",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtPlaquetas1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }


           
           
            PdfPTable TableObservacion = new PdfPTable(1); 
            TableObservacion.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           // Tabla9.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            float[] medidaObservacion = {5f};
            TableObservacion.setWidthPercentage(100);  
            TableObservacion.setWidths(medidaObservacion);
            TableObservacion.setHorizontalAlignment(Element.ALIGN_CENTER);
            TableObservacion.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            
           
            Paragraph t9columna1 = new Paragraph("");
            t9columna1.getFont().setStyle(Font.BOLD);
            t9columna1.getFont().setSize(9);        
            t9columna1.setFont(Letra);
            t9columna1.setAlignment(Element.ALIGN_LEFT);
            TableObservacion.addCell(t9columna1);
            TableObservacion.addCell(new Paragraph(JtextObservaciones.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));           
            
            
           
           
           
           
           
               
            PdfPTable Tablafirma = new PdfPTable(3); 
            Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tablafirma.setWidthPercentage(100);  
            float[] medidaCeldasP = {3f, 1f, 3f};
            Tablafirma.setWidths(medidaCeldasP);
            Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph tPcolumna1 = new Paragraph("\n\n\n\n  "+piepagina);
            tPcolumna1.getFont().setStyle(Font.BOLD);
            tPcolumna1.getFont().setSize(8);        
            tPcolumna1.setFont(Letra);
            tPcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna1);

                
            com.itextpdf.text.Image FirmaLcdo = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\dist\\imagen.bin");
            FirmaLcdo.setAlignment(Chunk.ALIGN_CENTER);
            Tablafirma.addCell(FirmaLcdo);

            Paragraph tPcolumna3 = new Paragraph("\n\n\n\n" + writer.getPageNumber()+ " P√°g");
            tPcolumna3.getFont().setStyle(Font.BOLD);
            tPcolumna3.getFont().setSize(8);        
            tPcolumna3.setFont(Letra);
            tPcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna3);
           


           knowaboutlcdo(); 
           PdfPTable TablafirmaLcdo = new PdfPTable(1); 
           TablafirmaLcdo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           TablafirmaLcdo.setWidthPercentage(100);  
           float[] medidaCeldasFirma = {20f};
           TablafirmaLcdo.setWidths(medidaCeldasFirma);
           TablafirmaLcdo.setHorizontalAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
           Paragraph tPcolumnaFirma1 = new Paragraph("________________ \n "+NameOfLcdo);
           tPcolumnaFirma1.getFont().setStyle(Font.BOLD);
           tPcolumnaFirma1.getFont().setSize(8);        
           tPcolumnaFirma1.setFont(Letra);
           tPcolumnaFirma1.setAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.addCell(tPcolumnaFirma1);

           
           
           
           
           
           
           
           
           
           
     
            saltolinea.add("\n");
            doc.add(saltolinea); 
            doc.add(Tabla);
            
            doc.add(Tabla0);
            doc.add(saltolinea);
           
        
            doc.add(Tabla1);
            doc.add(saltolinea);
            
            doc.add(Tabla2);
            doc.add(saltolinea);


             if (!JtextObservaciones.getText().equals("")){ 
            doc.add(TableObservacion);
            doc.add(saltolinea);
             }
             
             
             
            //FOOTER
            doc.add(Tablafirma);
            doc.add(TablafirmaLcdo);
            
            
            doc.close();
            archivo.close();
           // Desktop.getDesktop().open(file);
        } catch (DocumentException | IOException e) {
           System.out.println(e);
           JOptionPane.showMessageDialog(null, "NO SE CONSIGUE LA CARPETA FUNDAGINEBRA EN DISCO C", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
     
     
     
        String NameOfLcdo, Consultanlcdo;
     
     public void knowaboutlcdo(){
     
    Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null; 
         
         
         try{
         
       String query="Select FirmaLcdo from tableinfo where idinfo=? ";
       
       con = EnlaceBd.getConnection();
       ps = con.prepareStatement(query);
       ps.setInt(1, 1);
       rs=ps.executeQuery();
         
        if(rs.next()){
       Consultanlcdo= rs.getString("FirmaLcdo");
      
       if(!Consultanlcdo.equals("")){NameOfLcdo="Lcdo/a "+ Consultanlcdo;}
       else{NameOfLcdo="";}
       
       
         }

         }catch(Exception e){ System.out.println(e);} 
         finally {
        closeResources(rs, ps, con); 
    }
     }
     
     
     
     
  
   
   

   
   
         
         
 public void Callpacient() {  
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    String Cedula = TXTPcedula.getText().trim();  // Usar trim para eliminar espacios extra.

    // Validaci√≥n temprana de la c√©dula antes de hacer la consulta
    if (Cedula.isEmpty() || Cedula.equals("V-")) {
        JOptionPane.showMessageDialog(null, "EL CAMPO C√âDULA NO PUEDE ESTAR VACIO Y DEBE LLEVAR V-", "CAMPO VACIO", JOptionPane.WARNING_MESSAGE);
        return; // Salir si la c√©dula es inv√°lida
    }
    
    try {
        // Primera consulta para obtener IdPaciente
        String query = "SELECT Idpaciente FROM table_paciente WHERE Cedula = ?";
        con = cn.getConnection();
        ps = con.prepareStatement(query);
        ps.setString(1, Cedula);
        rs = ps.executeQuery();
        
        if (rs.next()) { // Si se encuentra el paciente
            IdPaciente = rs.getInt("Idpaciente");
            IdPacientess.setText(Integer.toString(IdPaciente));

            // Segunda consulta para obtener los detalles del paciente
            String sql2 = "SELECT Nombre, Apellido, Cedula, Telefono, Correo, Direccion, Sexo, date_format(FechNacimiento, '%d/%m/%Y') AS Fecha FROM table_paciente WHERE Idpaciente = ?";
            ps = con.prepareStatement(sql2);
            ps.setInt(1, IdPaciente);
            rs = ps.executeQuery();

            if (rs.next()) { // Si se obtienen los detalles del paciente
                String nombre = rs.getString("Nombre");
                String apellido = rs.getString("Apellido");
                String telefono = rs.getString("Telefono");
                String correo = rs.getString("Correo");
                String direccion = rs.getString("Direccion");
                Sexo = rs.getString("Sexo");
                String nacimiento = rs.getString("Fecha");

                // Asignar valores a los campos
                TXTPnombre.setText(nombre);
                TXTPapellido.setText(apellido);
                TXTPcorreo.setText(correo);
                TXTPtelefono.setText(telefono);
                TXTPdireccion.setText(direccion);
                
                // Selecci√≥n de sexo
                if (Sexo.equals("Femenino")) {
                    JRfemenino.setSelected(true);
                    JRMasculino.setSelected(false);
                } else if (Sexo.equals("Masculino")) {
                    JRMasculino.setSelected(true);
                    JRfemenino.setSelected(false);
                }
                
                // Convertir fecha de nacimiento
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                FechaNacimiento.setDate(formato.parse(nacimiento));

                JPregistro.setVisible(true);  // Mostrar panel de registro
                TXTPcedula.setEnabled(false); // Desactivar el campo de c√©dula
            }
        } else {  // Si no se encuentra el paciente
            int option = JOptionPane.showConfirmDialog(rootPane, "El paciente no se encuentra registrado. ¬øDesea registrarlo?", 
                                                        "Registro Paciente", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                goToRegister();  // Ir al formulario de registro
            } else {
                BtnAgregar.setVisible(false);  // Ocultar el bot√≥n de agregar
                TXTPcedula.setEnabled(true);   // Rehabilitar campo de c√©dula
                BtnSearch.setEnabled(true);    // Habilitar b√∫squeda
            }
        }
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}

       
     
     
     
     
        
      public void goToRegister(){
   
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       JPacientes pac = new JPacientes();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(pac);
       pac.setClosable(true);
       pac.setIconifiable(true);
       
        try {
            pac.setMaximum(true);
        } catch (Exception e) {
        }
        pac.toFront();
        pac.setVisible(true);

   }
     
     
     
     
     
     
     
     public void AgregarPaciente(){                                             
    
    Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null;
    

          try {

              
                    
        java.sql.Date fechaU;
        Date dateU = FechaNacimiento.getDate();
        long dU = dateU.getTime();
        fechaU = new java.sql.Date(dU);
        
        
        
            String fecha = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts= fecha.split("/");
            String an = dateParts[0];
            String mes = dateParts[1];
            String dia = dateParts[2];
            String an_actual = Validar.fecha_actual();

            int edad;
            edad= Integer.parseInt(an_actual)-Integer.parseInt(an);
        
        
        
        
              
              
            String sql = "INSERT INTO table_paciente (Nombre, Apellido, Cedula,Telefono,Correo,Direccion, Sexo, FechNacimiento, edad) VALUES (?,?,?,?,?,?,?,?,?)";
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
      
            ps.setString(1, TXTPnombre.getText());
            ps.setString(2, TXTPapellido.getText());
            ps.setString(3, TXTPcedula.getText());
            ps.setString(4, TXTPtelefono.getText());
            ps.setString(5, TXTPcorreo.getText());
            ps.setString(6, TXTPdireccion.getText());
            ps.setString(7, Sexo);
            ps.setDate(8, fechaU);
            ps.setInt(9, edad);
            ps.execute();
  
     
  JOptionPane.showMessageDialog(null, "EL PACIENTE HA SIDO REGISTRADO","REGISTRO DE PACIENTES", 1);
        } catch (Exception e) {
      
            JOptionPane.showMessageDialog(null, e);
        }   finally {
            closeResources(rs, ps, con);
        }


      
          
          
    } 
     

    
    public void guardar_pdf(int codigo, int idexamen, int idpaciente, int idusuario, String Fecha, File ruta) {
        
        
   
        
        PdfDAO1 pa = new PdfDAO1();
        PdfVO po = new PdfVO();
        po.setCodigopdf(codigo);
        po.setIdexamen(idexamen);
        po.setIdpaciente(idpaciente);
        po.setIdusuario(idusuario);
        po.setFecha(Fecha);
        
        try {
            byte[] pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
            po.setArchivopdf(pdf);
        } catch (IOException ex) {
            po.setArchivopdf(null);
            System.out.println("Error al agregar archivo pdf "+ex.getMessage());
        }
        pa.Agregar_PdfVO(po);
    }

    String PdfNames;
    
    public void guardarReporte()
    {

      
        ruta_archivo="C://Fundaginebra//Reportes//"+PdfNames+".pdf";
        int idexamen = 1016;
        int idpaciente= Integer.parseInt(IdPacientess.getText());

        String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
        sql s = new sql();
        
        int codigo = s.auto_increment("SELECT MAX(codigopdf) FROM table_laboratorio;");
        File ruta = new File(ruta_archivo);
       
        
        
        
        if ( ruta_archivo.trim().length() != 0) {
            guardar_pdf(codigo, idexamen, idpaciente, idusuario, Fecha, ruta);
 
         //   tpdf.visualizar_PdfVO(tabla);
            ruta_archivo = "";
           // activa_boton(false, false, false);
  
        } else {
            JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
        }
    
    }

     
     
     
     
     
     
     
     
     
     
          public void ActivarCampos() {
   
                 TXTPnombre.setEditable(true);
                 TXTPapellido.setEditable(true);
                 TXTPcorreo.setEditable(true);
                 TXTPtelefono.setEditable(true);
                 TXTPdireccion.setEditable(true);
                 JRMasculino.setEnabled(true);
                 JRfemenino.setEnabled(true);
                 FechaNacimiento.setEnabled(true);
                 BtnAgregar.setEnabled(true);
                 BtnAgregar.setVisible(true);

    }
    
                
    public void limpiarCamposNoregistro() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true); 
      FechaNacimiento.setCalendar(null);
    }  
    
       
                   public void DesactivarCampos() {
   
                 TXTPnombre.setEditable(false);
                 TXTPapellido.setEditable(false);
                 TXTPcorreo.setEditable(false);
                 TXTPtelefono.setEditable(false);
                 TXTPdireccion.setEditable(false);
                 JRMasculino.setEnabled(false);
                 JRfemenino.setEnabled(false);
                 FechaNacimiento.setEnabled(false);
                 BtnAgregar.setEnabled(false);
               
       
           
    }
     
     
     
     
     
     

    String Sexo;
    int IdPaciente;
    
    
    public void limpiarCampos() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcedula.setText("V-");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true);  
      FechaNacimiento.setCalendar(null);
    }
    
    
        
        void limpiarTabla() {
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i);
            i = i - 1;
        }
    }
        
        
   
        

   int Maxid;
             public void MaxIdestudios() {
   Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs=null;
    
   
       try {

            String sql = "SELECT MAX(COdigopdf) from table_laboratorio ";
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
            Maxid= rs.getInt("MAX(codigopdf)")+1;
        
            }
            
          
            

        } catch (Exception e) { JOptionPane.showMessageDialog(null, e);}
     
       finally {
            closeResources(rs, ps, con);
        }
     
     }
    
     
             
             double valorTotal;
             public void calcularValores(){
             
             double neutrofilos = Double.parseDouble(TxtNeutrofilos.getText().replace(',', '.'));   
             double linfocitos = Double.parseDouble(TxtLinfocitos.getText().replace(',', '.'));
             double eosinofilos = Double.parseDouble(TxtEosinofilos.getText().replace(',', '.'));
             double monocitos = Double.parseDouble(TxtMonocitos.getText().replace(',', '.'));
             double basofilo = Double.parseDouble(TxtBasofilo.getText().replace(',', '.'));
             
             valorTotal =neutrofilos+ eosinofilos+linfocitos+monocitos +basofilo;
          //   System.out.println(valorTotal);
             }
             
             
             
             
             
             
             
           public void cancelarexamen() 
        
        {
        
        
         jButton34.setEnabled(true);
         TxtNeutrofilos.setText("");
         TxtHemoglobina.setText("");
         TxtHematocrito.setText("");
         TxtVCM.setText("");
   //    TxtHCM.setText("");
         TXtCHCM.setText("");
         TxtLinfocitos.setText("");
   //    TxtEosinofilos.setText("");
   //    TxtMonocitos.setText(""); 
         TxtLeucocitos.setText(""); 
   //    TxtSegmentados.setText(""); 
         TxtPlaquetas.setText(""); 
         JtextObservaciones.setText("");
         TxtEosinofilos.setText("");
         TxtMonocitos.setText("");
         TxtBasofilo.setText("");
         
         TxtLeucocitos.setBackground(Color.WHITE);
         TxtLinfocitos.setBackground(Color.WHITE);
         TxtNeutrofilos.setBackground(Color.WHITE);
         TxtHemoglobina.setBackground(Color.WHITE);
         TxtHematocrito.setBackground(Color.WHITE);
         TxtVCM.setBackground(Color.WHITE);
         TXtCHCM.setBackground(Color.WHITE);
         TxtPlaquetas.setBackground(Color.WHITE);
         TxtEosinofilos.setBackground(Color.WHITE);
         TxtMonocitos.setBackground(Color.WHITE);
         TxtBasofilo.setBackground(Color.WHITE);
      
        }
           
         
           
           
           public void ActualizarReferencia()   {
                   
                   

        Connection con=null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps=null;
        ResultSet rs=null;

        try {
            String sql = "update refencia_hematologia set Leucocitos=?,Linfocitos=?,Neutrofilos=?,Hemoglobina=?,Hematocrito=?,VCM=?,CHCM=?,Plaquetas=?, Eosinofilos=?, Monocitos=?, Basofilo=?  " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, TxtLeucocitos1.getText());
            ps.setString(2, TxtLinfocitos1.getText());
            ps.setString(3, TxtNeutrofilos1.getText());
            ps.setString(4, TxtHemoglobina1.getText());
            ps.setString(5, TxtHematocrito1.getText());
            ps.setString(6, TxtVCM1.getText());
            ps.setString(7, TXtCHCM1.getText());
            ps.setString(8, TxtPlaquetas1.getText());
            ps.setString(9, TxtEosinofilos1.getText());
            ps.setString(10, TxtMonocitos1.getText());
            ps.setString(11, TxtBasofilo1.getText());
            int res = ps.executeUpdate();

            if (res >= 1) {
                JOptionPane.showMessageDialog(null, "LOS VALORES REFENCIALES HAN SIDO MODIFICADOS", "VALORES REFENCIALES", 1);
            } else {
                JOptionPane.showMessageDialog(null, "Fallo al actualizar los datos....");
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        
        
        finally {
        try {
            if (ps != null) {
                ps.close();
            }
        } catch (SQLException e) {
            System.out.println("Error al cerrar PreparedStatement: " + e.getMessage());
        }
        
        try {
            if (con != null) {
                con.close();
            }
        } catch (SQLException e) {
            System.out.println("Error al cerrar Connection: " + e.getMessage());
        }
    }
        
           
           
                  }
           
           
           
           
 
        
   public void CallReferencia() {
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
         
        try {

            String sql = "select * from refencia_hematologia";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                String info0 = rs.getString("Leucocitos");
                String info1 = rs.getString("Linfocitos");
                String info2 = rs.getString("Neutrofilos");
                String info3 = rs.getString("Hemoglobina");
                String info4 = rs.getString("Hematocrito");
                String info5 = rs.getString("VCM");
                String info6 = rs.getString("CHCM");
                String info7 = rs.getString("Plaquetas");
                String info8 = rs.getString("Eosinofilos");
                String info9 = rs.getString("Monocitos");
                String info10 = rs.getString("Basofilo");
                
         TxtLeucocitos1.setText(info0); 
         TxtLinfocitos1.setText(info1);
         TxtNeutrofilos1.setText(info2);
         TxtHemoglobina1.setText(info3);
         TxtHematocrito1.setText(info4);
         TxtVCM1.setText(info5);
         TXtCHCM1.setText(info6);
         TxtPlaquetas1.setText(info7); 
         TxtEosinofilos1.setText(info8); 
         TxtMonocitos1.setText(info9); 
         TxtBasofilo1.setText(info10); 
            }

        } catch (Exception e) {System.out.println(e);
        }  
        
          finally {
            closeResources(rs, ps, con);
        }
        
        
        
    }
         
    int order=0;
    String Factura="";
    public void knowAboutplace(){
        
       
          SimpleDateFormat FormatoFecha = new SimpleDateFormat("yyyy/MM/dd");
          String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
          
          if(!estadoEstudio.equals("")){  
          
          String fechaEstudio1 = fechaEstudio; 
          String[] partesFecha = fechaEstudio1.split("/");
          String mesFormateado = String.format("%02d", Integer.parseInt(partesFecha[1]));
          Fecha = partesFecha[2] + "/" + mesFormateado + "/" + partesFecha[0];
           }
          
          
          
          Connection con=null;
          EnlaceBd cn = new EnlaceBd();
          PreparedStatement ps=null;
          ResultSet rs=null;
     
       
         String busqueda = this.TXTPcedula.getText();
         try{
         String sql="SELECT id_orden, lugar, cedula, nombre, apellido, fecha, Factura " +
                     "FROM orden_lab o " +
                     "INNER JOIN table_paciente n " +
                     "ON o.paciente = n.Idpaciente " +
                     "WHERE Cedula = ? AND fecha = ?";
      
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setString(1, busqueda );
        ps.setString(2, Fecha);
        rs=ps.executeQuery();
        if(rs.next()){
        order=rs.getInt("lugar");
        Factura=rs.getString("Factura");
    //  System.out.println(order);
         }
        
        else{
        Factura="";
        }


}catch(Exception e){

System.out.println("error en knowAboutPlace"+e);
}
          finally {
            closeResources(rs, ps, con);
        } }

            
            
            
            
          
             public void AuditoriaAgregar(){
            
            
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Agrego al paciente "+ TXTPnombre.getText()+" "+TXTPapellido.getText() +" " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idusuario);
            ps.setInt(2, idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
          finally {
            closeResources(rs, ps, con);
        }
     
    }               
                    
          public void AuditoriaModificar(){
            
            
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Modific√≥ los valores referenciales de: Hematologia Completa" ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idusuario);
            ps.setInt(2, idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
        finally {
            closeResources(rs, ps, con);
        }
     
    }                         
           
          
          
          

          
          
          
          
       
 public void updateReporte()
    {
      
        ruta_archivo="C://Fundaginebra//Reportes//"+PdfNames+".pdf";
        int codigo =  idCallestudios;
        File ruta = new File(ruta_archivo);

        if ( ruta_archivo.trim().length() != 0) {
 
         update_pdf(codigo, ruta);
         ruta_archivo = "";
        } else {
            //JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
        }
    
    }
       
       

      
       public void update_pdf(int codigo, File ruta) {
           
        updateLaboratorio pa = new updateLaboratorio();
        updateLaboratorioDao po = new  updateLaboratorioDao();
        pa.setIdlabUpdate(codigo);
        
        try {
            byte[] pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
            pa.setArchivoUpdate(pdf);
        } catch (IOException ex) {
            pa.setArchivoUpdate(null);
            System.out.println("Error al agregar archivo pdf "+ex);
        }
        po.updateLaboratorio(pa);
    }
          
          
         
       
  public void mostrarHematologia() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM lab_hematologia WHERE id_historiaH=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            TxtLeucocitos.setText(rs.getString("Leucocitos"));
            TxtLinfocitos.setText(rs.getString("Linfocitos"));
            TxtNeutrofilos.setText(rs.getString("Neutrofilos"));
            TxtHemoglobina.setText(rs.getString("Hemoglobina"));
            TxtHematocrito.setText(rs.getString("Hematocrito"));
            TxtVCM.setText(rs.getString("VCM"));
            TXtCHCM.setText(rs.getString("CHCM"));
            TxtPlaquetas.setText(rs.getString("Plaquetas"));
            TxtEosinofilos.setText(rs.getString("Eosinofilos"));
            TxtMonocitos.setText(rs.getString("Monocitos"));
            TxtBasofilo.setText(rs.getString("Basofilo"));
            JtextObservaciones.setText(rs.getString("Observacion"));
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    }   finally {
            closeResources(rs, ps, con);
        }
}
      
       
       
  public void backtoConsulta(){
   
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       ConsultaLaboratorio jlab = new ConsultaLaboratorio();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(jlab);
       jlab.setClosable(true);
       jlab.setIconifiable(true);
       
        try {
            jlab.setMaximum(true);
        } catch (Exception e) {
        }
        jlab.toFront();
        jlab.setVisible(true);

   
   }
   
   
   
   
  
  
  public void procesarPaciente() {
    // Primero valida la c√©dula
    String cedula = TXTPcedula.getText();
    if ("V-".equals(cedula) || cedula.isEmpty()) {
        JOptionPane.showMessageDialog(null, "CAMPO VACIO O C√âDULA INVALIDA", "C√âDULA", JOptionPane.ERROR_MESSAGE);
        TXTPcedula.setText("V-");
        return; // Detiene la ejecuci√≥n si la c√©dula es inv√°lida
    }
    
    // Luego, llama a knowAboutplace para buscar la factura
    knowAboutplace();
    
    if (Factura.equals("")) {
        // Si no se encuentra factura, pregunta si desea registrar
        if (JOptionPane.showConfirmDialog(rootPane, "ESTE PACIENTE NO TIENE UN N√öMERO DE ORDEN NI FACTURA ASIGNADO ¬øDESEA AGREGARLO?",
            "PACIENTE", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {       
            goToRegister();
        }
    } else {
        // Si ya tiene factura, se puede proceder con la llamada a Callpacient()
        Callpacient();
    }
}




  
  
   
   
   
       
          
          
       public int idCallestudios=0;
       public String estadoEstudio="";
       private int labid;               
       private String labEstudio, labCedula, fechaEstudio;  
       
       
       
        public void setfechaEstudio(String fecha) {
        this.fechaEstudio = fecha;
    }        
       
       public String getfechaEstudio() {
        return fechaEstudio;
    } 
       
       
       
       
       
       public void setValorA(int labid2) {
        this.labid = labid2;
    }        
       
       public int getValorA() {
        return labid;
    } 
       
       
       
       
       
       

    //--------------------------------------------
       
        public void setValorB(String labEstudio2) {
        this.labEstudio = labEstudio2;
    }        
         public String getValorB() {
        return labEstudio;
    }
         
    //----------------------------------------------
         
         
         
        public void setValorC(String labCedula2) {
        this.labCedula = labCedula2;
    }        
         public String getValorC() {
        return labCedula;
    }
      
          
         
           private void closeResources(ResultSet rs, PreparedStatement ps, Connection con) {
    try {
        if (rs != null) {
            rs.close();
        }
        if (ps != null) {
            ps.close();
        }
        if (con != null) {
            con.close();
        }
    } catch (Exception ex) {
        System.out.println("Error al cerrar la conexi√≥n o los recursos: " + ex.getMessage());
    }
}     
         
         
         
          
  DefaultTableModel modelo = new DefaultTableModel();
  Temporal MP = new Temporal();
  Mprincipal Menu = new Mprincipal();
  int idusuario=MP.getTexto();

  Encriptar encriptar = new Encriptar();
  JCPacientes pacientes  = new JCPacientes();
  JPacientesDao pacientesDao  = new JPacientesDao();     
  Tabla_PdfVO tpdf = new Tabla_PdfVO();   
  String ruta_archivo = "";
  String Usuario;
  Validar va = new Validar();
  labEstudiosBdDao labDao = new labEstudiosBdDao();
  Jlab_auditorias audit = new Jlab_auditorias();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgregar;
    private javax.swing.JButton BtnCancelar;
    private javax.swing.JButton BtnSearch;
    private javax.swing.JLabel FechaAc6;
    private com.toedter.calendar.JDateChooser FechaNacimiento;
    private javax.swing.JTextField IdPacientess;
    private javax.swing.JPanel JPregistro;
    private javax.swing.JRadioButton JRMasculino;
    private javax.swing.JRadioButton JRfemenino;
    private javax.swing.JTextArea JtextObservaciones;
    private javax.swing.JTextField TXTPapellido;
    public javax.swing.JTextField TXTPcedula;
    private javax.swing.JTextField TXTPcorreo;
    private javax.swing.JTextArea TXTPdireccion;
    private javax.swing.JTextField TXTPnombre;
    private javax.swing.JFormattedTextField TXTPtelefono;
    private javax.swing.JTextField TXtCHCM;
    private javax.swing.JTextField TXtCHCM1;
    private javax.swing.JTextField TxtBasofilo;
    private javax.swing.JTextField TxtBasofilo1;
    private javax.swing.JTextField TxtEosinofilos;
    private javax.swing.JTextField TxtEosinofilos1;
    private javax.swing.JTextField TxtHematocrito;
    private javax.swing.JTextField TxtHematocrito1;
    private javax.swing.JTextField TxtHemoglobina;
    private javax.swing.JTextField TxtHemoglobina1;
    private javax.swing.JTextField TxtLeucocitos;
    private javax.swing.JTextField TxtLeucocitos1;
    private javax.swing.JTextField TxtLinfocitos;
    private javax.swing.JTextField TxtLinfocitos1;
    private javax.swing.JTextField TxtMonocitos;
    private javax.swing.JTextField TxtMonocitos1;
    private javax.swing.JTextField TxtNeutrofilos;
    private javax.swing.JTextField TxtNeutrofilos1;
    private javax.swing.JTextField TxtPlaquetas;
    private javax.swing.JTextField TxtPlaquetas1;
    private javax.swing.JTextField TxtVCM;
    private javax.swing.JTextField TxtVCM1;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton34;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

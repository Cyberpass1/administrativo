/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Procesos.JLabexamenes;

import Clases.Encriptar;
import Clases.EnlaceBd;
import Clases.JCPacientes;
import Clases.JPacientesDao;
import Clases.Jlab_auditorias;
import Clases.PdfVO;
import Clases.Validar;
import Menu.Mprincipal;
import Clases.PdfDAO1;
import Clases.Tabla_PdfVO;
import Clases.Temporal;
import Clases.labEstudiosBdDao;
import Clases.sql;
import Clases.updateLaboratorio;
import Clases.updateLaboratorioDao;
import Consultas.ConsultaLaboratorio;
import Procesos.JLaboratorio;
import Registros.JPacientes;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FCGinebraI
 */
public class JCompleto extends javax.swing.JInternalFrame {

    /**
     * Creates new form JERutina
     */
    public JCompleto() {
    initComponents();
    ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
    informacionpdf();
    MaxIdestudios();
    this.JRMasculino.setSelected(true);
    JPregistro.setVisible(false);
    BtnAgregar.setVisible(false);
   
    CallReferencia();
    JradioPerfil.setSelected(true);

    }
     
    
    
 String  empresa, rif, ubicacion, telefonos, piepagina;
   public void informacionpdf() {

   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
   
        try {

            String sql = "select * from tableinfopdfs";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                empresa = rs.getString("nombrempresa");
                rif = rs.getString("rif");
                ubicacion = rs.getString("ubicacion");
                telefonos = rs.getString("telefonos");
                piepagina = rs.getString("infopiepagina");
               
            }

        } catch (Exception e) {System.out.println(e);
        }
        finally {
            closeResources(rs, ps, con);
        }
    }
    
    
    
    
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        BtnAgregar = new javax.swing.JButton();
        BtnCancelar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        JPregistro = new javax.swing.JPanel();
        TXTPnombre = new javax.swing.JTextField();
        TXTPcorreo = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        JRMasculino = new javax.swing.JRadioButton();
        JRfemenino = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TXTPdireccion = new javax.swing.JTextArea();
        FechaNacimiento = new com.toedter.calendar.JDateChooser();
        TXTPtelefono = new javax.swing.JFormattedTextField();
        TXTPapellido = new javax.swing.JTextField();
        TXTPcedula = new javax.swing.JTextField();
        BtnSearch = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        FechaAc8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jButton34 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        HEPATITISA_IGM = new javax.swing.JTextField();
        T3L_REACTIVA = new javax.swing.JTextField();
        TS4_BIOME = new javax.swing.JTextField();
        TS3_BIOME = new javax.swing.JTextField();
        TSH_BIOME = new javax.swing.JTextField();
        T4L_RJL = new javax.swing.JTextField();
        TL3_RJL = new javax.swing.JTextField();
        TSH_RJL = new javax.swing.JTextField();
        T4L_REACTIVA = new javax.swing.JTextField();
        PROGESTERONA = new javax.swing.JTextField();
        INSULINA_POSTINMUKIT = new javax.swing.JTextField();
        INSULINA_INMU = new javax.swing.JTextField();
        INSULITA_POSTREACTIVA = new javax.swing.JTextField();
        INSULINA_REACTIVO = new javax.swing.JTextField();
        INSULITA_POSTBIOME = new javax.swing.JTextField();
        INSULINA_BIOME = new javax.swing.JTextField();
        T4T_AUTOBIO = new javax.swing.JTextField();
        T3T_AUTOBIO = new javax.swing.JTextField();
        FSH_BIOME = new javax.swing.JTextField();
        PSAL_BIOME = new javax.swing.JTextField();
        ESTRADIOL = new javax.swing.JTextField();
        PROLACTINA = new javax.swing.JTextField();
        HEMOGLOBINA = new javax.swing.JTextField();
        PSAT_BIOME = new javax.swing.JTextField();
        IGM_BIOME = new javax.swing.JTextField();
        IGG_BIOME = new javax.swing.JTextField();
        HEPATITISC = new javax.swing.JTextField();
        HEPATITISB_BIOME = new javax.swing.JTextField();
        HEPATITISB = new javax.swing.JTextField();
        LH_BIOME = new javax.swing.JTextField();
        FERRITINA_BIOME = new javax.swing.JTextField();
        RAZON_PSA = new javax.swing.JTextField();
        PYLOTY_IGM = new javax.swing.JTextField();
        PYLORI_IGG = new javax.swing.JTextField();
        TROPONINA_BIOME = new javax.swing.JTextField();
        HEPATITISB1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        JtextObservaciones = new javax.swing.JTextArea();
        DENGUEIGG = new javax.swing.JTextField();
        DENGUEIGM = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        TSH_RJL1 = new javax.swing.JTextField();
        TL3_RJL1 = new javax.swing.JTextField();
        T4L_RJL1 = new javax.swing.JTextField();
        TSH_BIOME1 = new javax.swing.JTextField();
        TS3_BIOME1 = new javax.swing.JTextField();
        TS4_BIOME1 = new javax.swing.JTextField();
        T3L_REACTIVA1 = new javax.swing.JTextField();
        T4L_REACTIVA1 = new javax.swing.JTextField();
        INSULINA_POSTINMUKIT1 = new javax.swing.JTextField();
        INSULINA_INMU1 = new javax.swing.JTextField();
        INSULITA_POSTREACTIVA1 = new javax.swing.JTextField();
        INSULINA_REACTIVOD = new javax.swing.JTextField();
        INSULITA_POSTBIOME1 = new javax.swing.JTextField();
        INSULINA_BIOME1 = new javax.swing.JTextField();
        T4T_AUTOBIO1 = new javax.swing.JTextField();
        T3T_AUTOBIO1 = new javax.swing.JTextField();
        INSULINA_REACTIVON = new javax.swing.JTextField();
        INSULINA_REACTIVOA = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        LFFOLICULAR = new javax.swing.JTextField();
        LHLUTEA = new javax.swing.JTextField();
        LHCICLO = new javax.swing.JTextField();
        LHPOSMENOSPAUSIA = new javax.swing.JTextField();
        LHPREPUBERTAD = new javax.swing.JTextField();
        LHHOMBREADOLESCENTE = new javax.swing.JTextField();
        LHHOMBREADULTO1 = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        FSHFOLICULARB = new javax.swing.JTextField();
        FSHLUTEAB = new javax.swing.JTextField();
        FSHCICLOB = new javax.swing.JTextField();
        FSHPOSTMENOSPAUSIAB = new javax.swing.JTextField();
        FSHHOMBRESB = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        PROGEPOSMENOSPAUSIA = new javax.swing.JTextField();
        PROGECICLO = new javax.swing.JTextField();
        PROGELUTEA = new javax.swing.JTextField();
        PROGFOLICULAR = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        RAZONPSA = new javax.swing.JTextField();
        PSAL = new javax.swing.JTextField();
        PSAT = new javax.swing.JTextField();
        HEPAigm = new javax.swing.JTextField();
        TOXOigg = new javax.swing.JTextField();
        TOXOigm = new javax.swing.JTextField();
        NODIABETICO = new javax.swing.JTextField();
        SuperficieHepatitisB2 = new javax.swing.JTextField();
        SUPERFhepatitisB = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        PROnoembarazo = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        FERRmujer = new javax.swing.JTextField();
        FERRhombre = new javax.swing.JTextField();
        FERRnacidos = new javax.swing.JTextField();
        FERRkids = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        IGMpositivo = new javax.swing.JTextField();
        TIGMindeterminado = new javax.swing.JTextField();
        TIGMnegativo = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        IGGpositivo = new javax.swing.JTextField();
        TIGGindeterminado = new javax.swing.JTextField();
        TIGGnegativo = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        ESfase = new javax.swing.JTextField();
        EStardia = new javax.swing.JTextField();
        ESovulacion = new javax.swing.JTextField();
        ESpostmenop = new javax.swing.JTextField();
        ESpubertad = new javax.swing.JTextField();
        ESembarazo = new javax.swing.JTextField();
        jButton21 = new javax.swing.JButton();
        COREHEPATITISB = new javax.swing.JTextField();
        HEPATITISC1 = new javax.swing.JTextField();
        TROPONINA1 = new javax.swing.JTextField();
        DIABETICO = new javax.swing.JTextField();
        DENGUEIGM2 = new javax.swing.JTextField();
        DENGUEIGG2 = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        TSH_RJL2 = new javax.swing.JTextField();
        TL3_RJL2 = new javax.swing.JTextField();
        T4L_RJL2 = new javax.swing.JTextField();
        TSH_BIOME2 = new javax.swing.JTextField();
        TS3_BIOME2 = new javax.swing.JTextField();
        TS4_BIOME2 = new javax.swing.JTextField();
        T3L_REACTIVA2 = new javax.swing.JTextField();
        T4L_REACTIVA2 = new javax.swing.JTextField();
        INSULINA_POSTINMUKIT2 = new javax.swing.JTextField();
        INSULINA_INMU2 = new javax.swing.JTextField();
        INSULITA_POSTREACTIVA2 = new javax.swing.JTextField();
        INSULINA_REACTIVO1 = new javax.swing.JTextField();
        INSULITA_POSTBIOME2 = new javax.swing.JTextField();
        INSULINA_BIOME2 = new javax.swing.JTextField();
        T4T_AUTOBIO2 = new javax.swing.JTextField();
        T3T_AUTOBIO2 = new javax.swing.JTextField();
        FSH_BIOME1 = new javax.swing.JTextField();
        LH_BIOME1 = new javax.swing.JTextField();
        PROGESTERONA1 = new javax.swing.JTextField();
        ESTRADIOL1 = new javax.swing.JTextField();
        PROLACTINA1 = new javax.swing.JTextField();
        PSAL_BIOME1 = new javax.swing.JTextField();
        PSAT_BIOME1 = new javax.swing.JTextField();
        RAZON_PSA1 = new javax.swing.JTextField();
        HEPATITISC2 = new javax.swing.JTextField();
        HEPATITISB2 = new javax.swing.JTextField();
        HEPATITISB3 = new javax.swing.JTextField();
        HEPATITISB_BIOME1 = new javax.swing.JTextField();
        HEPATITISA_IGM1 = new javax.swing.JTextField();
        IGG_BIOME1 = new javax.swing.JTextField();
        IGM_BIOME1 = new javax.swing.JTextField();
        FERRITINA_BIOME1 = new javax.swing.JTextField();
        PYLOTY_IGM1 = new javax.swing.JTextField();
        PYLORI_IGG1 = new javax.swing.JTextField();
        TROPONINA_BIOME1 = new javax.swing.JTextField();
        HEMOGLOBINA1 = new javax.swing.JTextField();
        DENGUEIGM1 = new javax.swing.JTextField();
        DENGUEIGG1 = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        JradioPerfil = new javax.swing.JRadioButton();
        Jradioreferencias = new javax.swing.JRadioButton();
        Jradioreferencias1 = new javax.swing.JRadioButton();
        Jradioreferencias2 = new javax.swing.JRadioButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BtnAgregar.setText("Agregar");
        BtnAgregar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnAgregar.setContentAreaFilled(false);
        BtnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 120, 30));

        BtnCancelar.setText("NUEVO");
        BtnCancelar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnCancelar.setContentAreaFilled(false);
        BtnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 120, 30));

        jPanel9.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 570, 300, 50));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane1.setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JPregistro.setBackground(new java.awt.Color(255, 255, 255));
        JPregistro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTPnombre.setEditable(false);
        TXTPnombre.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre")));
        TXTPnombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPnombreActionPerformed(evt);
            }
        });
        TXTPnombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPnombreKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPnombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 120, 50));

        TXTPcorreo.setEditable(false);
        TXTPcorreo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Correo"));
        TXTPcorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPcorreoKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPcorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 120, 50));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Sexo"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JRMasculino.setBackground(new java.awt.Color(255, 255, 255));
        JRMasculino.setText("Masculino");
        JRMasculino.setEnabled(false);
        JRMasculino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRMasculinoActionPerformed(evt);
            }
        });
        jPanel5.add(JRMasculino, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        JRfemenino.setBackground(new java.awt.Color(255, 255, 255));
        JRfemenino.setText("Femenino");
        JRfemenino.setEnabled(false);
        JRfemenino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRfemeninoActionPerformed(evt);
            }
        });
        jPanel5.add(JRfemenino, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, -1, -1));

        JPregistro.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 250, 50));

        TXTPdireccion.setEditable(false);
        TXTPdireccion.setColumns(20);
        TXTPdireccion.setLineWrap(true);
        TXTPdireccion.setRows(5);
        TXTPdireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Dirección"));
        TXTPdireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPdireccionKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(TXTPdireccion);

        JPregistro.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 250, 130));

        FechaNacimiento.setBackground(new java.awt.Color(255, 255, 255));
        FechaNacimiento.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha de Nacimiento"));
        FechaNacimiento.setToolTipText("");
        FechaNacimiento.setEnabled(false);
        FechaNacimiento.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        JPregistro.add(FechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 250, 50));

        TXTPtelefono.setEditable(false);
        TXTPtelefono.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Telefono"));
        try {
            TXTPtelefono.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        TXTPtelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPtelefonoActionPerformed(evt);
            }
        });
        JPregistro.add(TXTPtelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 120, 50));

        TXTPapellido.setEditable(false);
        TXTPapellido.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Apellido"));
        TXTPapellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPapellidoActionPerformed(evt);
            }
        });
        TXTPapellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPapellidoKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPapellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 120, 50));

        jPanel1.add(JPregistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 290, -1));

        TXTPcedula.setText("V-");
        TXTPcedula.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cédula"));
        TXTPcedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPcedulaActionPerformed(evt);
            }
        });
        TXTPcedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyTyped(evt);
            }
        });
        jPanel1.add(TXTPcedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 180, 50));

        BtnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/magnifier-1_icon-icons.com_56924.png"))); // NOI18N
        BtnSearch.setBorderPainted(false);
        BtnSearch.setContentAreaFilled(false);
        BtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(BtnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, 50, 50));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 400, 20));
        jPanel1.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 290, 20));
        jPanel1.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 400, 20));

        FechaAc8.setBackground(new java.awt.Color(0, 0, 0));
        FechaAc8.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        FechaAc8.setText("                         P A C I E N T E ");
        jPanel1.add(FechaAc8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, 20));

        jTabbedPane1.addTab("tab1", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "PACIENTE", "CEDULA", "EDAD", "SEXO", "CORREO", "ESTUDIO"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 370, 450));

        jTabbedPane1.addTab("tab2", jPanel2);

        jPanel9.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 300, 590));

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton34.setText("Generar");
        jButton34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton34.setContentAreaFilled(false);
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton34ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton34, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, 130, 30));

        jButton20.setText("Cancelar");
        jButton20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton20.setContentAreaFilled(false);
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton20, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 130, 30));

        jPanel9.add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 570, 700, 50));

        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane2.setEnabled(false);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Estudios"));
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        HEPATITISA_IGM.setToolTipText("HEPATITIS A IGM (BIOME)");
        HEPATITISA_IGM.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "HEPATITIS A IGM"));
        HEPATITISA_IGM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEPATITISA_IGMKeyTyped(evt);
            }
        });
        jPanel10.add(HEPATITISA_IGM, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 150, 140, 40));

        T3L_REACTIVA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3L (REACTIVA)"));
        T3L_REACTIVA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T3L_REACTIVAActionPerformed(evt);
            }
        });
        T3L_REACTIVA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                T3L_REACTIVAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T3L_REACTIVAKeyTyped(evt);
            }
        });
        jPanel10.add(T3L_REACTIVA, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 110, 40));

        TS4_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4L (BIOME)"));
        TS4_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TS4_BIOMEKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TS4_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(TS4_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 110, 40));

        TS3_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3L (BIOME)"));
        TS3_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TS3_BIOMEKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TS3_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(TS3_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 110, 40));

        TSH_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "TSH (BIOME)"));
        TSH_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TSH_BIOMEKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TSH_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(TSH_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 110, 40));

        T4L_RJL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4L (RJL)"));
        T4L_RJL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                T4L_RJLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T4L_RJLKeyTyped(evt);
            }
        });
        jPanel10.add(T4L_RJL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 110, 40));

        TL3_RJL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3L (RJL)"));
        TL3_RJL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TL3_RJLActionPerformed(evt);
            }
        });
        TL3_RJL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TL3_RJLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TL3_RJLKeyTyped(evt);
            }
        });
        jPanel10.add(TL3_RJL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 110, 40));

        TSH_RJL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "TSH (RJL)"));
        TSH_RJL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TSH_RJLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TSH_RJLKeyTyped(evt);
            }
        });
        jPanel10.add(TSH_RJL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 110, 40));

        T4L_REACTIVA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4L (REACTIVA)"));
        T4L_REACTIVA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                T4L_REACTIVAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T4L_REACTIVAKeyTyped(evt);
            }
        });
        jPanel10.add(T4L_REACTIVA, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 110, 40));

        PROGESTERONA.setToolTipText("PROGESTERONA (BIOME)");
        PROGESTERONA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PROGESTERONA (BIOME)"));
        PROGESTERONA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PROGESTERONAKeyTyped(evt);
            }
        });
        jPanel10.add(PROGESTERONA, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 110, 110, 40));

        INSULINA_POSTINMUKIT.setToolTipText("INSULINA POST. PANDRIAL (RJL)");
        INSULINA_POSTINMUKIT.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA POST. PANDRIAL (RJL)"));
        INSULINA_POSTINMUKIT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_POSTINMUKITKeyTyped(evt);
            }
        });
        jPanel10.add(INSULINA_POSTINMUKIT, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 310, 110, 40));

        INSULINA_INMU.setToolTipText("INSULINA (RJL)");
        INSULINA_INMU.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA (RJL)"));
        INSULINA_INMU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INSULINA_INMUActionPerformed(evt);
            }
        });
        INSULINA_INMU.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                INSULINA_INMUKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_INMUKeyTyped(evt);
            }
        });
        jPanel10.add(INSULINA_INMU, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, 110, 40));

        INSULITA_POSTREACTIVA.setToolTipText("INSULINA POST. PANDRIAL (REACTIVA)");
        INSULITA_POSTREACTIVA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA POST. PANDRIAL (REACTIVA)"));
        INSULITA_POSTREACTIVA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULITA_POSTREACTIVAKeyTyped(evt);
            }
        });
        jPanel10.add(INSULITA_POSTREACTIVA, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 230, 110, 40));

        INSULINA_REACTIVO.setToolTipText("INSULINA (REACTIVA)");
        INSULINA_REACTIVO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA (REACTIVA)"));
        INSULINA_REACTIVO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                INSULINA_REACTIVOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_REACTIVOKeyTyped(evt);
            }
        });
        jPanel10.add(INSULINA_REACTIVO, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 110, 40));

        INSULITA_POSTBIOME.setToolTipText("INSULINA POST. PANDRIAL (BIOME)");
        INSULITA_POSTBIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA POST. PANDRIAL (BIOME)"));
        INSULITA_POSTBIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                INSULITA_POSTBIOMEKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULITA_POSTBIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(INSULITA_POSTBIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, 110, 40));

        INSULINA_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA (BIOME)"));
        INSULINA_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                INSULINA_BIOMEKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(INSULINA_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 110, 40));

        T4T_AUTOBIO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4T (AUTOBIO)"));
        T4T_AUTOBIO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T4T_AUTOBIOActionPerformed(evt);
            }
        });
        T4T_AUTOBIO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                T4T_AUTOBIOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T4T_AUTOBIOKeyTyped(evt);
            }
        });
        jPanel10.add(T4T_AUTOBIO, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 110, 40));

        T3T_AUTOBIO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3T (AUTOBIO)"));
        T3T_AUTOBIO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                T3T_AUTOBIOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T3T_AUTOBIOKeyTyped(evt);
            }
        });
        jPanel10.add(T3T_AUTOBIO, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 110, 40));

        FSH_BIOME.setToolTipText("HORMONA FOLICULO ESTIMULANTE (FSH BIOME) ");
        FSH_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "FSH (BIOME)"));
        FSH_BIOME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSH_BIOMEActionPerformed(evt);
            }
        });
        FSH_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FSH_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(FSH_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, 110, 40));

        PSAL_BIOME.setToolTipText("ANTIGENO PROSTATICO LIBRE (PSAL)\t");
        PSAL_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PSAL (BIOME)"));
        PSAL_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PSAL_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(PSAL_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 230, 110, 40));

        ESTRADIOL.setToolTipText("ESTRADIOL (BIOME)");
        ESTRADIOL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ESTRADIOL (BIOME)"));
        ESTRADIOL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ESTRADIOLKeyTyped(evt);
            }
        });
        jPanel10.add(ESTRADIOL, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 150, 110, 40));

        PROLACTINA.setToolTipText("PROLACTINA (BIOME)");
        PROLACTINA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PROLACTINA (BIOME)"));
        PROLACTINA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PROLACTINAKeyTyped(evt);
            }
        });
        jPanel10.add(PROLACTINA, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 190, 110, 40));

        HEMOGLOBINA.setToolTipText("HEMOGLOBINA GLICOSILADA (HbA1c ABBOTT) ");
        HEMOGLOBINA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "HEMOGLOBINA GLICOSILADA (HbA1c)"));
        HEMOGLOBINA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEMOGLOBINAKeyTyped(evt);
            }
        });
        jPanel10.add(HEMOGLOBINA, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 150, 140, 40));

        PSAT_BIOME.setToolTipText("ANTIGENO PROSTATICO TOTAL (PSAT BIOME)");
        PSAT_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PSAT (BIOME)"));
        PSAT_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PSAT_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(PSAT_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 270, 110, 40));

        IGM_BIOME.setToolTipText("Ac. ANTI-Toxoplasma gondii IGM (BIOME)");
        IGM_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANTI-Toxoplasma IGM (BIOME)"));
        IGM_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                IGM_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(IGM_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, 140, 40));

        IGG_BIOME.setToolTipText("Ac. ANTI-Toxoplasma gondii IGG (BIOME)");
        IGG_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANTI-Toxoplasma IGM (BIOME)"));
        IGG_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                IGG_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(IGG_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 110, 140, 40));

        HEPATITISC.setToolTipText("Ags. DE HEPATITIS C");
        HEPATITISC.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "HEPATITIS C"));
        HEPATITISC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEPATITISCKeyTyped(evt);
            }
        });
        jPanel10.add(HEPATITISC, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 310, 140, 40));

        HEPATITISB_BIOME.setToolTipText("Ags. DE SUPERFICIE DE HEPATITIS B (BIOME)");
        HEPATITISB_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "SUPERFICIE HEPATITIS B"));
        HEPATITISB_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEPATITISB_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(HEPATITISB_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 190, 140, 40));

        HEPATITISB.setToolTipText("Ags. DE SUPERFICIE DE HEPATITIS B");
        HEPATITISB.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "SUPERFICIE HEPATITIS B"));
        HEPATITISB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEPATITISBKeyTyped(evt);
            }
        });
        jPanel10.add(HEPATITISB, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 230, 140, 40));

        LH_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "LH (BIOME)"));
        LH_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LH_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(LH_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 70, 110, 40));

        FERRITINA_BIOME.setToolTipText("FERRITINA (BIOME)");
        FERRITINA_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "FERRITINA (BIOME)"));
        FERRITINA_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FERRITINA_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(FERRITINA_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 140, 40));

        RAZON_PSA.setToolTipText("RAZÓN PSA LIBRE Y TOTAL");
        RAZON_PSA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "RAZÓN PSA LIBRE Y TOTAL"));
        RAZON_PSA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                RAZON_PSAKeyTyped(evt);
            }
        });
        jPanel10.add(RAZON_PSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 310, 110, 40));

        PYLOTY_IGM.setToolTipText("Ac. ANTI-Helicobacter pylori IGM (BIOME)");
        PYLOTY_IGM.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANTI-Helicobacter pylori IGM"));
        PYLOTY_IGM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PYLOTY_IGMKeyTyped(evt);
            }
        });
        jPanel10.add(PYLOTY_IGM, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 30, 140, 40));

        PYLORI_IGG.setToolTipText("Ac. ANTI- Helicobacter pylori IGG (BIOME)");
        PYLORI_IGG.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANTI- Helicobacter"));
        PYLORI_IGG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PYLORI_IGGKeyTyped(evt);
            }
        });
        jPanel10.add(PYLORI_IGG, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, 140, 40));

        TROPONINA_BIOME.setToolTipText("TROPONINA (BIOME)");
        TROPONINA_BIOME.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "TROPONINA (BIOME)"));
        TROPONINA_BIOME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TROPONINA_BIOMEKeyTyped(evt);
            }
        });
        jPanel10.add(TROPONINA_BIOME, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 110, 140, 40));

        HEPATITISB1.setToolTipText("Ac. ANTI-CORE DE HEPATITIS B");
        HEPATITISB1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANTI-CORE HEPATITIS B\t"));
        HEPATITISB1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEPATITISB1KeyTyped(evt);
            }
        });
        jPanel10.add(HEPATITISB1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 270, 140, 40));

        JtextObservaciones.setColumns(20);
        JtextObservaciones.setLineWrap(true);
        JtextObservaciones.setRows(5);
        JtextObservaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Observaciones"));
        jScrollPane3.setViewportView(JtextObservaciones);

        jPanel10.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 650, 110));

        DENGUEIGG.setToolTipText("Ac. ANTI-DENGUE IGG ");
        DENGUEIGG.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ac. ANTI-DENGUE IGG"));
        DENGUEIGG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DENGUEIGGKeyTyped(evt);
            }
        });
        jPanel10.add(DENGUEIGG, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 230, 140, 40));

        DENGUEIGM.setToolTipText("Ac. ANTI-DENGUE IGM");
        DENGUEIGM.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ac. ANTI-DENGUE IGM"));
        DENGUEIGM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DENGUEIGMKeyTyped(evt);
            }
        });
        jPanel10.add(DENGUEIGM, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 190, 140, 40));

        jPanel4.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 690, 500));
        jPanel4.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        jTabbedPane2.addTab("Perfil 20", jPanel4);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TSH_RJL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "TSH (RJL)"));
        TSH_RJL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TSH_RJL1KeyTyped(evt);
            }
        });
        jPanel11.add(TSH_RJL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 120, 40));

        TL3_RJL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3L (RJL)"));
        TL3_RJL1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TL3_RJL1ActionPerformed(evt);
            }
        });
        TL3_RJL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TL3_RJL1KeyTyped(evt);
            }
        });
        jPanel11.add(TL3_RJL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 120, 40));

        T4L_RJL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4L (RJL)"));
        T4L_RJL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T4L_RJL1KeyTyped(evt);
            }
        });
        jPanel11.add(T4L_RJL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 120, 40));

        TSH_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "TSH (BIOME)"));
        TSH_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TSH_BIOME1KeyTyped(evt);
            }
        });
        jPanel11.add(TSH_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 120, 40));

        TS3_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3L (BIOME)"));
        TS3_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TS3_BIOME1KeyTyped(evt);
            }
        });
        jPanel11.add(TS3_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 120, 40));

        TS4_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4L (BIOME)"));
        TS4_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TS4_BIOME1KeyTyped(evt);
            }
        });
        jPanel11.add(TS4_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 120, 40));

        T3L_REACTIVA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3L (REACTIVA)"));
        T3L_REACTIVA1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T3L_REACTIVA1ActionPerformed(evt);
            }
        });
        T3L_REACTIVA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T3L_REACTIVA1KeyTyped(evt);
            }
        });
        jPanel11.add(T3L_REACTIVA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 120, 40));

        T4L_REACTIVA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4T (REACTIVA)"));
        T4L_REACTIVA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T4L_REACTIVA1KeyTyped(evt);
            }
        });
        jPanel11.add(T4L_REACTIVA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 120, 40));

        INSULINA_POSTINMUKIT1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        INSULINA_POSTINMUKIT1.setToolTipText("INSULINA POST. PANDRIAL (INMUKIT)");
        INSULINA_POSTINMUKIT1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA POST. PANDRIAL (INMUKIT)"));
        INSULINA_POSTINMUKIT1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_POSTINMUKIT1KeyTyped(evt);
            }
        });
        jPanel11.add(INSULINA_POSTINMUKIT1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 410, 120, 40));

        INSULINA_INMU1.setToolTipText("INSULINA (INMUKIT)");
        INSULINA_INMU1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA (INMUKIT)"));
        INSULINA_INMU1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INSULINA_INMU1ActionPerformed(evt);
            }
        });
        INSULINA_INMU1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_INMU1KeyTyped(evt);
            }
        });
        jPanel11.add(INSULINA_INMU1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, 120, 40));

        INSULITA_POSTREACTIVA1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        INSULITA_POSTREACTIVA1.setToolTipText("INSULINA POST. PANDRIAL (REACTIVA)");
        INSULITA_POSTREACTIVA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA POST. PANDRIAL (REACTIVA)"));
        INSULITA_POSTREACTIVA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULITA_POSTREACTIVA1KeyTyped(evt);
            }
        });
        jPanel11.add(INSULITA_POSTREACTIVA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 310, 120, 40));

        INSULINA_REACTIVOD.setToolTipText("INSULINA DIABETICOS TIPO II (REACTIVA)");
        INSULINA_REACTIVOD.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA DIABETICO (REACTIVA)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        INSULINA_REACTIVOD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_REACTIVODKeyTyped(evt);
            }
        });
        jPanel11.add(INSULINA_REACTIVOD, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 120, 40));

        INSULITA_POSTBIOME1.setToolTipText("INSULINA POST. PANDRIAL (BIOME)");
        INSULITA_POSTBIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA POST. PANDRIAL (BIOME)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        INSULITA_POSTBIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULITA_POSTBIOME1KeyTyped(evt);
            }
        });
        jPanel11.add(INSULITA_POSTBIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 120, 40));

        INSULINA_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA (BIOME)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        INSULINA_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_BIOME1KeyTyped(evt);
            }
        });
        jPanel11.add(INSULINA_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 120, 40));

        T4T_AUTOBIO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4T (AUTOBIO)"));
        T4T_AUTOBIO1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T4T_AUTOBIO1ActionPerformed(evt);
            }
        });
        T4T_AUTOBIO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T4T_AUTOBIO1KeyTyped(evt);
            }
        });
        jPanel11.add(T4T_AUTOBIO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 120, 40));

        T3T_AUTOBIO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3T (AUTOBIO)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        T3T_AUTOBIO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T3T_AUTOBIO1KeyTyped(evt);
            }
        });
        jPanel11.add(T3T_AUTOBIO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 120, 40));

        INSULINA_REACTIVON.setToolTipText("INSULINA NIÑOS (REACTIVA)");
        INSULINA_REACTIVON.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA NIÑOS (REACTIVA)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        INSULINA_REACTIVON.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_REACTIVONKeyTyped(evt);
            }
        });
        jPanel11.add(INSULINA_REACTIVON, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 160, 120, 40));

        INSULINA_REACTIVOA.setToolTipText("INSULINA ADULTOS (REACTIVA)");
        INSULINA_REACTIVOA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA ADULTOS (REACTIVA)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        INSULINA_REACTIVOA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_REACTIVOAKeyTyped(evt);
            }
        });
        jPanel11.add(INSULINA_REACTIVOA, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, 120, 40));

        jPanel17.setBackground(new java.awt.Color(255, 255, 255));
        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("LH_BIOME"));
        jPanel17.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LFFOLICULAR.setToolTipText("Fase Folicular");
        LFFOLICULAR.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fase Folicular"));
        LFFOLICULAR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LFFOLICULARKeyTyped(evt);
            }
        });
        jPanel17.add(LFFOLICULAR, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 110, 40));

        LHLUTEA.setToolTipText("Fase Lutea");
        LHLUTEA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fase Lutea"));
        LHLUTEA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LHLUTEAKeyTyped(evt);
            }
        });
        jPanel17.add(LHLUTEA, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 110, 40));

        LHCICLO.setToolTipText("Mitad de Ciclo");
        LHCICLO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Mitad de Ciclo"));
        LHCICLO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LHCICLOKeyTyped(evt);
            }
        });
        jPanel17.add(LHCICLO, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 110, 40));

        LHPOSMENOSPAUSIA.setToolTipText("Postmenopausia");
        LHPOSMENOSPAUSIA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Postmenopausia"));
        LHPOSMENOSPAUSIA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LHPOSMENOSPAUSIAKeyTyped(evt);
            }
        });
        jPanel17.add(LHPOSMENOSPAUSIA, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 110, 40));

        LHPREPUBERTAD.setToolTipText("Pre-Pubertad");
        LHPREPUBERTAD.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Pre-Pubertad"));
        LHPREPUBERTAD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LHPREPUBERTADKeyTyped(evt);
            }
        });
        jPanel17.add(LHPREPUBERTAD, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 110, 40));

        LHHOMBREADOLESCENTE.setToolTipText("Hombre Pre-Pubertad");
        LHHOMBREADOLESCENTE.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hombre Pre-Pubertad"));
        LHHOMBREADOLESCENTE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LHHOMBREADOLESCENTEKeyTyped(evt);
            }
        });
        jPanel17.add(LHHOMBREADOLESCENTE, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 110, 40));

        LHHOMBREADULTO1.setToolTipText("Hombre Adulto");
        LHHOMBREADULTO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hombre Adulto"));
        LHHOMBREADULTO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LHHOMBREADULTO1KeyTyped(evt);
            }
        });
        jPanel17.add(LHHOMBREADULTO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 110, 40));

        jPanel11.add(jPanel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 130, 460));

        jPanel21.setBackground(new java.awt.Color(255, 255, 255));
        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("FSH_BIOME"));
        jPanel21.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FSHFOLICULARB.setToolTipText("Fase Folicular");
        FSHFOLICULARB.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fase Folicular"));
        FSHFOLICULARB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FSHFOLICULARBKeyTyped(evt);
            }
        });
        jPanel21.add(FSHFOLICULARB, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 110, 40));

        FSHLUTEAB.setToolTipText("Fase Lutea");
        FSHLUTEAB.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fase Lutea"));
        FSHLUTEAB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FSHLUTEABKeyTyped(evt);
            }
        });
        jPanel21.add(FSHLUTEAB, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 110, 40));

        FSHCICLOB.setToolTipText("Mitad de Ciclo");
        FSHCICLOB.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Mitad de Ciclo"));
        FSHCICLOB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FSHCICLOBKeyTyped(evt);
            }
        });
        jPanel21.add(FSHCICLOB, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 110, 40));

        FSHPOSTMENOSPAUSIAB.setToolTipText("Postmenopausia");
        FSHPOSTMENOSPAUSIAB.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Postmenopausia"));
        FSHPOSTMENOSPAUSIAB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FSHPOSTMENOSPAUSIABKeyTyped(evt);
            }
        });
        jPanel21.add(FSHPOSTMENOSPAUSIAB, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 110, 40));

        FSHHOMBRESB.setToolTipText("Postmenopausia");
        FSHHOMBRESB.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hombres"));
        FSHHOMBRESB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FSHHOMBRESBKeyTyped(evt);
            }
        });
        jPanel21.add(FSHHOMBRESB, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 110, 40));

        jPanel11.add(jPanel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, 130, 460));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Progestosterona biome"));
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PROGEPOSMENOSPAUSIA.setToolTipText("Postmenopausia");
        PROGEPOSMENOSPAUSIA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Postmenopausia"));
        PROGEPOSMENOSPAUSIA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PROGEPOSMENOSPAUSIAKeyTyped(evt);
            }
        });
        jPanel8.add(PROGEPOSMENOSPAUSIA, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 110, 40));

        PROGECICLO.setToolTipText("Mitad de Ciclo");
        PROGECICLO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Mitad de Ciclo"));
        PROGECICLO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PROGECICLOKeyTyped(evt);
            }
        });
        jPanel8.add(PROGECICLO, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 110, 40));

        PROGELUTEA.setToolTipText("Fase Lutea");
        PROGELUTEA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fase Lutea"));
        PROGELUTEA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PROGELUTEAKeyTyped(evt);
            }
        });
        jPanel8.add(PROGELUTEA, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 110, 40));

        PROGFOLICULAR.setToolTipText("Fase Folicular");
        PROGFOLICULAR.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fase Folicular"));
        PROGFOLICULAR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PROGFOLICULARKeyTyped(evt);
            }
        });
        jPanel8.add(PROGFOLICULAR, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 110, 40));

        jPanel11.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, 130, 460));

        jPanel7.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 690, 480));

        jTabbedPane2.addTab("Referencias", jPanel7);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        RAZONPSA.setText("> 14");
        RAZONPSA.setToolTipText("RAZÓN PSA LIBRE Y TOTAL");
        RAZONPSA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "RAZÓN PSA LIBRE Y TOTAL"));
        jPanel6.add(RAZONPSA, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 290, 160, 40));

        PSAL.setToolTipText("ANTIGENO PROSTATICO LIBRE (PSAL)\tBIOME");
        PSAL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PSAL"));
        jPanel6.add(PSAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 210, 160, 40));

        PSAT.setText("0,0 – 4,0");
        PSAT.setToolTipText("ANTIGENO PROSTATICO TOTAL (PSAT)");
        PSAT.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PSAT"));
        jPanel6.add(PSAT, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 250, 160, 40));

        HEPAigm.setText("Positivo > 1,00");
        HEPAigm.setToolTipText("Ac. ANTI-HEPATITIS A IGM");
        HEPAigm.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ac. ANTI-HEPATITIS A IGM"));
        jPanel6.add(HEPAigm, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 420, 160, 40));

        TOXOigg.setToolTipText("Ac. ANTI-Toxoplasma gondii IGG");
        TOXOigg.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANT. Toxo. gondii IGG"));
        jPanel6.add(TOXOigg, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 370, 160, 40));

        TOXOigm.setToolTipText("Ac. ANTI-Toxoplasma gondii IGM");
        TOXOigm.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANT. Toxo. gondii IGM"));
        jPanel6.add(TOXOigm, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 330, 160, 40));

        NODIABETICO.setText("< 6,4 ");
        NODIABETICO.setToolTipText("HEMOGLOBINA GLICOSILADA (HbA1c)\t");
        NODIABETICO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "HbA1c no Diabetico"));
        jPanel6.add(NODIABETICO, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 250, 160, 40));

        SuperficieHepatitisB2.setText("Positivo/Negativo");
        SuperficieHepatitisB2.setToolTipText("Ags. DE SUPERFICIE DE HEPATITIS B\t");
        SuperficieHepatitisB2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "SUPERFICIE HEPATITIS B"));
        jPanel6.add(SuperficieHepatitisB2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 50, 160, 40));

        SUPERFhepatitisB.setText("Positivo > 1,00");
        SUPERFhepatitisB.setToolTipText("Ags. DE SUPERFICIE DE HEPATITIS B BIOME");
        SUPERFhepatitisB.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "SUPERFICIE HEPATITIS B"));
        jPanel6.add(SUPERFhepatitisB, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, 160, 40));

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));
        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Prolactina"));
        jPanel16.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PROnoembarazo.setToolTipText("Prolactina biome");
        PROnoembarazo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Biome"));
        PROnoembarazo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PROnoembarazoKeyTyped(evt);
            }
        });
        jPanel16.add(PROnoembarazo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 120, 40));

        jPanel6.add(jPanel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 150, 190));

        jPanel18.setBackground(new java.awt.Color(255, 255, 255));
        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Ferritina biome"));
        jPanel18.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        FERRmujer.setToolTipText("");
        FERRmujer.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Mujeres"));
        FERRmujer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FERRmujerKeyTyped(evt);
            }
        });
        jPanel18.add(FERRmujer, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 120, 40));

        FERRhombre.setToolTipText("");
        FERRhombre.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hombres"));
        FERRhombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FERRhombreKeyTyped(evt);
            }
        });
        jPanel18.add(FERRhombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 120, 40));

        FERRnacidos.setToolTipText("");
        FERRnacidos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Recién nacidos"));
        FERRnacidos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FERRnacidosKeyTyped(evt);
            }
        });
        jPanel18.add(FERRnacidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 120, 40));

        FERRkids.setToolTipText("Niños 6 meses 15 años");
        FERRkids.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Niños 6 meses 15 años"));
        FERRkids.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FERRkidsKeyTyped(evt);
            }
        });
        jPanel18.add(FERRkids, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 120, 40));

        jPanel6.add(jPanel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 150, 270));

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));
        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Helicobacter pylori IGM biome"));
        jPanel19.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        IGMpositivo.setToolTipText("");
        IGMpositivo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Positivo"));
        IGMpositivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                IGMpositivoKeyTyped(evt);
            }
        });
        jPanel19.add(IGMpositivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 130, 40));

        TIGMindeterminado.setToolTipText("");
        TIGMindeterminado.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Indeterminado"));
        TIGMindeterminado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TIGMindeterminadoKeyTyped(evt);
            }
        });
        jPanel19.add(TIGMindeterminado, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 130, 40));

        TIGMnegativo.setToolTipText("");
        TIGMnegativo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Negativo"));
        TIGMnegativo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TIGMnegativoKeyTyped(evt);
            }
        });
        jPanel19.add(TIGMnegativo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 130, 40));

        jPanel6.add(jPanel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 160, 180));

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));
        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Helicobacter pylori IGG biome"));
        jPanel20.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        IGGpositivo.setToolTipText("");
        IGGpositivo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Positivo"));
        IGGpositivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                IGGpositivoKeyTyped(evt);
            }
        });
        jPanel20.add(IGGpositivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 130, 40));

        TIGGindeterminado.setToolTipText("");
        TIGGindeterminado.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Indeterminado"));
        TIGGindeterminado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TIGGindeterminadoKeyTyped(evt);
            }
        });
        jPanel20.add(TIGGindeterminado, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 130, 40));

        TIGGnegativo.setToolTipText("");
        TIGGnegativo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Negativo"));
        TIGGnegativo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TIGGnegativoKeyTyped(evt);
            }
        });
        jPanel20.add(TIGGnegativo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 130, 40));

        jPanel6.add(jPanel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 160, 180));

        jPanel22.setBackground(new java.awt.Color(255, 255, 255));
        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Estradiol biome"));
        jPanel22.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ESfase.setToolTipText("Postmenopausia");
        ESfase.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fase Lutea"));
        ESfase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ESfaseKeyTyped(evt);
            }
        });
        jPanel22.add(ESfase, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 110, 40));

        EStardia.setToolTipText("Mitad de Ciclo");
        EStardia.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Tardia Folicular"));
        EStardia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                EStardiaKeyTyped(evt);
            }
        });
        jPanel22.add(EStardia, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 110, 40));

        ESovulacion.setToolTipText("Fase Lutea");
        ESovulacion.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ovulacion"));
        ESovulacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ESovulacionKeyTyped(evt);
            }
        });
        jPanel22.add(ESovulacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 110, 40));

        ESpostmenop.setToolTipText("Fase Folicular");
        ESpostmenop.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Postmenopausia"));
        ESpostmenop.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ESpostmenopKeyTyped(evt);
            }
        });
        jPanel22.add(ESpostmenop, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 110, 40));

        ESpubertad.setToolTipText("Postmenopausia");
        ESpubertad.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Pubertad"));
        ESpubertad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ESpubertadKeyTyped(evt);
            }
        });
        jPanel22.add(ESpubertad, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 110, 40));

        ESembarazo.setToolTipText("Mitad de Ciclo");
        ESembarazo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Embarazo"));
        ESembarazo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ESembarazoKeyTyped(evt);
            }
        });
        jPanel22.add(ESembarazo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 110, 40));

        jPanel6.add(jPanel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 150, 270));

        jButton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/modificar.png"))); // NOI18N
        jButton21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton21.setBorderPainted(false);
        jButton21.setContentAreaFilled(false);
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton21, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 430, 110, 30));

        COREHEPATITISB.setText("Positivo/Negativo");
        COREHEPATITISB.setToolTipText("Ac. ANTI-CORE DE HEPATITIS B");
        COREHEPATITISB.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANTI-CORE HEPATITIS B"));
        jPanel6.add(COREHEPATITISB, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 90, 160, 40));

        HEPATITISC1.setText("Positivo/Negativo");
        HEPATITISC1.setToolTipText("Ags. DE HEPATITIS C");
        HEPATITISC1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ags. DE HEPATITIS C"));
        jPanel6.add(HEPATITISC1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 130, 160, 40));

        TROPONINA1.setText("0 – 1");
        TROPONINA1.setToolTipText("TROPONINA");
        TROPONINA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "TROPONINA I"));
        jPanel6.add(TROPONINA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 170, 160, 40));

        DIABETICO.setText("> 6,4 ");
        DIABETICO.setToolTipText("HEMOGLOBINA GLICOSILADA (HbA1c)\t");
        DIABETICO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "HbA1c Diabetico"));
        jPanel6.add(DIABETICO, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 210, 160, 40));

        DENGUEIGM2.setText("Positivo/Negativo");
        DENGUEIGM2.setToolTipText("Ac. ANTI-DENGUE IGM");
        DENGUEIGM2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ac. ANTI-DENGUE IGM"));
        DENGUEIGM2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DENGUEIGM2ActionPerformed(evt);
            }
        });
        DENGUEIGM2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DENGUEIGM2KeyTyped(evt);
            }
        });
        jPanel6.add(DENGUEIGM2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 290, 160, 40));

        DENGUEIGG2.setText("Positivo/Negativo");
        DENGUEIGG2.setToolTipText("Ac. ANTI-DENGUE IGG ");
        DENGUEIGG2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ac. ANTI-DENGUE IGG"));
        DENGUEIGG2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DENGUEIGG2KeyTyped(evt);
            }
        });
        jPanel6.add(DENGUEIGG2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 330, 160, 40));

        jTabbedPane2.addTab("Referencias2", jPanel6);

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));
        jPanel15.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TSH_RJL2.setText("µUI/mL");
        TSH_RJL2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "TSH (REACTIVA)"));
        TSH_RJL2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TSH_RJL2KeyTyped(evt);
            }
        });
        jPanel15.add(TSH_RJL2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 110, 40));

        TL3_RJL2.setText("Pmol/L");
        TL3_RJL2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3L (RJL)"));
        TL3_RJL2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TL3_RJL2ActionPerformed(evt);
            }
        });
        TL3_RJL2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TL3_RJL2KeyTyped(evt);
            }
        });
        jPanel15.add(TL3_RJL2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 110, 40));

        T4L_RJL2.setText("Pmol/L");
        T4L_RJL2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4L (RJL)"));
        T4L_RJL2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T4L_RJL2KeyTyped(evt);
            }
        });
        jPanel15.add(T4L_RJL2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 110, 40));

        TSH_BIOME2.setText("µUI/mL");
        TSH_BIOME2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "TSH (BIOME)"));
        TSH_BIOME2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TSH_BIOME2KeyTyped(evt);
            }
        });
        jPanel15.add(TSH_BIOME2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 110, 40));

        TS3_BIOME2.setText("Pmol/L");
        TS3_BIOME2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3L (BIOME)"));
        TS3_BIOME2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TS3_BIOME2ActionPerformed(evt);
            }
        });
        TS3_BIOME2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TS3_BIOME2KeyTyped(evt);
            }
        });
        jPanel15.add(TS3_BIOME2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, 110, 40));

        TS4_BIOME2.setText("Pmol/L");
        TS4_BIOME2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4L (BIOME)"));
        TS4_BIOME2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TS4_BIOME2KeyTyped(evt);
            }
        });
        jPanel15.add(TS4_BIOME2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, 110, 40));

        T3L_REACTIVA2.setText("pg/mL");
        T3L_REACTIVA2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3L (REACTIVA)"));
        T3L_REACTIVA2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T3L_REACTIVA2ActionPerformed(evt);
            }
        });
        T3L_REACTIVA2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T3L_REACTIVA2KeyTyped(evt);
            }
        });
        jPanel15.add(T3L_REACTIVA2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 340, 110, 40));

        T4L_REACTIVA2.setText("ng/dL");
        T4L_REACTIVA2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4T (REACTIVA)"));
        T4L_REACTIVA2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T4L_REACTIVA2KeyTyped(evt);
            }
        });
        jPanel15.add(T4L_REACTIVA2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 110, 40));

        INSULINA_POSTINMUKIT2.setText("µUI/mL");
        INSULINA_POSTINMUKIT2.setToolTipText("INSULINA POST. PANDRIAL (INMUKIT)");
        INSULINA_POSTINMUKIT2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA POST. PANDRIAL (INMUKIT)"));
        INSULINA_POSTINMUKIT2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_POSTINMUKIT2KeyTyped(evt);
            }
        });
        jPanel15.add(INSULINA_POSTINMUKIT2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 390, 110, 40));

        INSULINA_INMU2.setText("µUI/mL");
        INSULINA_INMU2.setToolTipText("INSULINA (INMUKIT)");
        INSULINA_INMU2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA (INMUKIT)"));
        INSULINA_INMU2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INSULINA_INMU2ActionPerformed(evt);
            }
        });
        INSULINA_INMU2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_INMU2KeyTyped(evt);
            }
        });
        jPanel15.add(INSULINA_INMU2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 340, 110, 40));

        INSULITA_POSTREACTIVA2.setText("µUI/mL");
        INSULITA_POSTREACTIVA2.setToolTipText("INSULINA POST. PANDRIAL (REACTIVA)");
        INSULITA_POSTREACTIVA2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA POST. PANDRIAL (REACTIVA)"));
        INSULITA_POSTREACTIVA2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULITA_POSTREACTIVA2KeyTyped(evt);
            }
        });
        jPanel15.add(INSULITA_POSTREACTIVA2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 290, 110, 40));

        INSULINA_REACTIVO1.setText("µUI/mL");
        INSULINA_REACTIVO1.setToolTipText("INSULINA (REACTIVA)");
        INSULINA_REACTIVO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA (REACTIVA)"));
        INSULINA_REACTIVO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_REACTIVO1KeyTyped(evt);
            }
        });
        jPanel15.add(INSULINA_REACTIVO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, 110, 40));

        INSULITA_POSTBIOME2.setText("µUI/mL");
        INSULITA_POSTBIOME2.setToolTipText("INSULINA POST. PANDRIAL (BIOME)");
        INSULITA_POSTBIOME2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA POST. PANDRIAL (BIOME)"));
        INSULITA_POSTBIOME2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULITA_POSTBIOME2KeyTyped(evt);
            }
        });
        jPanel15.add(INSULITA_POSTBIOME2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 110, 40));

        INSULINA_BIOME2.setText("µUI/mL");
        INSULINA_BIOME2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INSULINA (BIOME)"));
        INSULINA_BIOME2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                INSULINA_BIOME2KeyTyped(evt);
            }
        });
        jPanel15.add(INSULINA_BIOME2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 110, 40));

        T4T_AUTOBIO2.setText("µg/dL");
        T4T_AUTOBIO2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T4T (AUTOBIO)"));
        T4T_AUTOBIO2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T4T_AUTOBIO2ActionPerformed(evt);
            }
        });
        T4T_AUTOBIO2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T4T_AUTOBIO2KeyTyped(evt);
            }
        });
        jPanel15.add(T4T_AUTOBIO2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 110, 40));

        T3T_AUTOBIO2.setText("ng/mL");
        T3T_AUTOBIO2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T3T (AUTOBIO)"));
        T3T_AUTOBIO2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                T3T_AUTOBIO2KeyTyped(evt);
            }
        });
        jPanel15.add(T3T_AUTOBIO2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, 110, 40));

        FSH_BIOME1.setText("mUI/mL");
        FSH_BIOME1.setToolTipText("HORMONA FOLICULO ESTIMULANTE (FSH BIOME) ");
        FSH_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "FSH (BIOME)"));
        FSH_BIOME1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSH_BIOME1ActionPerformed(evt);
            }
        });
        FSH_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FSH_BIOME1KeyTyped(evt);
            }
        });
        jPanel15.add(FSH_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 110, 40));

        LH_BIOME1.setText("mUI/mL");
        LH_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "LH (BIOME)"));
        LH_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LH_BIOME1KeyTyped(evt);
            }
        });
        jPanel15.add(LH_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 90, 110, 40));

        PROGESTERONA1.setText("ng/mL");
        PROGESTERONA1.setToolTipText("PROGESTERONA (BIOME)");
        PROGESTERONA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PROGESTERONA (BIOME)"));
        PROGESTERONA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PROGESTERONA1KeyTyped(evt);
            }
        });
        jPanel15.add(PROGESTERONA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 110, 40));

        ESTRADIOL1.setText("Pg/mL");
        ESTRADIOL1.setToolTipText("ESTRADIOL (BIOME)");
        ESTRADIOL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ESTRADIOL (BIOME)"));
        ESTRADIOL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ESTRADIOL1KeyTyped(evt);
            }
        });
        jPanel15.add(ESTRADIOL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 190, 110, 40));

        PROLACTINA1.setText("ng/mL");
        PROLACTINA1.setToolTipText("PROLACTINA (BIOME)");
        PROLACTINA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PROLACTINA (BIOME)"));
        PROLACTINA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PROLACTINA1KeyTyped(evt);
            }
        });
        jPanel15.add(PROLACTINA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 240, 110, 40));

        PSAL_BIOME1.setText("ng/mL");
        PSAL_BIOME1.setToolTipText("ANTIGENO PROSTATICO LIBRE (PSAL)\t");
        PSAL_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PSAL (BIOME)"));
        PSAL_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PSAL_BIOME1KeyTyped(evt);
            }
        });
        jPanel15.add(PSAL_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 290, 110, 40));

        PSAT_BIOME1.setText("ng/mL");
        PSAT_BIOME1.setToolTipText("ANTIGENO PROSTATICO TOTAL (PSAT BIOME)");
        PSAT_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PSAT (BIOME)"));
        PSAT_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PSAT_BIOME1KeyTyped(evt);
            }
        });
        jPanel15.add(PSAT_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 340, 110, 40));

        RAZON_PSA1.setText("%");
        RAZON_PSA1.setToolTipText("RAZÓN PSA LIBRE Y TOTAL");
        RAZON_PSA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "RAZÓN PSA LIBRE Y TOTAL"));
        RAZON_PSA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                RAZON_PSA1KeyTyped(evt);
            }
        });
        jPanel15.add(RAZON_PSA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, 110, 40));

        HEPATITISC2.setText("-----");
        HEPATITISC2.setToolTipText("Ags. DE HEPATITIS C");
        HEPATITISC2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "HEPATITIS C"));
        HEPATITISC2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEPATITISC2KeyTyped(evt);
            }
        });
        jPanel15.add(HEPATITISC2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 390, 110, 40));

        HEPATITISB2.setText("-----");
        HEPATITISB2.setToolTipText("Ac. ANTI-CORE DE HEPATITIS B");
        HEPATITISB2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANTI-CORE HEPATITIS B\t"));
        HEPATITISB2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEPATITISB2KeyTyped(evt);
            }
        });
        jPanel15.add(HEPATITISB2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 340, 110, 40));

        HEPATITISB3.setText("-----");
        HEPATITISB3.setToolTipText("Ags. DE SUPERFICIE DE HEPATITIS B");
        HEPATITISB3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "SUPERFICIE HEPATITIS B"));
        HEPATITISB3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEPATITISB3KeyTyped(evt);
            }
        });
        jPanel15.add(HEPATITISB3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 290, 110, 40));

        HEPATITISB_BIOME1.setText("INDEX");
        HEPATITISB_BIOME1.setToolTipText("Ags. DE SUPERFICIE DE HEPATITIS B (BIOME)");
        HEPATITISB_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "SUPERFICIE HEPATITIS B"));
        HEPATITISB_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEPATITISB_BIOME1KeyTyped(evt);
            }
        });
        jPanel15.add(HEPATITISB_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 240, 110, 40));

        HEPATITISA_IGM1.setText("INDEX");
        HEPATITISA_IGM1.setToolTipText("HEPATITIS A IGM (BIOME)");
        HEPATITISA_IGM1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "HEPATITIS A IGM"));
        HEPATITISA_IGM1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEPATITISA_IGM1KeyTyped(evt);
            }
        });
        jPanel15.add(HEPATITISA_IGM1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 190, 110, 40));

        IGG_BIOME1.setText("INDEX");
        IGG_BIOME1.setToolTipText("Ac. ANTI-Toxoplasma gondii IGG (BIOME)");
        IGG_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANTI-Toxoplasma gondii IGM (BIOME)"));
        IGG_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                IGG_BIOME1KeyTyped(evt);
            }
        });
        jPanel15.add(IGG_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 140, 110, 40));

        IGM_BIOME1.setText("INDEX");
        IGM_BIOME1.setToolTipText("Ac. ANTI-Toxoplasma gondii IGM (BIOME)");
        IGM_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANTI-Toxoplasma IGM (BIOME)"));
        IGM_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                IGM_BIOME1KeyTyped(evt);
            }
        });
        jPanel15.add(IGM_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 90, 110, 40));

        FERRITINA_BIOME1.setText("ng/mL");
        FERRITINA_BIOME1.setToolTipText("FERRITINA (BIOME)");
        FERRITINA_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "FERRITINA (BIOME)"));
        FERRITINA_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FERRITINA_BIOME1KeyTyped(evt);
            }
        });
        jPanel15.add(FERRITINA_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 40, 110, 40));

        PYLOTY_IGM1.setText("INDEX");
        PYLOTY_IGM1.setToolTipText("Ac. ANTI-Helicobacter pylori IGM (BIOME)");
        PYLOTY_IGM1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANTI-Helicobacter pylori IGM"));
        PYLOTY_IGM1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PYLOTY_IGM1KeyTyped(evt);
            }
        });
        jPanel15.add(PYLOTY_IGM1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 40, 110, 40));

        PYLORI_IGG1.setText("INDEX");
        PYLORI_IGG1.setToolTipText("Ac. ANTI- Helicobacter pylori IGG (BIOME)");
        PYLORI_IGG1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ANTI- Helicobacter"));
        PYLORI_IGG1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PYLORI_IGG1KeyTyped(evt);
            }
        });
        jPanel15.add(PYLORI_IGG1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 90, 110, 40));

        TROPONINA_BIOME1.setText("ng/mL");
        TROPONINA_BIOME1.setToolTipText("TROPONINA (BIOME)");
        TROPONINA_BIOME1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "TROPONINA (BIOME)"));
        TROPONINA_BIOME1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TROPONINA_BIOME1KeyTyped(evt);
            }
        });
        jPanel15.add(TROPONINA_BIOME1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 140, 110, 40));

        HEMOGLOBINA1.setText("%");
        HEMOGLOBINA1.setToolTipText("HEMOGLOBINA GLICOSILADA (HbA1c ABBOTT) ");
        HEMOGLOBINA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "HEMOGLOBINA GLICOSILADA (HbA1c)"));
        HEMOGLOBINA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                HEMOGLOBINA1KeyTyped(evt);
            }
        });
        jPanel15.add(HEMOGLOBINA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 190, 110, 40));

        DENGUEIGM1.setText("-----");
        DENGUEIGM1.setToolTipText("Ac. ANTI-DENGUE IGM");
        DENGUEIGM1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ac. ANTI-DENGUE IGM"));
        DENGUEIGM1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DENGUEIGM1KeyTyped(evt);
            }
        });
        jPanel15.add(DENGUEIGM1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 240, 110, 40));

        DENGUEIGG1.setText("-----");
        DENGUEIGG1.setToolTipText("Ac. ANTI-DENGUE IGG ");
        DENGUEIGG1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ac. ANTI-DENGUE IGG"));
        DENGUEIGG1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DENGUEIGG1KeyTyped(evt);
            }
        });
        jPanel15.add(DENGUEIGG1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 280, 110, 40));

        jTabbedPane2.addTab("Unidades", jPanel15);

        jPanel9.add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 50, 700, 550));

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JradioPerfil.setBackground(new java.awt.Color(255, 255, 255));
        JradioPerfil.setText("Estudios pág 1.");
        JradioPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JradioPerfilActionPerformed(evt);
            }
        });
        jPanel12.add(JradioPerfil, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        Jradioreferencias.setBackground(new java.awt.Color(255, 255, 255));
        Jradioreferencias.setText("Ver Referencias pág 2.");
        Jradioreferencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JradioreferenciasActionPerformed(evt);
            }
        });
        jPanel12.add(Jradioreferencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, -1, -1));

        Jradioreferencias1.setBackground(new java.awt.Color(255, 255, 255));
        Jradioreferencias1.setText("Ver Referencias pág 1.");
        Jradioreferencias1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Jradioreferencias1ActionPerformed(evt);
            }
        });
        jPanel12.add(Jradioreferencias1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, -1, -1));

        Jradioreferencias2.setBackground(new java.awt.Color(255, 255, 255));
        Jradioreferencias2.setText("Ver Unidades.");
        Jradioreferencias2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Jradioreferencias2ActionPerformed(evt);
            }
        });
        jPanel12.add(Jradioreferencias2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, -1, -1));

        jPanel9.add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 700, 40));

        getContentPane().add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1050, 630));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
     
    
    
    
    
    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton34ActionPerformed
       
        
        
        List<String> camposRequeridos = Arrays.asList(
        TSH_RJL.getText(), TL3_RJL.getText(), T4L_RJL.getText(),
        TSH_BIOME.getText(), TS3_BIOME.getText(), TS4_BIOME.getText(),
        T3L_REACTIVA.getText(), T4L_REACTIVA.getText(),
        T3T_AUTOBIO.getText(), T4T_AUTOBIO.getText(),
        INSULINA_BIOME.getText(), INSULITA_POSTBIOME.getText(),
        INSULINA_REACTIVO.getText(), INSULITA_POSTREACTIVA.getText(),
        INSULINA_INMU.getText(), INSULINA_POSTINMUKIT.getText(),
        FSH_BIOME.getText(), LH_BIOME.getText(),
        PROGESTERONA.getText(), ESTRADIOL.getText(),
        PROLACTINA.getText(), PSAL_BIOME.getText(),
        PSAT_BIOME.getText(), RAZON_PSA.getText(),
        FERRITINA_BIOME.getText(), IGM_BIOME.getText(),
        IGG_BIOME.getText(), HEPATITISA_IGM.getText(),
        HEPATITISB_BIOME.getText(), HEPATITISB.getText(),
        HEPATITISB1.getText(), HEPATITISC.getText(),
        PYLOTY_IGM.getText(), PYLORI_IGG.getText(),
        TROPONINA_BIOME.getText(), HEMOGLOBINA.getText(),
        DENGUEIGM.getText(), DENGUEIGG.getText()
        );
        
        
        
        
        
           if (TXTPapellido.getText().equals("") 
                   
       
                   
                   
                   || TXTPnombre.getText().equals("")
                   || TXTPcedula.getText().equals("") 
                   || TXTPcorreo.getText().equals("") 
                   || TXTPtelefono.getText().equals("") 
                   || TXTPdireccion.getText().equals("")
                   
                   || TSH_RJL1.getText().equals("")
                   || TL3_RJL1.getText().equals("")
                   || T4L_RJL1.getText().equals("")
                   || TSH_BIOME1.getText().equals("")
                   || TS3_BIOME1.getText().equals("")
                   || TS4_BIOME1.getText().equals("")
                   || T3L_REACTIVA1.getText().equals("")
                   || T4L_REACTIVA1.getText().equals("")
                   || T3T_AUTOBIO1.getText().equals("")
                   || T4T_AUTOBIO1.getText().equals("")
                   || INSULINA_BIOME1.getText().equals("")
                   || INSULITA_POSTBIOME1.getText().equals("")
                   || INSULINA_REACTIVOD.getText().equals("")
                   || INSULITA_POSTREACTIVA1.getText().equals("")
                   || INSULINA_INMU1.getText().equals("")
                   || INSULINA_POSTINMUKIT1.getText().equals("")
                 
               
                   
                   )
            
           
           
           
           {
             
               
               
               
            JOptionPane.showMessageDialog(null, "ASIGNE UN PACIENTE, Y VERIFIQUE QUE TODOS LOS CAMPOS SE ENCUENTRAN COMPLETADOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);

        }
           
           
           
      
///camposRequeridos.stream().allMatch(String::isEmpty) camposRequeridos.stream().anyMatch(String::isEmpty))
else if (camposRequeridos.stream().allMatch(String::isEmpty)) {
    JOptionPane.showMessageDialog(null, "DEBE INGRESAR UN ESTUDIO", "ESTUDIOS", JOptionPane.ERROR_MESSAGE);
}
           
          
   
           
             else{  
   
           //--------------------------------------- ACTUALIZAR    
            String nivelUsuario=MP.getNivel(); 
            String especialidad= MP.getEspecialidad();
            if(especialidad.equals("Bioanalista")&& !estadoEstudio.equals("") || 
            nivelUsuario.equals("Administrador") && !estadoEstudio.equals("")){
            labDao.ConsultarFirma();     
            Maxid=idCallestudios;
            pdf();  
            
          
            labDao.actualizarTiroideaEspecial(
                       Maxid, 
                       TL3_RJL.getText(),
                       T4L_RJL.getText(), 
                       TSH_RJL.getText(),
                       TS3_BIOME.getText(), 
                       TS4_BIOME.getText(), 
                       TSH_BIOME.getText(), 
                       T3L_REACTIVA.getText(), 
                       T4L_REACTIVA.getText(),
                       T3T_AUTOBIO.getText(), 
                       T4T_AUTOBIO.getText()

               ); 
            
            
            labDao.actualizarInsulinaEspecial(
                       Maxid, 
                       INSULINA_BIOME.getText(), 
                       INSULITA_POSTBIOME.getText(),
                       INSULINA_REACTIVO.getText(), 
                       INSULITA_POSTREACTIVA.getText(), 
                       INSULINA_INMU.getText(), 
                       INSULINA_POSTINMUKIT.getText()
        

               ); 
            
            
            
                 labDao.actualizarPFemenino(
                       Maxid, 
                       FSH_BIOME.getText(), 
                       LH_BIOME.getText(),
                       "", 
                       PROGESTERONA.getText(), 
                       ESTRADIOL.getText(), 
                       PROLACTINA.getText() 
              ); 
            
                labDao.actualizarPsa(
                Maxid,
                PSAL_BIOME.getText(),
                PSAT_BIOME.getText(),
                RAZON_PSA.getText()
                
                );
                
                labDao.actualizarFerritina(
                Maxid,
                FERRITINA_BIOME.getText()
                );   
            
                
               labDao.actualizarToxoplasma(
                Maxid,
                IGM_BIOME.getText(),
                IGG_BIOME.getText()
                
                );
                
                
                
                  labDao.actualizarHepatitis(
                       Maxid, 
                       HEPATITISA_IGM.getText(), 
                       HEPATITISB_BIOME.getText(),
                       HEPATITISB.getText(), 
                       HEPATITISB1.getText(), 
                       HEPATITISC.getText()
                    

               ); 
               
                labDao.actualizarHelico(
                Maxid,
                PYLOTY_IGM.getText(),
                PYLORI_IGG.getText()
                );
               
               
               
                
                
                 labDao.actualizarEspecial(
                 Maxid,
                 TROPONINA_BIOME.getText(),
                 HEMOGLOBINA.getText(),
                 DENGUEIGM.getText(),
                 DENGUEIGG.getText()
                 );
               
            updateReporte(); 
           
            String Fecha = new SimpleDateFormat("yyyy/MM/dd").format(Menu.FechaAdmin.getDate());
            String accion =  "HORA: "+ Menu.Time.getText()+" Corrigió el examen N° "+Maxid+" de: " +TXTPnombre.getText() +" "+ TXTPapellido.getText();
            audit.corregirEstudio(
                    idusuario, 
                    accion,
                    Fecha 
                    );
            
            cancelarexamen();
            backtoConsulta();
            }
           
    //--------------------------------------- AGREGAR    
            

    
            
               else{
              labDao.ConsultarFirma(); 
              MaxIdestudios(); 
               
            labDao.agregarTiroideaEspecial(
                       Maxid, 
                        
                       TL3_RJL.getText(),
                       T4L_RJL.getText(), 
                       TSH_RJL.getText(),
                       TS3_BIOME.getText(), 
                       TS4_BIOME.getText(), 
                       TSH_BIOME.getText(), 
                      
                       
                       
                       T3L_REACTIVA.getText(), 
                       T4L_REACTIVA.getText(),
                       T3T_AUTOBIO.getText(), 
                       T4T_AUTOBIO.getText()

               );    
            
            
                labDao.agregarInsulinaEspecial(
                       Maxid, 
                       INSULINA_BIOME.getText(), 
                       INSULITA_POSTBIOME.getText(),
                       INSULINA_REACTIVO.getText(), 
                       INSULITA_POSTREACTIVA.getText(), 
                       INSULINA_INMU.getText(), 
                       INSULINA_POSTINMUKIT.getText()
        

               ); 
               
                
                       labDao.agregarPFemenino(
                       Maxid, 
                       FSH_BIOME.getText(), 
                       LH_BIOME.getText(),
                       "", 
                       PROGESTERONA.getText(), 
                       ESTRADIOL.getText(), 
                       PROLACTINA.getText() 
              ); 
               
                labDao.agregarPsa(
                Maxid,
                PSAL_BIOME.getText(),
                PSAT_BIOME.getText(),
                RAZON_PSA.getText()
                
                );
                                       
                                       
                                       
                labDao.agregarFerritina(
                Maxid,
                FERRITINA_BIOME.getText()
                );      
                       
                       
                
                labDao.agregarToxoplasma(
                Maxid,
                IGM_BIOME.getText(),
                IGG_BIOME.getText()
                
                );
                
                
                    labDao.agregarHepatitis(
                       Maxid, 
                       HEPATITISA_IGM.getText(), 
                       HEPATITISB_BIOME.getText(),
                       HEPATITISB.getText(), 
                       HEPATITISB1.getText(), 
                       HEPATITISC.getText()
                    

               );
                
                    
               labDao.agregarHelico(
                Maxid,
                PYLOTY_IGM.getText(),
                PYLORI_IGG.getText()
                );
               
               labDao.agregarEspecial(
                 Maxid,
                 TROPONINA_BIOME.getText(),
                 HEMOGLOBINA.getText(),
                 DENGUEIGM.getText(),
                 DENGUEIGG.getText()
                 );
                
               pdf();  
               guardarReporte();  
               cancelarexamen();
               JOptionPane.showMessageDialog(null, "GENERANDO REPORTE...","ESTUDIO",1);
               }
           
           
           }

           
   
        
        
        
   
    }//GEN-LAST:event_jButton34ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed

        
                if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea cancelar los resultados?",
            "Cancelar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
        cancelarexamen(); CallReferencia(); }
                
                else{}
                
    }//GEN-LAST:event_jButton20ActionPerformed

    private void BtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSearchActionPerformed
  
    procesarPaciente();
    }//GEN-LAST:event_BtnSearchActionPerformed

    private void BtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarActionPerformed

        Connection con;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps;
        ResultSet rs;

        Pattern pattern = Pattern.compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
        String Correo = TXTPcorreo.getText();
        Matcher mather = pattern.matcher(Correo);

        if (TXTPapellido.getText().equals("") || TXTPnombre.getText().equals("") || FechaNacimiento.getDate()==null
            || TXTPcedula.getText().equals("") || TXTPcorreo.getText().equals("") || TXTPtelefono.getText().equals("") || TXTPdireccion.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "TODOS LOS CAMPOS SON OBLIGATORIOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);

        } else if (mather.find() == false) {
            JOptionPane.showMessageDialog(null, "EMAIL INVALIDO, VERIFIQUE", "EMAIL INVALIDO", JOptionPane.ERROR_MESSAGE);
            this.TXTPcorreo.requestFocus();
        }

        else {

            String sql="SELECT Idpaciente, Nombre, Apellido, Cedula, Telefono, Direccion FROM table_paciente  WHERE Cedula='"+ TXTPcedula.getText() +"'";

            try{
                con = cn.getConnection();
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();
                if(rs.next()){JOptionPane.showMessageDialog(null, "EL PACIENTE YA SE ENCUENTRA", "DATO DUPLICADO",JOptionPane.ERROR_MESSAGE);}

                else{
                    AuditoriaAgregar();
                    AgregarPaciente();
                    callPacient();
                    BtnAgregar.setEnabled(false);
                    //      TxtMotivo.setEnabled(true);

                }

            }catch(Exception e){System.out.println(e);}
        }
    }//GEN-LAST:event_BtnAgregarActionPerformed

    private void BtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelarActionPerformed
        limpiarCampos();
        DesactivarCampos();
        JPregistro.setVisible(false);
        TXTPcedula.setText("V-");
        BtnAgregar.setEnabled(true);
        BtnSearch.setEnabled(true);  
        TXTPcedula.setEnabled(true);
        BtnAgregar.setEnabled(false);
        
    }//GEN-LAST:event_BtnCancelarActionPerformed

    private void TXTPcedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPcedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPcedulaActionPerformed

    private void TXTPcedulaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyTyped
       char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='V' || car=='E'  || car=='-'|| car=='J'|| car =='H' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTPcedula.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==14)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='V' && car!='E' && car!='-' && car != 'J' && car!='H' || car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTPcedulaKeyTyped

    private void TXTPnombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPnombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPnombreActionPerformed

    private void TXTPnombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPnombreKeyTyped
          va.longitud(TXTPnombre.getText(), 30, evt);
    }//GEN-LAST:event_TXTPnombreKeyTyped

    private void TXTPapellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPapellidoKeyTyped
        va.longitud(TXTPapellido.getText(), 30, evt);
    }//GEN-LAST:event_TXTPapellidoKeyTyped

    private void TXTPcorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcorreoKeyTyped
         va.longitud(TXTPcorreo.getText(), 30, evt);
    }//GEN-LAST:event_TXTPcorreoKeyTyped

    private void TXTPdireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPdireccionKeyTyped
         va.longitud(TXTPdireccion .getText(), 80, evt);
    }//GEN-LAST:event_TXTPdireccionKeyTyped

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
    
                if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea actualizar los valores referenciales?",
            "Valores Referenciales", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
       AuditoriaModificar();   ActualizarReferencia(); CallReferencia(); 
       JOptionPane.showMessageDialog(null, "LOS VALORES REFENCIALES HAN SIDO MODIFICADOS", "VALORES REFENCIALES", JOptionPane.INFORMATION_MESSAGE);
                }
                
                else{CallReferencia();}      
        
        
    }//GEN-LAST:event_jButton21ActionPerformed

    private void TXTPapellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPapellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPapellidoActionPerformed

    private void T3L_REACTIVAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T3L_REACTIVAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T3L_REACTIVAActionPerformed

    private void T3L_REACTIVAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T3L_REACTIVAKeyTyped
             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = T3L_REACTIVA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_T3L_REACTIVAKeyTyped

    private void TS4_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TS4_BIOMEKeyTyped
             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TS4_BIOME.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TS4_BIOMEKeyTyped

    private void TS3_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TS3_BIOMEKeyTyped
                 char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TS3_BIOME.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TS3_BIOMEKeyTyped

    private void TSH_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TSH_BIOMEKeyTyped
               char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TSH_BIOME.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TSH_BIOMEKeyTyped

    private void T4L_RJLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4L_RJLKeyTyped
           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = T4L_RJL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_T4L_RJLKeyTyped

    private void TL3_RJLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TL3_RJLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TL3_RJLActionPerformed

    private void TL3_RJLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TL3_RJLKeyTyped
           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TL3_RJL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TL3_RJLKeyTyped

    private void TSH_RJLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TSH_RJLKeyTyped
       char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TSH_RJL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TSH_RJLKeyTyped

    private void T4L_REACTIVAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4L_REACTIVAKeyTyped
                   char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = T4L_REACTIVA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_T4L_REACTIVAKeyTyped

    private void INSULINA_POSTINMUKITKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_POSTINMUKITKeyTyped
                 char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = INSULINA_POSTINMUKIT.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_INSULINA_POSTINMUKITKeyTyped

    private void INSULINA_INMUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INSULINA_INMUActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_INMUActionPerformed

    private void INSULINA_INMUKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_INMUKeyTyped
             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = INSULINA_INMU.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_INSULINA_INMUKeyTyped

    private void INSULITA_POSTREACTIVAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULITA_POSTREACTIVAKeyTyped
           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = INSULITA_POSTREACTIVA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_INSULITA_POSTREACTIVAKeyTyped

    private void INSULINA_REACTIVOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_REACTIVOKeyTyped
      char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = INSULINA_REACTIVO.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_INSULINA_REACTIVOKeyTyped

    private void INSULITA_POSTBIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULITA_POSTBIOMEKeyTyped
            char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = INSULITA_POSTBIOME.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_INSULITA_POSTBIOMEKeyTyped

    private void INSULINA_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_BIOMEKeyTyped
                  char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = INSULINA_BIOME.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_INSULINA_BIOMEKeyTyped

    private void T4T_AUTOBIOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T4T_AUTOBIOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T4T_AUTOBIOActionPerformed

    private void T4T_AUTOBIOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4T_AUTOBIOKeyTyped
                  char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = T4T_AUTOBIO.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_T4T_AUTOBIOKeyTyped

    private void T3T_AUTOBIOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T3T_AUTOBIOKeyTyped
                      char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = T3T_AUTOBIO.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_T3T_AUTOBIOKeyTyped

    private void JradioreferenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JradioreferenciasActionPerformed
    jTabbedPane2.setSelectedIndex(2);
    this.Jradioreferencias.setSelected(true);
    Jradioreferencias1.setSelected(false);
 
    JradioPerfil.setSelected(false);
    jButton20.setVisible(false);
    jButton34.setVisible(false);
    Jradioreferencias2.setSelected(false);
     
    }//GEN-LAST:event_JradioreferenciasActionPerformed

    private void JradioPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JradioPerfilActionPerformed
        jTabbedPane2.setSelectedIndex(0);
        this.JradioPerfil.setSelected(true);
        Jradioreferencias.setSelected(false);
        Jradioreferencias1.setSelected(false);
        Jradioreferencias2.setSelected(false);
        jButton20.setVisible(true);
        jButton34.setVisible(true);
    }//GEN-LAST:event_JradioPerfilActionPerformed

    private void TXTPtelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPtelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPtelefonoActionPerformed

    private void JRMasculinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRMasculinoActionPerformed
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
    }//GEN-LAST:event_JRMasculinoActionPerformed

    private void JRfemeninoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRfemeninoActionPerformed
      JRfemenino.setSelected(true);
      JRMasculino.setSelected(false);
      Sexo="Femenino";
    }//GEN-LAST:event_JRfemeninoActionPerformed

    private void TXTPcedulaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyPressed
    if(evt.getKeyCode()==KeyEvent.VK_ENTER){
        
      procesarPaciente();
    
    
    }
    }//GEN-LAST:event_TXTPcedulaKeyPressed

    private void TSH_RJL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TSH_RJL1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TSH_RJL1KeyTyped

    private void TL3_RJL1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TL3_RJL1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TL3_RJL1ActionPerformed

    private void TL3_RJL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TL3_RJL1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TL3_RJL1KeyTyped

    private void T4L_RJL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4L_RJL1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_T4L_RJL1KeyTyped

    private void TSH_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TSH_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TSH_BIOME1KeyTyped

    private void TS3_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TS3_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TS3_BIOME1KeyTyped

    private void TS4_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TS4_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TS4_BIOME1KeyTyped

    private void T3L_REACTIVA1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T3L_REACTIVA1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T3L_REACTIVA1ActionPerformed

    private void T3L_REACTIVA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T3L_REACTIVA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_T3L_REACTIVA1KeyTyped

    private void T4L_REACTIVA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4L_REACTIVA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_T4L_REACTIVA1KeyTyped

    private void INSULINA_POSTINMUKIT1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_POSTINMUKIT1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_POSTINMUKIT1KeyTyped

    private void INSULINA_INMU1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INSULINA_INMU1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_INMU1ActionPerformed

    private void INSULINA_INMU1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_INMU1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_INMU1KeyTyped

    private void INSULITA_POSTREACTIVA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULITA_POSTREACTIVA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULITA_POSTREACTIVA1KeyTyped

    private void INSULINA_REACTIVODKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_REACTIVODKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_REACTIVODKeyTyped

    private void INSULITA_POSTBIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULITA_POSTBIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULITA_POSTBIOME1KeyTyped

    private void INSULINA_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_BIOME1KeyTyped

    private void T4T_AUTOBIO1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T4T_AUTOBIO1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T4T_AUTOBIO1ActionPerformed

    private void T4T_AUTOBIO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4T_AUTOBIO1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_T4T_AUTOBIO1KeyTyped

    private void T3T_AUTOBIO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T3T_AUTOBIO1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_T3T_AUTOBIO1KeyTyped

    private void Jradioreferencias1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Jradioreferencias1ActionPerformed
    jTabbedPane2.setSelectedIndex(1);
    this.Jradioreferencias1.setSelected(true);
    Jradioreferencias.setSelected(false);
    JradioPerfil.setSelected(false);
    jButton20.setVisible(false);
    jButton34.setVisible(false);
    Jradioreferencias2.setSelected(false);
    }//GEN-LAST:event_Jradioreferencias1ActionPerformed

    private void PYLOTY_IGMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PYLOTY_IGMKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PYLOTY_IGMKeyTyped

    private void PYLORI_IGGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PYLORI_IGGKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PYLORI_IGGKeyTyped

    private void TROPONINA_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TROPONINA_BIOMEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TROPONINA_BIOMEKeyTyped

    private void HEMOGLOBINAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEMOGLOBINAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_HEMOGLOBINAKeyTyped

    private void HEPATITISCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEPATITISCKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_HEPATITISCKeyTyped

    private void HEPATITISBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEPATITISBKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_HEPATITISBKeyTyped

    private void HEPATITISB_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEPATITISB_BIOMEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_HEPATITISB_BIOMEKeyTyped

    private void HEPATITISA_IGMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEPATITISA_IGMKeyTyped
    
    }//GEN-LAST:event_HEPATITISA_IGMKeyTyped

    private void IGG_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IGG_BIOMEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_IGG_BIOMEKeyTyped

    private void IGM_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IGM_BIOMEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_IGM_BIOMEKeyTyped

    private void FERRITINA_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FERRITINA_BIOMEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FERRITINA_BIOMEKeyTyped

    private void RAZON_PSAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RAZON_PSAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_RAZON_PSAKeyTyped

    private void FSH_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FSH_BIOMEKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = FSH_BIOME.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_FSH_BIOMEKeyTyped

    private void FSH_BIOMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FSH_BIOMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FSH_BIOMEActionPerformed

    private void LH_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LH_BIOMEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_LH_BIOMEKeyTyped

    private void PROGESTERONAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PROGESTERONAKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = PROGESTERONA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_PROGESTERONAKeyTyped

    private void ESTRADIOLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ESTRADIOLKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_ESTRADIOLKeyTyped

    private void PROLACTINAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PROLACTINAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PROLACTINAKeyTyped

    private void PSAL_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PSAL_BIOMEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PSAL_BIOMEKeyTyped

    private void PSAT_BIOMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PSAT_BIOMEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PSAT_BIOMEKeyTyped

    private void INSULINA_REACTIVONKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_REACTIVONKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_REACTIVONKeyTyped

    private void INSULINA_REACTIVOAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_REACTIVOAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_REACTIVOAKeyTyped

    private void PROnoembarazoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PROnoembarazoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PROnoembarazoKeyTyped

    private void FERRkidsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FERRkidsKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FERRkidsKeyTyped

    private void FERRmujerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FERRmujerKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FERRmujerKeyTyped

    private void FERRhombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FERRhombreKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FERRhombreKeyTyped

    private void FERRnacidosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FERRnacidosKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FERRnacidosKeyTyped

    private void IGMpositivoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IGMpositivoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_IGMpositivoKeyTyped

    private void TIGMindeterminadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TIGMindeterminadoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TIGMindeterminadoKeyTyped

    private void TIGMnegativoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TIGMnegativoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TIGMnegativoKeyTyped

    private void LFFOLICULARKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LFFOLICULARKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_LFFOLICULARKeyTyped

    private void LHLUTEAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LHLUTEAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_LHLUTEAKeyTyped

    private void LHCICLOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LHCICLOKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_LHCICLOKeyTyped

    private void LHPOSMENOSPAUSIAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LHPOSMENOSPAUSIAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_LHPOSMENOSPAUSIAKeyTyped

    private void FSHFOLICULARBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FSHFOLICULARBKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FSHFOLICULARBKeyTyped

    private void FSHLUTEABKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FSHLUTEABKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FSHLUTEABKeyTyped

    private void FSHCICLOBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FSHCICLOBKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FSHCICLOBKeyTyped

    private void FSHPOSTMENOSPAUSIABKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FSHPOSTMENOSPAUSIABKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FSHPOSTMENOSPAUSIABKeyTyped

    private void FSHHOMBRESBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FSHHOMBRESBKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FSHHOMBRESBKeyTyped

    private void PROGEPOSMENOSPAUSIAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PROGEPOSMENOSPAUSIAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PROGEPOSMENOSPAUSIAKeyTyped

    private void PROGECICLOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PROGECICLOKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PROGECICLOKeyTyped

    private void PROGELUTEAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PROGELUTEAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PROGELUTEAKeyTyped

    private void PROGFOLICULARKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PROGFOLICULARKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PROGFOLICULARKeyTyped

    private void ESfaseKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ESfaseKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_ESfaseKeyTyped

    private void EStardiaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EStardiaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_EStardiaKeyTyped

    private void ESovulacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ESovulacionKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_ESovulacionKeyTyped

    private void ESpostmenopKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ESpostmenopKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_ESpostmenopKeyTyped

    private void ESpubertadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ESpubertadKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_ESpubertadKeyTyped

    private void ESembarazoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ESembarazoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_ESembarazoKeyTyped

    private void TIGGnegativoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TIGGnegativoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TIGGnegativoKeyTyped

    private void TIGGindeterminadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TIGGindeterminadoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TIGGindeterminadoKeyTyped

    private void IGGpositivoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IGGpositivoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_IGGpositivoKeyTyped

    private void HEPATITISB1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEPATITISB1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_HEPATITISB1KeyTyped

    private void Jradioreferencias2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Jradioreferencias2ActionPerformed
    jTabbedPane2.setSelectedIndex(3);
    this.Jradioreferencias2.setSelected(true);
    Jradioreferencias1.setSelected(false);
    Jradioreferencias.setSelected(false);
    JradioPerfil.setSelected(false);
    jButton20.setVisible(false);
    jButton34.setVisible(false);
    
    }//GEN-LAST:event_Jradioreferencias2ActionPerformed

    private void TSH_RJL2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TSH_RJL2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TSH_RJL2KeyTyped

    private void TL3_RJL2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TL3_RJL2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TL3_RJL2ActionPerformed

    private void TL3_RJL2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TL3_RJL2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TL3_RJL2KeyTyped

    private void T4L_RJL2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4L_RJL2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_T4L_RJL2KeyTyped

    private void TSH_BIOME2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TSH_BIOME2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TSH_BIOME2KeyTyped

    private void TS3_BIOME2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TS3_BIOME2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TS3_BIOME2KeyTyped

    private void TS4_BIOME2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TS4_BIOME2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TS4_BIOME2KeyTyped

    private void T3L_REACTIVA2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T3L_REACTIVA2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T3L_REACTIVA2ActionPerformed

    private void T3L_REACTIVA2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T3L_REACTIVA2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_T3L_REACTIVA2KeyTyped

    private void T4L_REACTIVA2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4L_REACTIVA2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_T4L_REACTIVA2KeyTyped

    private void INSULINA_POSTINMUKIT2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_POSTINMUKIT2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_POSTINMUKIT2KeyTyped

    private void INSULINA_INMU2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INSULINA_INMU2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_INMU2ActionPerformed

    private void INSULINA_INMU2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_INMU2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_INMU2KeyTyped

    private void INSULITA_POSTREACTIVA2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULITA_POSTREACTIVA2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULITA_POSTREACTIVA2KeyTyped

    private void INSULINA_REACTIVO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_REACTIVO1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_REACTIVO1KeyTyped

    private void INSULITA_POSTBIOME2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULITA_POSTBIOME2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULITA_POSTBIOME2KeyTyped

    private void INSULINA_BIOME2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_BIOME2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_INSULINA_BIOME2KeyTyped

    private void T4T_AUTOBIO2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T4T_AUTOBIO2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T4T_AUTOBIO2ActionPerformed

    private void T4T_AUTOBIO2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4T_AUTOBIO2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_T4T_AUTOBIO2KeyTyped

    private void T3T_AUTOBIO2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T3T_AUTOBIO2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_T3T_AUTOBIO2KeyTyped

    private void FSH_BIOME1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FSH_BIOME1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FSH_BIOME1ActionPerformed

    private void FSH_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FSH_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FSH_BIOME1KeyTyped

    private void LH_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LH_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_LH_BIOME1KeyTyped

    private void PROGESTERONA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PROGESTERONA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PROGESTERONA1KeyTyped

    private void ESTRADIOL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ESTRADIOL1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_ESTRADIOL1KeyTyped

    private void PROLACTINA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PROLACTINA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PROLACTINA1KeyTyped

    private void PSAL_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PSAL_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PSAL_BIOME1KeyTyped

    private void PSAT_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PSAT_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PSAT_BIOME1KeyTyped

    private void RAZON_PSA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RAZON_PSA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_RAZON_PSA1KeyTyped

    private void HEPATITISC2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEPATITISC2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_HEPATITISC2KeyTyped

    private void HEPATITISB2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEPATITISB2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_HEPATITISB2KeyTyped

    private void HEPATITISB3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEPATITISB3KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_HEPATITISB3KeyTyped

    private void HEPATITISB_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEPATITISB_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_HEPATITISB_BIOME1KeyTyped

    private void HEPATITISA_IGM1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEPATITISA_IGM1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_HEPATITISA_IGM1KeyTyped

    private void IGG_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IGG_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_IGG_BIOME1KeyTyped

    private void IGM_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IGM_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_IGM_BIOME1KeyTyped

    private void FERRITINA_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FERRITINA_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_FERRITINA_BIOME1KeyTyped

    private void PYLOTY_IGM1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PYLOTY_IGM1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PYLOTY_IGM1KeyTyped

    private void PYLORI_IGG1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PYLORI_IGG1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_PYLORI_IGG1KeyTyped

    private void TROPONINA_BIOME1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TROPONINA_BIOME1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TROPONINA_BIOME1KeyTyped

    private void HEMOGLOBINA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HEMOGLOBINA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_HEMOGLOBINA1KeyTyped

    private void TS3_BIOME2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TS3_BIOME2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TS3_BIOME2ActionPerformed

    private void DENGUEIGGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DENGUEIGGKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_DENGUEIGGKeyTyped

    private void DENGUEIGMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DENGUEIGMKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_DENGUEIGMKeyTyped

    private void DENGUEIGM1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DENGUEIGM1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_DENGUEIGM1KeyTyped

    private void DENGUEIGG1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DENGUEIGG1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_DENGUEIGG1KeyTyped

    private void DENGUEIGM2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DENGUEIGM2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_DENGUEIGM2KeyTyped

    private void DENGUEIGG2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DENGUEIGG2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_DENGUEIGG2KeyTyped

    private void DENGUEIGM2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DENGUEIGM2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DENGUEIGM2ActionPerformed

    private void TSH_RJLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TSH_RJLKeyReleased
          try {
        String text =  TSH_RJL.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 0.4 || valor > 5.5) {
           Color lightRed = new Color(255, 192, 192);
             TSH_RJL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TSH_RJL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TSH_RJL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TSH_RJLKeyReleased

    private void TL3_RJLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TL3_RJLKeyReleased
          try {
        String text =  TL3_RJL.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 2.8 || valor > 7.2) {
           Color lightRed = new Color(255, 192, 192);
             TL3_RJL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TL3_RJL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TL3_RJL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TL3_RJLKeyReleased

    private void T4L_RJLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4L_RJLKeyReleased
          try {
        String text =  T4L_RJL.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 8.5 || valor > 22.5) {
           Color lightRed = new Color(255, 192, 192);
             T4L_RJL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             T4L_RJL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        T4L_RJL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_T4L_RJLKeyReleased

    private void TSH_BIOMEKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TSH_BIOMEKeyReleased
            try {
        String text =  TSH_BIOME.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 0.4 || valor > 5.5) {
           Color lightRed = new Color(255, 192, 192);
             TSH_BIOME.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TSH_BIOME.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TSH_BIOME.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TSH_BIOMEKeyReleased

    private void TS3_BIOMEKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TS3_BIOMEKeyReleased
            try {
        String text =  TS3_BIOME.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 2.8 || valor > 7.3) {
           Color lightRed = new Color(255, 192, 192);
             TS3_BIOME.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TS3_BIOME.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TS3_BIOME.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TS3_BIOMEKeyReleased

    private void TS4_BIOMEKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TS4_BIOMEKeyReleased
            try {
        String text =  TS4_BIOME.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 8.5 || valor > 22.5) {
           Color lightRed = new Color(255, 192, 192);
             TS4_BIOME.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TS4_BIOME.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TS4_BIOME.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TS4_BIOMEKeyReleased

    private void T3L_REACTIVAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T3L_REACTIVAKeyReleased
              try {
        String text =  T3L_REACTIVA.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 1.52 || valor > 4.21) {
           Color lightRed = new Color(255, 192, 192);
             T3L_REACTIVA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             T3L_REACTIVA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        T3L_REACTIVA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_T3L_REACTIVAKeyReleased

    private void T4L_REACTIVAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4L_REACTIVAKeyReleased
           try {
        String text =  T4L_REACTIVA.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 0.65 || valor > 1.97) {
           Color lightRed = new Color(255, 192, 192);
             T4L_REACTIVA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             T4L_REACTIVA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
       T4L_REACTIVA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_T4L_REACTIVAKeyReleased

    private void T3T_AUTOBIOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T3T_AUTOBIOKeyReleased
         try {
        String text =  T3T_AUTOBIO.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 0.80 || valor > 2.10) {
           Color lightRed = new Color(255, 192, 192);
             T3T_AUTOBIO.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             T3T_AUTOBIO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
       T3T_AUTOBIO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_T3T_AUTOBIOKeyReleased

    private void T4T_AUTOBIOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_T4T_AUTOBIOKeyReleased
       try {
        String text =  T4T_AUTOBIO.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 5.0 || valor > 13.0) {
           Color lightRed = new Color(255, 192, 192);
            T4T_AUTOBIO.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             T4T_AUTOBIO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
       T4T_AUTOBIO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_T4T_AUTOBIOKeyReleased

    private void INSULINA_BIOMEKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_BIOMEKeyReleased
        try {
        String text =  INSULINA_BIOME.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor >25) {
           Color lightRed = new Color(255, 192, 192);
            INSULINA_BIOME.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             INSULINA_BIOME.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
       INSULINA_BIOME.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_INSULINA_BIOMEKeyReleased

    private void INSULITA_POSTBIOMEKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULITA_POSTBIOMEKeyReleased
          try {
        String text =  INSULITA_POSTBIOME.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
          if (valor < 8.0 || valor > 52.0) {
           Color lightRed = new Color(255, 192, 192);
            INSULITA_POSTBIOME.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             INSULITA_POSTBIOME.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
       INSULITA_POSTBIOME.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_INSULITA_POSTBIOMEKeyReleased

    private void INSULINA_REACTIVOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_REACTIVOKeyReleased
      
    }//GEN-LAST:event_INSULINA_REACTIVOKeyReleased

    private void INSULINA_INMUKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_INSULINA_INMUKeyReleased
            try {
        String text =  INSULITA_POSTBIOME.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
          if (valor > 25) {
           Color lightRed = new Color(255, 192, 192);
            INSULITA_POSTBIOME.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             INSULITA_POSTBIOME.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
       INSULITA_POSTBIOME.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_INSULINA_INMUKeyReleased

    private void LHPREPUBERTADKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LHPREPUBERTADKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_LHPREPUBERTADKeyTyped

    private void LHHOMBREADOLESCENTEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LHHOMBREADOLESCENTEKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_LHHOMBREADOLESCENTEKeyTyped

    private void LHHOMBREADULTO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LHHOMBREADULTO1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_LHHOMBREADULTO1KeyTyped

    
    
    
    public static String getEdad(Date fechaNacimiento) {
    if (fechaNacimiento != null) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        StringBuilder result = new StringBuilder();
        if (fechaNacimiento != null) {
            result.append(sdf.format(fechaNacimiento));
            result.append(" (");
            Calendar c = new GregorianCalendar();
            c.setTime(fechaNacimiento);
            result.append(calcularEdad(c));
            result.append(" años)");
        }
        return result.toString();
    }
    return "";
}

private static int calcularEdad(Calendar fechaNac) {
    Calendar today = Calendar.getInstance();
    int diffYear = today.get(Calendar.YEAR) - fechaNac.get(Calendar.YEAR);
    int diffMonth = today.get(Calendar.MONTH) - fechaNac.get(Calendar.MONTH);
    int diffDay = today.get(Calendar.DAY_OF_MONTH) - fechaNac.get(Calendar.DAY_OF_MONTH);
    // Si está en ese año pero todavía no los ha cumplido
    if (diffMonth < 0 || (diffMonth == 0 && diffDay < 0)) {
        diffYear = diffYear - 1;
    }
    return diffYear;
}
    
    
    
    
    
     public void pdf() {
      try {
       
          
          
         
             String Paciente=TXTPnombre.getText()+ " "+ TXTPapellido.getText(); 
             PdfNames=TXTPcedula.getText()+"_"+Paciente+"_"+Maxid;

        
          
          
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            Paragraph saltolinea = new Paragraph();
          

            FileOutputStream archivo;
            //String rut = System.getProperty("user.home");
            File file = new File("C://Fundaginebra//Reportes//"+PdfNames+".pdf");
            archivo = new FileOutputStream(file);
            Document doc = new Document();
            doc.setMargins(36, 36, 180, 130);
            PdfWriter writer=  PdfWriter.getInstance(doc, archivo);
          
            
            HeaderFooterPageEvent headerEvent = new HeaderFooterPageEvent();
            writer.setPageEvent(headerEvent);
          //  writer.setPageEvent(eventHelper);
            
           
            doc.open();
       
            com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\src\\imagenes\\Fundacionlogo1.png");
            header.setAlignment(Chunk.ALIGN_CENTER);

         
            


            
            
            
            float[] medidaCeldas1 = {5f};
            float[] medidaCeldas2 = {4f, 2f, 2f,4f};
            
                 
         
            
                   
            PdfPTable Tabla5 = new PdfPTable(1); 
            Tabla5.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla5.setWidthPercentage(100);  
            Tabla5.setWidths(medidaCeldas1);
            Tabla5.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla5.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t5columna1 = new Paragraph(" ");
            t5columna1.getFont().setStyle(Font.BOLD);
            t5columna1.getFont().setSize(10);        
            t5columna1.setFont(Letra);
            t5columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla5.addCell(t5columna1);
     
                

            
            
            
            PdfPTable Tabla6 = new PdfPTable(4); 
            Tabla6.setWidthPercentage(100);  
            Tabla6.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tabla6.setWidths(medidaCeldas2);
            Tabla6.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla6.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t6columna1 = new Paragraph("ANALISIS REALIZADO");
            t6columna1.getFont().setStyle(Font.BOLD);
            t6columna1.getFont().setSize(9);        
            t6columna1.setFont(Letra);
            t6columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla6.addCell(t6columna1);
     
                
            Paragraph t6columna2 = new Paragraph("RESULTADOS");
            t6columna2.getFont().setStyle(Font.BOLD);
            t6columna2.getFont().setSize(9);        
            t6columna2.setFont(Letra);
            t6columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla6.addCell(t6columna2);

            Paragraph t6columna3 = new Paragraph("UNIDAD");
            t6columna3.getFont().setStyle(Font.BOLD);
            t6columna3.getFont().setSize(10);        
            t6columna3.setFont(Letra);
            t6columna3.setAlignment(Element.ALIGN_CENTER);
            Tabla6.addCell(t6columna3);

            Paragraph t6columna4 = new Paragraph("REFERENCIA");
            t6columna4.getFont().setStyle(Font.BOLD);
            t6columna4.getFont().setSize(9);        
            t6columna4.setFont(Letra);
            t6columna4.setAlignment(Element.ALIGN_CENTER);
            Tabla6.addCell(t6columna4);
            
            
            
         
           
            
       if(!TSH_RJL.getText().equals("")){
           Tabla6.addCell(new Paragraph("TSH | RJL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TSH_RJL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(TSH_RJL2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TSH_RJL1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
    }
           
      if(!TL3_RJL.getText().equals("")){
           Tabla6.addCell(new Paragraph("T3L | RJL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TL3_RJL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(TL3_RJL2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TL3_RJL1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
    }
         
          if(!T4L_RJL.getText().equals("")){
           Tabla6.addCell(new Paragraph("T4L | RJL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(T4L_RJL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(T4L_RJL2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(T4L_RJL1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
           
       
           if(!TSH_BIOME.getText().equals("")){
           Tabla6.addCell(new Paragraph("TSH | BIOME",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TSH_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(TSH_BIOME2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TSH_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }  
          
           
           if(!TS3_BIOME.getText().equals("")){
           Tabla6.addCell(new Paragraph("T3L | BIOME",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TS3_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(TS3_BIOME2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TS3_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }  
           
            if(!TS4_BIOME.getText().equals("")){
           Tabla6.addCell(new Paragraph("T4L | BIOME",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TS4_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(TS4_BIOME2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TS4_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }  
          
          
           if(!T3L_REACTIVA.getText().equals("")){
           Tabla6.addCell(new Paragraph("T3L | REACTIVA",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(T3L_REACTIVA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(T3L_REACTIVA2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(T3L_REACTIVA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
            
          if(!T4L_REACTIVA.getText().equals("")){ 
           Tabla6.addCell(new Paragraph("T4L | REACTIVA",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(T4L_REACTIVA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(T4L_REACTIVA2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(T4L_REACTIVA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
       
            
       if(!T3T_AUTOBIO.getText().equals("")){
           Tabla6.addCell(new Paragraph("T3T | AUTOBIO",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(T3T_AUTOBIO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(T3T_AUTOBIO2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(T3T_AUTOBIO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
       
          if(!T4T_AUTOBIO.getText().equals("")){
           Tabla6.addCell(new Paragraph("T4T | AUTOBIO",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(T4T_AUTOBIO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(T4T_AUTOBIO2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(T4T_AUTOBIO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
       
          
        if(!INSULINA_BIOME.getText().equals("")){
           Tabla6.addCell(new Paragraph("INSULINA | BIOME",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(INSULINA_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(INSULINA_BIOME2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(INSULINA_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
       
           if(!INSULITA_POSTBIOME.getText().equals("")){
           Tabla6.addCell(new Paragraph("INSULINA POST. PANDRIAL | BIOME",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(INSULITA_POSTBIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(INSULITA_POSTBIOME2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(INSULITA_POSTBIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
          
           
           if(!INSULINA_REACTIVO.getText().equals("")){
           Tabla6.addCell(new Paragraph("INSULINA | REACTIVA",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(INSULINA_REACTIVO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(INSULINA_REACTIVO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph("Niños: "+ INSULINA_REACTIVON.getText() +"\n Adultos: " + INSULINA_REACTIVOA.getText()+"\n Diabetico tipo II: " + INSULINA_REACTIVOD.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }   
           
       if(!INSULITA_POSTREACTIVA.getText().equals("")){
           Tabla6.addCell(new Paragraph("INSULINA POST. PANDRIAL | REACTIVA",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(INSULITA_POSTREACTIVA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(INSULITA_POSTREACTIVA2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(INSULITA_POSTREACTIVA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
         
           if(!INSULINA_INMU.getText().equals("")){
           Tabla6.addCell(new Paragraph("INSULINA | RJL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(INSULINA_INMU.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(INSULINA_INMU2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(INSULINA_INMU1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
         
            if(!INSULINA_POSTINMUKIT.getText().equals("")){
           Tabla6.addCell(new Paragraph("INSULINA POST. PANDRIAL | RJL  ",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(INSULINA_POSTINMUKIT.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(INSULINA_POSTINMUKIT2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(INSULINA_POSTINMUKIT1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
       
       
       if (!FSH_BIOME.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Hormonas Foliculo Estimulante (FSH)",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(FSH_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(FSH_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph("Fase Folicular: "+FSHFOLICULARB.getText() +"\n Fase Lutea: "+ FSHLUTEAB.getText()+"\n Mitad de Ciclo: "+ FSHCICLOB.getText()+"\n Postmenopausia: "+ FSHPOSTMENOSPAUSIAB.getText()+"\n Hombres: "+ FSHHOMBRESB.getText()+"\n \n \n",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
        
        if (!LH_BIOME.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Hormona Luteínizante (LH)",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(LH_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(LH_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph("Fase Folicular: "+LFFOLICULAR.getText() +"\n Fase Lutea: "+ LHLUTEA.getText()+"\n Mitad de Ciclo: "+ LHCICLO.getText()+"\n Postmenopausia: "+ LHPOSMENOSPAUSIA.getText()+"\n Pre-Pubertad: "+ LHPREPUBERTAD.getText()+"\n Hombres Adultos "+ LHHOMBREADULTO1.getText()+"\n Hombres Pre-Pubertad "+LHHOMBREADOLESCENTE.getText()  +"\n \n \n",FontFactory.getFont("Arial",9,Font.NORMAL))); 
        }
        
  
 
        
        if (!PROGESTERONA.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Progesterona",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(PROGESTERONA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(PROGESTERONA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph("Fase Folicular: "+PROGFOLICULAR.getText() +"\n Fase Lutea: "+ PROGELUTEA.getText()+"\n Mitad de Fase Lutea: "+ PROGECICLO.getText()+"\n Postmenopausia: "+ PROGEPOSMENOSPAUSIA.getText()+"\n \n \n",FontFactory.getFont("Arial",9,Font.NORMAL))); 
        }
       
        
       if (!ESTRADIOL.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Estradiol",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(ESTRADIOL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(ESTRADIOL1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph("Fase Postmenopausica: "+ESpostmenop.getText() +"\n Ovulación: "+ ESovulacion.getText()+"\n Tardia Folicular: "+ EStardia.getText()+"\n Fase Lutea: "+ ESfase.getText()+"\n Embarazo: "+ ESembarazo.getText()+"\n Pubertad: "+ ESpubertad.getText()+"\n \n \n",FontFactory.getFont("Arial",9,Font.NORMAL)));
       }
       
       
       if (!PROLACTINA.getText().equals("")){ 
           Tabla6.addCell(new Paragraph("Prolactina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(PROLACTINA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(PROLACTINA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(PROnoembarazo.getText() +"\n",FontFactory.getFont("Arial",9,Font.NORMAL))); 

            }     
            
            
       
           if(!PSAL_BIOME.getText().equals("")){
           Tabla6.addCell(new Paragraph("ANTIGENO PROSTATICO LIBRE (PSAL)",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(PSAL_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(PSAL_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(PSAL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
       
           
            if(!PSAT_BIOME.getText().equals("")){
           Tabla6.addCell(new Paragraph("ANTIGENO PROSTATICO TOTAL (PSAT)",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(PSAT_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(PSAT_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(PSAT.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
            
             if(!RAZON_PSA.getText().equals("")){
           Tabla6.addCell(new Paragraph("RAZÓN PSA LIBRE Y TOTAL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(RAZON_PSA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(RAZON_PSA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(RAZONPSA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
      
       
           if (!FERRITINA_BIOME.getText().equals("")){ 
           Tabla6.addCell(new Paragraph("FERRITINA | BIOME",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(FERRITINA_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(FERRITINA_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph("Mujeres: "+FERRmujer.getText() +"\n Hombres: "+ FERRhombre.getText()+"\n Recién nacidos: "+ FERRnacidos.getText() +"\n Niños 6 meses - 15 Años: "+ FERRkids.getText() +"\n \n \n",FontFactory.getFont("Arial",9,Font.NORMAL))); 

            }
           
           
           
          if(!IGM_BIOME.getText().equals("")){
           Tabla6.addCell(new Paragraph("Ac. ANTI-Toxoplasma gondii IGM",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(IGM_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(IGM_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TOXOigm.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
           
          if(!IGG_BIOME.getText().equals("")){
           Tabla6.addCell(new Paragraph("Ac. ANTI-Toxoplasma gondii IGG",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(IGG_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(IGG_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TOXOigg.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
           
            
               
         if(!HEPATITISA_IGM.getText().equals("")){
           Tabla6.addCell(new Paragraph("Ac. ANTI-HEPATITIS A IGM",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(HEPATITISA_IGM.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(HEPATITISA_IGM1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(HEPAigm.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
       
          
           if(!HEPATITISB_BIOME.getText().equals("")){
           Tabla6.addCell(new Paragraph("Ags. DE SUPERFICIE DE HEPATITIS B | BIOME",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(HEPATITISB_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(HEPATITISB_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(SUPERFhepatitisB.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
       
           
        if(!HEPATITISB.getText().equals("")){
           Tabla6.addCell(new Paragraph("Ags. DE SUPERFICIE DE HEPATITIS B",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(HEPATITISB.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(HEPATITISB3.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(SuperficieHepatitisB2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }
           
        
         if(!HEPATITISB1.getText().equals("")){
           Tabla6.addCell(new Paragraph("Ac. ANTI-CORE DE HEPATITIS B",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(HEPATITISB1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(HEPATITISB2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(COREHEPATITISB.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }  
        
        
         if(!HEPATITISC.getText().equals("")){
           Tabla6.addCell(new Paragraph("Ags. DE HEPATITIS C",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(HEPATITISC.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(HEPATITISC2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(HEPATITISC1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }  
         
        
                
       if (!PYLOTY_IGM.getText().equals("")){ 
           Tabla6.addCell(new Paragraph("Ac. ANTI-Helicobacter pylori IGM",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(PYLOTY_IGM.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(PYLOTY_IGM1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph("Positivo: "+IGMpositivo.getText() +"\n Indeterminado: "+ TIGMindeterminado.getText()+"\n Negativo: "+ TIGMnegativo.getText() +"\n \n \n",FontFactory.getFont("Arial",9,Font.NORMAL))); 

            }     
            
         
            if (!PYLORI_IGG.getText().equals("")){ 
           Tabla6.addCell(new Paragraph("Ac. ANTI-Helicobacter pylori IGG",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(PYLORI_IGG.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(PYLORI_IGG1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph("Positivo: "+IGGpositivo.getText() +"\n Indeterminado: "+ TIGGindeterminado.getText()+"\n Negativo: "+ TIGGnegativo.getText() +"\n \n \n",FontFactory.getFont("Arial",9,Font.NORMAL))); 

            }     
            
         
          if(!TROPONINA_BIOME.getText().equals("")){
           Tabla6.addCell(new Paragraph("TROPONINA I",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TROPONINA_BIOME.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(TROPONINA_BIOME1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TROPONINA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     }  
               
             
         if(!HEMOGLOBINA.getText().equals("")){
           Tabla6.addCell(new Paragraph("HEMOGLOBINA GLICOSILADA (HbA1c)",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(HEMOGLOBINA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(HEMOGLOBINA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph("Diabetico: "+DIABETICO.getText()+ "\n No diabetico: "+ NODIABETICO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     } 
          
               
          
           if(!DENGUEIGM.getText().equals("")){
           Tabla6.addCell(new Paragraph("Ac. ANTI-DENGUE IGM",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(DENGUEIGM.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(DENGUEIGM1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(DENGUEIGM2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     } 
          
         
         
           if(!DENGUEIGG.getText().equals("")){
           Tabla6.addCell(new Paragraph("Ac. ANTI-DENGUE IGG",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(DENGUEIGG.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(DENGUEIGG1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(DENGUEIGG2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
     } 
          
             
            PdfPTable TableObservacion = new PdfPTable(1); 
            TableObservacion.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           // Tabla9.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            float[] medidaObservacion = {5f};
            TableObservacion.setWidthPercentage(100);  
            TableObservacion.setWidths(medidaObservacion);
            TableObservacion.setHorizontalAlignment(Element.ALIGN_CENTER);
            TableObservacion.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            
           
            Paragraph t9columna1 = new Paragraph("Observaciones");
            t9columna1.getFont().setStyle(Font.BOLD);
            t9columna1.getFont().setSize(9);        
            t9columna1.setFont(Letra);
            t9columna1.setAlignment(Element.ALIGN_LEFT);
            TableObservacion.addCell(t9columna1);
            TableObservacion.addCell(new Paragraph(JtextObservaciones.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));           
            
         
         
         
         
         
         
            PdfPTable Tablafirma = new PdfPTable(3); 
            Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tablafirma.setWidthPercentage(100);  
            float[] medidaCeldasP = {3f, 1f, 3f};
            Tablafirma.setWidths(medidaCeldasP);
            Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph tPcolumna1 = new Paragraph("\n\n\n\n  "+piepagina);
            tPcolumna1.getFont().setStyle(Font.BOLD);
            tPcolumna1.getFont().setSize(8);        
            tPcolumna1.setFont(Letra);
            tPcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna1);

                
            com.itextpdf.text.Image FirmaLcdo = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\dist\\imagen.bin");
            FirmaLcdo.setAlignment(Chunk.ALIGN_CENTER);
            Tablafirma.addCell(FirmaLcdo);

            Paragraph tPcolumna3 = new Paragraph("\n\n\n\n" + writer.getPageNumber()+ " Pág");
            tPcolumna3.getFont().setStyle(Font.BOLD);
            tPcolumna3.getFont().setSize(8);        
            tPcolumna3.setFont(Letra);
            tPcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna3);
           


           knowaboutlcdo(); 
           PdfPTable TablafirmaLcdo = new PdfPTable(1); 
           TablafirmaLcdo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           TablafirmaLcdo.setWidthPercentage(100);  
           float[] medidaCeldasFirma = {20f};
           TablafirmaLcdo.setWidths(medidaCeldasFirma);
           TablafirmaLcdo.setHorizontalAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
           Paragraph tPcolumnaFirma1 = new Paragraph("________________ \n "+NameOfLcdo);
           tPcolumnaFirma1.getFont().setStyle(Font.BOLD);
           tPcolumnaFirma1.getFont().setSize(8);        
           tPcolumnaFirma1.setFont(Letra);
           tPcolumnaFirma1.setAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.addCell(tPcolumnaFirma1);
           
           
           
           
           
           
           
           
           
           
   
           
            saltolinea.add("\n");
            
            /*PRIMERA PAGINA*/
            
         
 
           
             /*BODY*/
         //   doc.add(Tabla5);
        //    doc.add(saltolinea); 
            doc.add(Tabla6);
            doc.add(saltolinea);
 
            
            
            if (!JtextObservaciones.getText().equals("")){ 
            doc.add(TableObservacion);
            doc.add(saltolinea);
             }
            
            
            
            /*FOOTER*/
      
            
             doc.add(Tablafirma);
             doc.add(TablafirmaLcdo);
            
            
            
  
            
            doc.close();
            archivo.close();
        //  Desktop.getDesktop().open(file);
            
            
        } catch (DocumentException | IOException e) {
           System.out.println(e);
           JOptionPane.showMessageDialog(null, "NO SE CONSIGUE LA CARPETA FUNDAGINEBRA EN DISCO C", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
     
     
     
     
 String NameOfLcdo, Consultanlcdo;
     
     public void knowaboutlcdo(){
     
    Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null; 
         
         
         try{
         
       String query="Select FirmaLcdo from tableinfo where idinfo=? ";
       
       con = EnlaceBd.getConnection();
       ps = con.prepareStatement(query);
       ps.setInt(1, 1);
       rs=ps.executeQuery();
         
        if(rs.next()){
       Consultanlcdo= rs.getString("FirmaLcdo");
      
       if(!Consultanlcdo.equals("")){NameOfLcdo="Lcdo/a "+ Consultanlcdo;}
       else{NameOfLcdo="";}
       
       
         }

         }catch(Exception e){ System.out.println(e);}finally {
                closeResources(rs, ps, con);
    }
     }

     
     
     
     

      
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    public void callPacient() {
    Connection con = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    EnlaceBd cn = new EnlaceBd();

    String cedula = TXTPcedula.getText().trim();

    // Validación del campo cédula
    if (cedula.isEmpty() || !cedula.startsWith("V-")) {
        JOptionPane.showMessageDialog(null, "EL CAMPO CÉDULA NO PUEDE ESTAR VACÍO Y DEBE LLEVAR V-", "CAMPO VACÍO", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        con = cn.getConnection();
        String query = "SELECT Idpaciente FROM table_paciente WHERE Cedula = ?";
        ps = con.prepareStatement(query);
        ps.setString(1, cedula);
        rs = ps.executeQuery();

        if (rs.next()) {
            IdPaciente = rs.getInt("Idpaciente");

            String sql2 = "SELECT Nombre, Apellido, Cedula, Telefono, Correo, Direccion, Sexo, DATE_FORMAT(FechNacimiento, '%d/%m/%Y') AS Fecha FROM table_paciente WHERE Idpaciente = ?";
            ps = con.prepareStatement(sql2);
            ps.setInt(1,IdPaciente);
            rs = ps.executeQuery();

            if (rs.next()) {
                String nombre = rs.getString("Nombre");
                String apellido = rs.getString("Apellido");
                String telefono = rs.getString("Telefono");
                String correo = rs.getString("Correo");
                String direccion = rs.getString("Direccion");
                Sexo = rs.getString("Sexo");
                String nacimiento = rs.getString("Fecha");

                // Configuración de los campos de la interfaz
                TXTPnombre.setText(nombre);
                TXTPapellido.setText(apellido);
                TXTPcorreo.setText(correo);
                TXTPtelefono.setText(telefono);
                TXTPdireccion.setText(direccion);

                if (Sexo.equals("Femenino")) {
                    JRfemenino.setSelected(true);
                    JRMasculino.setSelected(false);
                } else if (Sexo.equals("Masculino")) {
                    JRMasculino.setSelected(true);
                    JRfemenino.setSelected(false);
                }

                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                FechaNacimiento.setDate(formato.parse(nacimiento));
                JPregistro.setVisible(true);
                TXTPcedula.setEnabled(false);
            }
        } else {
            int option = JOptionPane.showConfirmDialog(rootPane, "El paciente no se encuentra registrado. ¿Desea registrarlo?", "Registro Paciente", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                goToRegister();
            } else {
                BtnAgregar.setVisible(false);
                BtnSearch.setEnabled(true);
                TXTPcedula.setEnabled(true);
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
                closeResources(rs, ps, con);
    }
}
        
        
        

   
   
         
         
    
       
     
     
     
     public void goToRegister(){
   
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       JPacientes pac = new JPacientes();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(pac);
       pac.setClosable(true);
       pac.setIconifiable(true);
       
        try {
            pac.setMaximum(true);
        } catch (Exception e) {
        }
        pac.toFront();
        pac.setVisible(true);

   }
    
     
     
     
     
     
     
     public void AgregarPaciente(){                                             
    
    Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null;
    

          try {

              
                    
        java.sql.Date fechaU;
        Date dateU = FechaNacimiento.getDate();
        long dU = dateU.getTime();
        fechaU = new java.sql.Date(dU);
        
        
        
            String fecha = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts= fecha.split("/");
            String an = dateParts[0];
            String mes = dateParts[1];
            String dia = dateParts[2];
            String an_actual = Validar.fecha_actual();

            int edad;
            edad= Integer.parseInt(an_actual)-Integer.parseInt(an);
        
        
        
        
              
              
            String sql = "INSERT INTO table_paciente (Nombre, Apellido, Cedula,Telefono,Correo,Direccion, Sexo, FechNacimiento, edad) VALUES (?,?,?,?,?,?,?,?,?)";
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
      
            ps.setString(1, TXTPnombre.getText());
            ps.setString(2, TXTPapellido.getText());
            ps.setString(3, TXTPcedula.getText());
            ps.setString(4, TXTPtelefono.getText());
            ps.setString(5, TXTPcorreo.getText());
            ps.setString(6, TXTPdireccion.getText());
            ps.setString(7, Sexo);
            ps.setDate(8, fechaU);
            ps.setInt(9, edad);
            ps.execute();
  
            
            
  JOptionPane.showMessageDialog(null, "EL PACIENTE HA SIDO REGISTRADO","REGISTRO DE PACIENTES", 1);
        } catch (Exception e) {
      
            JOptionPane.showMessageDialog(null, e);
        }
          finally {
                 closeResources(rs, ps, con);
    }


      
          
          
    } 
     

    
    public void guardar_pdf(int codigo, int idexamen, int idpaciente, int idusuario, String Fecha, File ruta) {
        
        
   
        
        PdfDAO1 pa = new PdfDAO1();
        PdfVO po = new PdfVO();
        po.setCodigopdf(codigo);
        po.setIdexamen(idexamen);
        po.setIdpaciente(idpaciente);
        po.setIdusuario(idusuario);
        po.setFecha(Fecha);
        
        try {
            byte[] pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
            po.setArchivopdf(pdf);
        } catch (IOException ex) {
            po.setArchivopdf(null);
            System.out.println("Error al agregar archivo pdf "+ex.getMessage());
        }
        pa.Agregar_PdfVO(po);
    }

    String PdfNames;
    
    public void guardarReporte()
    {

      
        ruta_archivo="C://Fundaginebra//Reportes//"+PdfNames+".pdf";
        int idexamen = 1040;
       
   
        String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
        sql s = new sql();
        
        int codigo = s.auto_increment("SELECT MAX(codigopdf) FROM table_laboratorio;");
        File ruta = new File(ruta_archivo);
       
        
        
        
        if ( ruta_archivo.trim().length() != 0) {
            guardar_pdf(codigo, idexamen, IdPaciente, idusuario, Fecha, ruta);
 
         //   tpdf.visualizar_PdfVO(tabla);
            ruta_archivo = "";
           // activa_boton(false, false, false);
  
        } else {
            JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
        }
    
    }
     /*
         public void seleccionar_pdf() {
        JFileChooser j = new JFileChooser();
        FileNameExtensionFilter fi = new FileNameExtensionFilter("pdf", "pdf");
        j.setFileFilter(fi);
        int se = j.showOpenDialog(this);
        if (se == 0) {
            this.btnseleccionar.setText("" + j.getSelectedFile().getName());
            ruta_archivo = j.getSelectedFile().getAbsolutePath();

        } else {
        }
    }
*/
     
     
     
     
     
     
     
     
     
     
     
     
     
          public void ActivarCampos() {
   
                 TXTPnombre.setEditable(true);
                 TXTPapellido.setEditable(true);
                 TXTPcorreo.setEditable(true);
                 TXTPtelefono.setEditable(true);
                 TXTPdireccion.setEditable(true);
                 JRMasculino.setEnabled(true);
                 JRfemenino.setEnabled(true);
                 FechaNacimiento.setEnabled(true);
                 BtnAgregar.setEnabled(true);
                 BtnAgregar.setVisible(true);
                
                 
       
           
    }
    
                
    public void limpiarCamposNoregistro() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true); 
      FechaNacimiento.setCalendar(null);
    }  
    
       
                   public void DesactivarCampos() {
   
                 TXTPnombre.setEditable(false);
                 TXTPapellido.setEditable(false);
                 TXTPcorreo.setEditable(false);
                 TXTPtelefono.setEditable(false);
                 TXTPdireccion.setEditable(false);
                 JRMasculino.setEnabled(false);
                 JRfemenino.setEnabled(false);
                 FechaNacimiento.setEnabled(false);
                 BtnAgregar.setEnabled(false);
               
       
           
    }
     
     
     
     
     
     

    String Sexo;
    int IdPaciente;
    
    
    public void limpiarCampos() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcedula.setText("V-");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true);  
      FechaNacimiento.setCalendar(null);
    }
    
    
        
        void limpiarTabla() {
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i);
            i = i - 1;
        }
    }
        
        
   
        

   int Maxid;
   public void MaxIdestudios() {
   Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs=null;
    
   
       try {

            String sql = "SELECT MAX(COdigopdf) from table_laboratorio ";
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
            Maxid= rs.getInt("MAX(codigopdf)")+1;
        
            }
            
          
            

        } catch (Exception e) { JOptionPane.showMessageDialog(null, e);}
     
       finally {
                     closeResources(rs, ps, con);
        }
     
     
     }
    
     
           public void cancelarexamen() 
        
        {
        
        
         jButton34.setEnabled(true);
        

              
              
              
                    TSH_RJL.setText("");
                    TL3_RJL.setText("");
                    T4L_RJL.setText("");
                    TSH_BIOME.setText("");
                    TS3_BIOME.setText("");
                    TS4_BIOME.setText("");
                    T3L_REACTIVA.setText("");
                    T4L_REACTIVA.setText("");
                    T3T_AUTOBIO.setText("");
                    T4T_AUTOBIO.setText("");
                    INSULINA_BIOME.setText("");
                    INSULITA_POSTBIOME.setText("");
                    INSULINA_REACTIVO.setText("");
                    INSULITA_POSTREACTIVA.setText("");
                    INSULINA_INMU.setText("");
                    INSULINA_POSTINMUKIT.setText("");
                    
                    FSH_BIOME.setText("");
                    LH_BIOME.setText("");
                    PROGESTERONA.setText("");
                    ESTRADIOL.setText("");
                    PROLACTINA.setText("");
                    PSAL_BIOME.setText("");
                    PSAT_BIOME.setText("");
                    RAZON_PSA.setText("");
                    FERRITINA_BIOME.setText("");
                    IGM_BIOME.setText("");
                    IGG_BIOME.setText("");
                    HEPATITISA_IGM.setText("");
                    HEPATITISB_BIOME.setText("");
                    HEPATITISB.setText("");
                    HEPATITISB1.setText("");
                    HEPATITISC.setText("");
                
                    PYLOTY_IGM.setText("");
                    PYLORI_IGG.setText("");
                    TROPONINA_BIOME.setText("");
                    HEMOGLOBINA.setText("");
                    JtextObservaciones.setText("");
                    DENGUEIGM.setText("");
                    DENGUEIGG.setText("");
                    
                    
                    TSH_RJL.setBackground(Color.WHITE);
                    TL3_RJL.setBackground(Color.WHITE);
                    T4L_RJL.setBackground(Color.WHITE);
                    TSH_BIOME.setBackground(Color.WHITE);
                    TS3_BIOME.setBackground(Color.WHITE);
                    TS4_BIOME.setBackground(Color.WHITE);
                    T3L_REACTIVA.setBackground(Color.WHITE);
                    T4L_REACTIVA.setBackground(Color.WHITE);
                    T3T_AUTOBIO.setBackground(Color.WHITE);
                    T4T_AUTOBIO.setBackground(Color.WHITE);
                    INSULITA_POSTBIOME.setBackground(Color.WHITE);
                    INSULINA_BIOME.setBackground(Color.WHITE);
                      
           
        }
           
         
           
           
           public void ActualizarReferencia()   {
                   
                   
               actualizarTiroides();
               actualizarInsulinas();
               actualizarFemenino();
               actualizarHelycobacter();
               actualizarFerritina();

                  }
           
           
           
           

           
public class HeaderFooterPageEvent extends PdfPageEventHelper {

    public void onStartPage(PdfWriter writer, Document document) {
        try {
            
            String Paciente=TXTPnombre.getText()+ " "+ TXTPapellido.getText(); 
            String fechaN = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts1= fechaN.split("/");
            String an1 = dateParts1[0];
            String mes1 = dateParts1[1];
            String dia1 = dateParts1[2];
            
            
            String an_actual = Validar.fecha_actual();
            String mes_actual = Validar.fecha_mes();
            String dia_actual = Validar.fecha_dia();
            

            
            int diferenciadia=Integer.parseInt(dia_actual)- Integer.parseInt(dia1);
            int diferenciames=Integer.parseInt(mes_actual)- Integer.parseInt(mes1);
            int diferencian=Integer.parseInt(an_actual)- Integer.parseInt(an1);;

            if (diferenciames < 0 || (diferenciames == 0 && diferenciadia < 0)) {
            diferencian = diferencian - 1;}
            
            
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            
      

            Paragraph fecha = new Paragraph();
    //      Font negrita = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
            fecha.add(Chunk.NEWLINE);
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
            String Hora = Menu.Time.getText()+" "+Menu.jLabel102.getText();
            
            
            BaseFont BF2 = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
          

            PdfContentByte cb = writer.getDirectContent();
            cb.beginText();
            cb.setFontAndSize(BF2, 12);

          // Ajustar el espacio entre el encabezado y el cuerpo (por ejemplo, margen superior de 50)
           

          com.itextpdf.text.Image imagen = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\src\\imagenes\\Fundacionlogo1.png");
          imagen.setAbsolutePosition(50, 750);  // Ajusta la posición de la imagen según tus necesidades
          imagen.scaleToFit(110, 110);  // Ajusta el tamaño de la imagen según tus necesidades
          cb.addImage(imagen);
          
          
            cb.setFontAndSize(BF2, 12);
            cb.setTextMatrix(200, 800);
            cb.showText(empresa);
            cb.setFontAndSize(BF, 10);
            cb.setTextMatrix(260, 790);
            cb.showText(rif);
            
            
            
            if(fechaEstudio==null){ 
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 780);
            cb.showText("FECHA: "+ Fecha);
            
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 770);
            cb.showText("HORA: "+ Hora);    
              
            }
            
            else if( !fechaEstudio.equals(Fecha)){          
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 770);
            cb.showText("FECHA: "+ fechaEstudio);
            }
            
            else{
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 780);
            cb.showText("FECHA: "+ Fecha);
            
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 770);
            cb.showText("HORA: "+ Hora);
            }
  
  
  
            if(!Factura.equals("")){
            cb.setFontAndSize(BF2, 8);
            cb.setTextMatrix(460, 760);
            cb.showText("FACTURA: #"+ Factura);
            }

            
            cb.setFontAndSize(BF2, 8);
            cb.setTextMatrix(235, 740);
            cb.showText(ubicacion);
          
            cb.setFontAndSize(BF2, 8);
            cb.setTextMatrix(210, 730);
            cb.showText(telefonos); 
            cb.setTextMatrix(168, 725);
            cb.showText("__________________________________________________________________");

            cb.endText();

            
            
       
            
     
            // ... Continúa con el resto del contenido

            
            PdfPTable Tabla = new PdfPTable(3); 
            Tabla.setTotalWidth(document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin()); 
           
            float[] medidaCeldas = {1f, 3f, 1f };
            Tabla.setWidths(medidaCeldas);
            Tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            if(order>0){
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid+" | "+ order);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1);
            }
            else{
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1); 
            }
     
                
            Paragraph tcolumna2 = new Paragraph("RESULTADOS DEL ANÁLISIS");
            tcolumna2.getFont().setStyle(Font.BOLD);
            tcolumna2.getFont().setSize(12);        
            tcolumna2.setFont(Letra);
            tcolumna2.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna2);

            Paragraph tcolumna3 = new Paragraph("N° PACIENTE: " +IdPaciente+" ");
            tcolumna3.getFont().setStyle(Font.BOLD);
            tcolumna3.getFont().setSize(8);        
            tcolumna3.setFont(Letra);
            tcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna3);
            
            
            PdfPTable Tabla0 = new PdfPTable(4); 
            Tabla0.getDefaultCell().setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla0.setTotalWidth(document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin()); 
            float[] medidaCeldas0 = {3f, 2f, 1f,2f};
            Tabla0.setWidths(medidaCeldas0);
            Tabla0.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla0.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t0columna1 = new Paragraph("PACIENTE: "+ Paciente);
            t0columna1.getFont().setStyle(Font.BOLD);
            t0columna1.getFont().setSize(8);        
            t0columna1.setFont(Letra);
            t0columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna1);
     
                
            Paragraph t0columna2 = new Paragraph("CÉDULA: "+TXTPcedula.getText());
            t0columna2.getFont().setStyle(Font.BOLD);
            t0columna2.getFont().setSize(8);        
            t0columna2.setFont(Letra);
            t0columna2.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna2);

            Paragraph t0columna3 = new Paragraph("EDAD:" +Integer.toString(diferencian) + " años");
            t0columna3.getFont().setStyle(Font.BOLD);
            t0columna3.getFont().setSize(8);        
            t0columna3.setFont(Letra);
            t0columna3.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna3);
        
            Paragraph t0columna4 = new Paragraph("SEXO: "+ Sexo);
            t0columna4.getFont().setStyle(Font.BOLD);
            t0columna4.getFont().setSize(8);        
            t0columna4.setFont(Letra);
            t0columna4.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna4);
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
               float footerHeight = 580;
               float footerHeight0 = 563;
   
            
            
            Tabla.writeSelectedRows(0, -1, document.leftMargin(), document.bottom() + footerHeight, writer.getDirectContent());
            Tabla0.writeSelectedRows(0, -1, document.leftMargin(), document.bottom() + footerHeight0, writer.getDirectContent());
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}     
        
           
           
           
           
        PdfPageEventHelper eventHelper = new PdfPageEventHelper() {
        public void onEndPage(PdfWriter writer, Document document) {
        
    
 try{
 
        com.itextpdf.text.Image FirmaDoctor = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\dist\\imagen.bin");
           
        PdfPTable footerTable = new PdfPTable(3);
        footerTable.setTotalWidth(document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin());
        footerTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
        footerTable.setHorizontalAlignment(Element.ALIGN_CENTER);

        float footerHeight = -26;
        float x = (document.left() + document.right()) / 2;
        float y = document.bottom() - footerHeight;

        footerTable.writeSelectedRows(0, -1, x, y, writer.getDirectContent());
    

 
       Paragraph tfooter1 = new Paragraph(piepagina, new Font(FontFactory.getFont("Arial",9,Font.NORMAL)));  
       PdfPCell piepag = new PdfPCell(tfooter1 );
       piepag.setBorder(Rectangle.NO_BORDER);
       // Alineas la imagen y el texto al centro horizontal y vertical de la celda
       piepag.setHorizontalAlignment(Element.ALIGN_CENTER);
       piepag.setVerticalAlignment(Element.ALIGN_MIDDLE);
       footerTable.addCell(piepag);
     
       
        
       Phrase phrase = new Phrase();
       FirmaDoctor.scaleToFit(100, 100);
       FirmaDoctor.setAlignment(Chunk.ALIGN_CENTER);
       phrase.add(new Chunk(FirmaDoctor, 0, 0));
       phrase.add(new Chunk("\n ______________ \n" + NameOfLcdo, new Font(FontFactory.getFont("Arial",9,Font.NORMAL))));
         
       PdfPCell imgfirma = new PdfPCell(phrase);
       imgfirma.setBorder(Rectangle.NO_BORDER);
       // Alineas la imagen y el texto al centro horizontal y vertical de la celda
       imgfirma.setHorizontalAlignment(Element.ALIGN_CENTER);
       imgfirma.setVerticalAlignment(Element.ALIGN_MIDDLE);
       footerTable.addCell(imgfirma);
            
        
        
        
       Paragraph tfooter2 = new Paragraph(writer.getPageNumber()+ " Pág", new Font(FontFactory.getFont("Arial",9,Font.NORMAL)));
           
       PdfPCell numpag = new PdfPCell(tfooter2);
       numpag.setBorder(Rectangle.NO_BORDER);
       
       
       // Alineas la imagen y el texto al centro horizontal y vertical de la celda
       numpag.setHorizontalAlignment(Element.ALIGN_CENTER);
       numpag.setVerticalAlignment(Element.ALIGN_MIDDLE);
       footerTable.addCell(numpag);
        
       //footerTable.writeSelectedRows(0, -1, document.leftMargin(), document.bottomMargin(), writer.getDirectContent());
       

        footerTable.writeSelectedRows(0, -1, document.leftMargin(), document.bottom() + footerHeight, writer.getDirectContent());
           
 } catch(Exception e){ System.out.println(e);}


        
    }
    };   
       
       
       
       
       
           
           
 
        
   public void CallReferencia() {
       
callrefTiroides();
callrefInsulina();
callrefFemenina();
callrefHelicobacter();
callrefFerritina();
callrefToxo();

    }
         
   
   
   
    public void callrefTiroides(){
   
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
    
            
        
        
          try {

            String sql2 = "SELECT * FROM `referencia_tiroideo`";

            con = cn.getConnection();
            ps = con.prepareStatement(sql2);
            rs = ps.executeQuery();
            if (rs.next()) {
            
            String T3libre = rs.getString("T3libre");
            String T4libre = rs.getString("T4libre");
            String TSH = rs.getString("TSH");
            String TSH_biome = rs.getString("TSH_biome");
       
            String T3libre_biome = rs.getString("T3libre_biome");
            String T4libre_biome = rs.getString("T4libre_biome");
 
            String T3libre_reactiva = rs.getString("T3libre_reactiva");
            String T4libre_reactiva = rs.getString("T4libre_reactiva");   
        
            String T3libre_autobio = rs.getString("T3libre_autobio");
            String T4libre_autobio = rs.getString("T4libre_autobio");      
       
            TL3_RJL1.setText(T3libre);
            T4L_RJL1.setText(T4libre);
            TSH_RJL1.setText(TSH); 
            TSH_BIOME1.setText(TSH_biome); 
         
            TS3_BIOME1.setText(T3libre_biome);
            TS4_BIOME1.setText(T4libre_biome);
            
            T3L_REACTIVA1.setText(T3libre_reactiva);
            T4L_REACTIVA1.setText(T4libre_reactiva);
            
            T3T_AUTOBIO1.setText(T3libre_autobio);
            T4T_AUTOBIO1.setText(T4libre_autobio);

            }

        } catch (Exception e) {System.out.println(e);
        }  
        
        
         finally {
                      closeResources(rs, ps, con);
        }  
        
   }
   
   
   
   
   
     public void callrefInsulina(){
   
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
    
            
        
        
          try {

            String sql2 = "SELECT * FROM `referencia_insulina`";

            con = cn.getConnection();
            ps = con.prepareStatement(sql2);
            rs = ps.executeQuery();
            if (rs.next()) {
            
            String Insulina_biome = rs.getString("InsulinaBasal");
            String InsulinaP_biome = rs.getString("InsulinaPandrial");
            String Insulina_reactivaN = rs.getString("insulina_reactivaN");
            String Insulina_reactivaA = rs.getString("insulina_reactivaA");
            String Insulina_reactivaD = rs.getString("insulina_reactivad");
            String insulinapandrial_reactiva = rs.getString("insulinapandrial_reactiva");
            String insulina_inmukit = rs.getString("insulina_inmukit");
            String insulinapandrial_inmukit= rs.getString("insulinapandrial_inmukit");
      
        
                
       
            INSULINA_BIOME1.setText(Insulina_biome);
            INSULITA_POSTBIOME1.setText(InsulinaP_biome);
            INSULINA_REACTIVON.setText(Insulina_reactivaN); 
            INSULINA_REACTIVOA.setText(Insulina_reactivaA); 
            INSULINA_REACTIVOD.setText(Insulina_reactivaD);
            INSULITA_POSTREACTIVA1.setText(insulinapandrial_reactiva);
            INSULINA_INMU1.setText(insulina_inmukit);
            INSULINA_POSTINMUKIT1.setText(insulinapandrial_inmukit);
            
     

            }

        } catch (Exception e) {System.out.println(e);
        }  
        
        
         finally {
                    closeResources(rs, ps, con);
        
        }  
        
   }
    
    

   
     
     
     
     
     
     
   
   
   
   public void callrefFemenina(){
   
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
    
            
        
        
          try {

            String sql2 = "SELECT * FROM `referencia_femenina`";

            con = cn.getConnection();
            ps = con.prepareStatement(sql2);
            rs = ps.executeQuery();
            if (rs.next()) {
            
            String FSHfaseFolicular = rs.getString("FSHfaseFolicular");
            String FSHfaseLutea = rs.getString("FSHfaseLutea");
            String FSHMitaddeCiclo = rs.getString("FSHMitaddeCiclo");
            String FSHPostmenopausia = rs.getString("FSHPostmenopausia");
            String LHfaseFolicular = rs.getString("LHfaseFolicular");
            String LHfaseLutea = rs.getString("LHfaseLutea");
            String LHMitaddeCiclo = rs.getString("LHMitaddeCiclo");
            String LHPostmenopausia = rs.getString("LHPostmenopausia");
    
            String ProgesfaseFolicular = rs.getString("ProgesfaseFolicular");
            String ProgesfaseLutea = rs.getString("ProgesfaseLutea");
            String Progesmitadlutea = rs.getString("Progesmitadlutea");
            String ProgesPostmenopausia = rs.getString("ProgesPostmenopausia");
            String EstradiolFasePostmenopausica = rs.getString("EstradiolFasePostmenopausica");
            String EstradiolOvulacion = rs.getString("EstradiolOvulacion");
            String EstradiolTardiaFolicular = rs.getString("EstradiolTardiaFolicular");
            String EstradiolFaseLutea = rs.getString("EstradiolFaseLutea");
            String EstradiolEmbarazo = rs.getString("EstradiolEmbarazo");
            String EstradiolPubertad = rs.getString("EstradiolPubertad");
            String ProlacNoembarazo = rs.getString("ProlacNoembarazo");
            String ProlacEmbarazo = rs.getString("ProlacEmbarazo");
            String ProlacPostmenopausia = rs.getString("ProlacPostmenopausia");
            String FSHHombres = rs.getString("FSHHombres");
            String LHPubertad = rs.getString("LHprepubertad");
            String LHHombres = rs.getString("LHHombres");
            String LHPubertadH = rs.getString("LHprepubertadH"); 
   
            
  
            
                
             FSHFOLICULARB.setText(FSHfaseFolicular); 
             FSHLUTEAB.setText(FSHfaseLutea); 
             FSHCICLOB.setText(FSHMitaddeCiclo); 
             FSHPOSTMENOSPAUSIAB.setText(FSHPostmenopausia); 
             FSHHOMBRESB.setText(FSHHombres); 
             
             LFFOLICULAR.setText(LHfaseFolicular); 
             LHLUTEA.setText(LHfaseLutea); 
             LHCICLO.setText(LHMitaddeCiclo); 
             LHPOSMENOSPAUSIA.setText(LHPostmenopausia); 
             LHPREPUBERTAD.setText(LHPubertad);
             LHHOMBREADULTO1.setText(LHHombres);
             LHHOMBREADOLESCENTE.setText(LHPubertadH);
             
             
             PROGFOLICULAR.setText(ProgesfaseFolicular); 
             PROGELUTEA.setText(ProgesfaseLutea); 
             PROGECICLO.setText(Progesmitadlutea); 
             PROGEPOSMENOSPAUSIA.setText(ProgesPostmenopausia);
             
             
             ESpostmenop.setText(EstradiolFasePostmenopausica); 
             ESovulacion.setText(EstradiolOvulacion); 
             EStardia.setText(EstradiolTardiaFolicular); 
             ESfase.setText(EstradiolFaseLutea);
             ESembarazo.setText(EstradiolEmbarazo); 
             ESpubertad.setText(EstradiolPubertad);
         
             
             PROnoembarazo.setText(ProlacNoembarazo);
     //        PROembarazo.setText(ProlacEmbarazo);
     //        PROpostmenos.setText(ProlacPostmenopausia);
             
             
           
             
 
            }

        } catch (Exception e) {System.out.println(e);
        }  
        
        
         finally {
                     closeResources(rs, ps, con);
        
        }  
        
   }
   
   
   
   
     public void callrefHelicobacter(){
   
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
    

          try {

            String sql2 = "SELECT * FROM `referencia_helycobacter`";

            con = cn.getConnection();
            ps = con.prepareStatement(sql2);
            rs = ps.executeQuery();
            if (rs.next()) {
            
            String PyloriIgM = rs.getString("PyloriIgM");
            String PyloriIgG = rs.getString("PyloriIgG");
            String IGMindeterminado = rs.getString("IGMindeterminado");
            String IGMnegativo = rs.getString("IGMnegativo");
            String IGGindeterminado= rs.getString("IGGindeterminado");
            String IGGnegativo = rs.getString("IGGnegativo");
       

            IGMpositivo.setText(PyloriIgM);
            IGGpositivo.setText(PyloriIgG);
            
            TIGMindeterminado.setText(IGMindeterminado);
            TIGMnegativo.setText(IGMnegativo);
           
            TIGGindeterminado.setText(IGGindeterminado);
            TIGGnegativo.setText(IGGnegativo);
            
            }

        } catch (Exception e) {System.out.println(e);
        }  
        
        
         finally {
                     closeResources(rs, ps, con);
        }  
        
   }
   
   
   
   
        public void callrefFerritina(){
   
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
    

          try {

            String sql2 = "SELECT * FROM `referencia_ferrocinetico` ";

            con = cn.getConnection();
            ps = con.prepareStatement(sql2);
            rs = ps.executeQuery();
            if (rs.next()) {
            
            String Mujeres = rs.getString("Mujeres");
            String Hombres = rs.getString("Hombres");
            String Rn = rs.getString("Rn");
            String Kids = rs.getString("Kids");
   
       

            FERRmujer.setText(Mujeres);
            FERRhombre.setText(Hombres);  
            FERRnacidos.setText(Rn);
            FERRkids.setText(Kids);
       
            
            }

        } catch (Exception e) {System.out.println(e);
        }  
        
        
         finally {
                    closeResources(rs, ps, con);
        }  
        
   }
   
        
        
     public void callrefToxo(){
   
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
    

          try {

            String sql2 = "SELECT * FROM `referencia_toxoplasma` ";

            con = cn.getConnection();
            ps = con.prepareStatement(sql2);
            rs = ps.executeQuery();
            if (rs.next()) {
            
            String IGM = rs.getString("IGM");
            String IGG = rs.getString("IGG");
 
   
       

            TOXOigm.setText(IGM);
            TOXOigg.setText(IGG);  
   
       
            
            }

        } catch (Exception e) {System.out.println(e);
        }  
        
        
         finally {
                   closeResources(rs, ps, con);
        
        }  
        
   }     
        
        
        
     
     public void actualizarTiroides(){
     
       Connection con=null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps=null;
        ResultSet rs=null;

        
        
        
        
             try {
       String sql = "UPDATE `referencia_tiroideo`\n" +
               
"SET\n" +
"    `T3libre` = ?,\n" +
"    `T4libre` = ?,\n" +
"    `TSH` = ?,\n" +
"    `TSH_biome` = ?,\n" +
"    `T3libre_biome` = ?,\n" +
"    `T4libre_biome` = ?,\n" +
"    `T3libre_reactiva` = ?,\n" +
"    `T4libre_reactiva` = ?,\n" +
"    `T3libre_autobio` = ?,\n" +
"    `T4libre_autobio` = ?";    
                    

            
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, TL3_RJL1.getText());
            ps.setString(2, T4L_RJL1.getText());
            ps.setString(3, TSH_RJL1.getText());
            ps.setString(4, TSH_BIOME1.getText());
            ps.setString(5, TS3_BIOME1.getText());
            ps.setString(6, TS4_BIOME1.getText());
            ps.setString(7, T3L_REACTIVA1.getText());
            ps.setString(8, T4L_REACTIVA1.getText());
            ps.setString(9, T3T_AUTOBIO1.getText());
            ps.setString(10, T4T_AUTOBIO1.getText());
            
            ps.executeUpdate();

       
        } catch (Exception e) {
            System.out.println(e);
        }
             
               finally {
                     closeResources(rs, ps, con);
        
    }
     
     
     }
     
     
     
        public void actualizarInsulinas(){
     
       Connection con=null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps=null;
        ResultSet rs=null;

        
        
        
        
             try {
       String sql = "UPDATE `referencia_insulina`\n" +
"SET\n" +
"    `InsulinaBasal` = ?,\n" +
"    `InsulinaPandrial` = ?,\n" +
"    `insulina_reactivaN` = ?,\n" +
"    `insulina_reactivaA` = ?,\n" +
"    `insulina_reactivaD` = ?,\n" +
"    `insulinapandrial_reactiva` = ?,\n" +
"    `insulina_inmukit` = ?,\n" +
"    `insulinapandrial_inmukit` = ?";    
                    

            
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, INSULINA_BIOME1.getText());
            ps.setString(2, INSULITA_POSTBIOME1.getText());
            ps.setString(3, INSULINA_REACTIVON.getText());
            ps.setString(4, INSULINA_REACTIVOA.getText());
            ps.setString(5, INSULINA_REACTIVOD.getText());
            ps.setString(6, INSULITA_POSTREACTIVA1.getText());
            ps.setString(7, INSULINA_INMU1.getText());
            ps.setString(8, INSULINA_POSTINMUKIT1.getText());
     
            ps.executeUpdate();

      
        } catch (Exception e) {
            System.out.println(e);
        }
             
               finally {
                  closeResources(rs, ps, con);
        
    }
     
     
     }
     
        
        
        
       public void actualizarFemenino() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "UPDATE `referencia_femenina`\n" +
            "SET\n" +
            "    `FSHfaseFolicular` = ?,\n" +
            "    `FSHfaseLutea` = ?,\n" +
            "    `FSHMitaddeCiclo` = ?,\n" +
            "    `FSHPostmenopausia` = ?,\n" +
            "    `FSHHombres` = ?,\n" +
            "    `LHfaseFolicular` = ?,\n" +
            "    `LHfaseLutea` = ?,\n" +
            "    `LHMitaddeCiclo` = ?,\n" +
            "    `LHPostmenopausia` = ?,\n" +
            "    `ProgesfaseFolicular` = ?,\n" +
            "    `ProgesfaseLutea` = ?,\n" +
            "    `Progesmitadlutea` = ?,\n" +
            "    `ProgesPostmenopausia` = ?,\n" +
            "    `EstradiolFasePostmenopausica` = ?,\n" +
            "    `EstradiolOvulacion` = ?,\n" +
            "    `EstradiolTardiaFolicular` = ?,\n" +
            "    `EstradiolFaseLutea` = ?,\n" +
            "    `EstradiolEmbarazo` = ?,\n" +
            "    `EstradiolPubertad` = ?,\n" +
            "    `ProlacNoembarazo` = ?,\n" +
            "    `LHHombres` = ?,\n"+
            "    `LHprepubertadH` =?,\n"+
            "    `LHprepubertad` = ?" ;
                
                
                
               

        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setString(1, FSHFOLICULARB.getText());
        ps.setString(2, FSHLUTEAB.getText());
        ps.setString(3, FSHCICLOB.getText());
        ps.setString(4, FSHPOSTMENOSPAUSIAB.getText());
        ps.setString(5, FSHHOMBRESB.getText());
        ps.setString(6, LFFOLICULAR.getText());
        ps.setString(7, LHLUTEA.getText());
        ps.setString(8, LHCICLO.getText());
        ps.setString(9, LHPOSMENOSPAUSIA.getText());
        ps.setString(10, PROGFOLICULAR.getText());
        ps.setString(11, PROGELUTEA.getText());
        ps.setString(12, PROGECICLO.getText());
        ps.setString(13, PROGEPOSMENOSPAUSIA.getText());
        ps.setString(14, ESpostmenop.getText());
        ps.setString(15, ESovulacion.getText());
        ps.setString(16, EStardia.getText());
        ps.setString(17, ESfase.getText());
        ps.setString(18, ESembarazo.getText());
        ps.setString(19, ESpubertad.getText());
        ps.setString(20, PROnoembarazo.getText());
     // ps.setString(21, PROembarazo.getText());
     // ps.setString(22, PROpostmenos.getText());
        ps.setString(21, LHHOMBREADULTO1.getText());
        ps.setString(22, LHHOMBREADOLESCENTE.getText());
        ps.setString(23, LHPREPUBERTAD.getText());
        ps.executeUpdate();

      
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
                 closeResources(rs, ps, con);
    }
}
        
        
        
        
        
         public void actualizarHelycobacter(){
     
       Connection con=null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps=null;
        ResultSet rs=null;

        
        
        
        
             try {
String sql = "UPDATE `referencia_helycobacter` SET " +
             "`PyloriIgM` = ?, " +
             "`PyloriIgG` = ?, " +
             "`IGMindeterminado` = ?, " +
             "`IGMnegativo` = ?, " +
             "`IGGindeterminado` = ?, " +
             "`IGGnegativo` = ?";

            
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, IGMpositivo.getText());
            ps.setString(2, IGGpositivo.getText());
            ps.setString(3, TIGMindeterminado.getText());
            ps.setString(4, TIGMnegativo.getText());
            ps.setString(5, TIGGindeterminado.getText());
            ps.setString(6, TIGGnegativo.getText());
            ps.executeUpdate();

        } catch (Exception e) {
            System.out.println(e);
        }
             
               finally {
                    closeResources(rs, ps, con);
        
    }
     
     
     }
        
        
         
         public void actualizarFerritina(){
     
       Connection con=null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps=null;
        ResultSet rs=null;

        
        
        
        
             try {
String sql = "UPDATE `referencia_ferrocinetico` SET " +
             "`Mujeres` = ?, " +
             "`Hombres` = ?, " +
             "`Rn` = ?, " +
             "`Kids` = ?";

            
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, FERRmujer.getText());
            ps.setString(2, FERRhombre.getText());
            ps.setString(3, FERRnacidos.getText());
            ps.setString(4, FERRkids.getText());
            ps.executeUpdate();

          
        } catch (Exception e) {
            System.out.println(e);
        }
             
               finally {
                     closeResources(rs, ps, con);
        
    }
     
     
     }
         
         
         
         
         
        
        
        
   
              public void AuditoriaAgregar(){
            
            
              Connection con=null;
              EnlaceBd cn = new EnlaceBd();
              PreparedStatement ps=null;
              ResultSet rs=null;
              try {
            
              String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Agrego al paciente "+ TXTPnombre.getText()+" "+TXTPapellido.getText() +" " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idusuario);
            ps.setInt(2, idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
       finally {
                  closeResources(rs, ps, con);
        
    }
     
    }               
                    
          public void AuditoriaModificar(){
            
            
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Modificó los valores referenciales en: Pruebas especiales " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idusuario);
            ps.setInt(2, idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
       finally {
                   closeResources(rs, ps, con);
        
    }
     
    }                                        
                          
                
          
          
          
    public void mostrarTiroideo() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_tiroideo` WHERE id_historiaTI=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            
            /*
            3	T3libre	varchar(20)	utf8mb4_general_ci		Sí	NULL			Cambiar Cambiar	Eliminar Eliminar	
	4	T4libre	varchar(20)	utf8mb4_general_ci		Sí	NULL			Cambiar Cambiar	Eliminar Eliminar	
	5	TSH	varchar(20)	utf8mb4_general_ci		Sí	NULL			Cambiar Cambiar	Eliminar Eliminar	
	6	T3total	varchar(20)	utf8mb4_general_ci		Sí	NULL			Cambiar Cambiar	Eliminar Eliminar	
	7	T4total	varchar(20)	utf8mb4_general_ci		Sí	NULL			Cambiar Cambiar	Eliminar Eliminar	
	8	TSH_biome	varchar(50)	utf8mb4_general_ci		Sí	NULL			Cambiar Cambiar	Eliminar Eliminar	
	9	T3L_REACTIVA	varchar(50)	utf8mb4_general_ci		Sí	NULL			Cambiar Cambiar	Eliminar Eliminar	
	10	T4L_REACTIVA	varchar(50)	utf8mb4_general_ci		Sí	NULL			Cambiar Cambiar	Eliminar Eliminar	
	11	T3T_AUTOBIO	varchar(50)	utf8mb4_general_ci		Sí	NULL			Cambiar Cambiar	Eliminar Eliminar	
	12	T4T_AUTOBIO	
            
            
            
                  ps.setInt(1, idHistoriaTI);
            ps.setString(2, T3libre);
            ps.setString(3, T4libre);
            ps.setString(4, TSH);
            ps.setString(5, T3total);
            ps.setString(6, T4total);
            ps.setString(7, TSH_BIOME);
            ps.setString(8, T3L_REACTIVA);
            ps.setString(9, T4L_REACTIVA);
            ps.setString(10, T3T_AUTOBIO);
            ps.setString(11, T4T_AUTOBIO);
            
            */
            
            
            
            TL3_RJL.setText(rs.getString("T3libre"));
            T4L_RJL.setText(rs.getString("T4libre"));
            TSH_RJL.setText(rs.getString("TSH"));
         
            TS3_BIOME.setText(rs.getString("T3total"));
            TS4_BIOME.setText(rs.getString("T4total"));
            TSH_BIOME.setText(rs.getString("TSH_BIOME"));
           
            T3L_REACTIVA.setText(rs.getString("T3L_REACTIVA"));
            T4L_REACTIVA.setText(rs.getString("T4L_REACTIVA"));
            
            T3T_AUTOBIO.setText(rs.getString("T3T_AUTOBIO"));
            T4T_AUTOBIO.setText(rs.getString("T4T_AUTOBIO"));
       
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
             closeResources(rs, ps, con);
    }
}
   
          
          
          
              
          
    public void mostrarInsulina() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_insulina` WHERE Id_historiaINSU=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            INSULINA_BIOME.setText(rs.getString("InsulinaBasal"));
            INSULITA_POSTBIOME.setText(rs.getString("InsulinaPandrial"));
            INSULINA_REACTIVO.setText(rs.getString("insulina_Reactiva"));
            INSULITA_POSTREACTIVA.setText(rs.getString("insulina_PostReac"));
            INSULINA_INMU.setText(rs.getString("insulina_inmukit"));
            INSULINA_POSTINMUKIT.setText(rs.getString("insulina_Postinmukit"));

       
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
               closeResources(rs, ps, con);
    }
}
        
    
    
    
    
    
          
    public void mostrarPFemenino() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_femenina` WHERE Id_historiaFE=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            FSH_BIOME.setText(rs.getString("FSH"));
            LH_BIOME.setText(rs.getString("LH"));
            PROGESTERONA.setText(rs.getString("PROGES"));
            ESTRADIOL.setText(rs.getString("ESTRADIOL"));
            PROLACTINA.setText(rs.getString("PROLACTINA"));
           
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
                closeResources(rs, ps, con);
    }
}   
          
              
              
    public void mostrarPsa() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_psa` WHERE id_historiaPSA=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            PSAL_BIOME.setText(rs.getString("psalibre"));
            PSAT_BIOME.setText(rs.getString("psatotal"));
            RAZON_PSA.setText(rs.getString("psalibreytotal"));

        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
                closeResources(rs, ps, con);
    }
}        
              
              
    
    public void mostrarFerritina() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_ferrocinetico` WHERE id_historiaFR=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            FERRITINA_BIOME.setText(rs.getString("Ferritina"));
       

        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
                closeResources(rs, ps, con);
    }
}        
    
    
    
    public void mostrarToxo() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_toxo` WHERE id_historiaTO=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
           IGM_BIOME.setText(rs.getString("IGM"));
           IGG_BIOME.setText(rs.getString("IGG"));
    

        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
                  closeResources(rs, ps, con);
    }
}        
              
   
                 
          
    public void mostrarHepatitis() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_hepatitis` WHERE id_historiaHE=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            HEPATITISA_IGM.setText(rs.getString("hepatitisA"));
            HEPATITISB_BIOME.setText(rs.getString("hepatitisB_biome"));
            HEPATITISB.setText(rs.getString("hepatitisB"));
            HEPATITISB1.setText(rs.getString("anticoreB"));
            HEPATITISC.setText(rs.getString("hepatitisC"));


       
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
                  closeResources(rs, ps, con);
    }
}
    
    
    
    
             
    public void mostrarHelico() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_helycobacter` WHERE id_historiaHE=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            PYLOTY_IGM.setText(rs.getString("PyloriIgM"));
            PYLORI_IGG.setText(rs.getString("PyloriIgG"));
   
       
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
                 closeResources(rs, ps, con);
    }
}
        
    
    public void mostrarEspecial() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_especial` WHERE id_historia=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            TROPONINA_BIOME.setText(rs.getString("Troponina"));
            HEMOGLOBINA.setText(rs.getString("Hemoglobina"));
            DENGUEIGM.setText(rs.getString("dengueigm"));
            DENGUEIGG.setText(rs.getString("dengueigg"));
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
               closeResources(rs, ps, con);
    }
}        
              
    
    
              
          
 public void updateReporte()
    {

      
        ruta_archivo="C://Fundaginebra//Reportes//"+PdfNames+".pdf";
        int codigo =  idCallestudios;
        File ruta = new File(ruta_archivo);
       
        
       
        
        if ( ruta_archivo.trim().length() != 0) {
 
         update_pdf(codigo, ruta);
         ruta_archivo = "";

  
        } else {
            //JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
        }
    
    }
       
       

 
 
 
      
       public void update_pdf(int codigo, File ruta) {
           
        updateLaboratorio pa = new updateLaboratorio();
        updateLaboratorioDao po = new  updateLaboratorioDao();
        pa.setIdlabUpdate(codigo);
        
        try {
            byte[] pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
            pa.setArchivoUpdate(pdf);
        } catch (IOException ex) {
            pa.setArchivoUpdate(null);
            System.out.println("Error al agregar archivo pdf "+ex);
        }
        po.updateLaboratorio(pa);
    }
   
          
          
          
         public void backtoConsulta(){
   
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       ConsultaLaboratorio jlab = new ConsultaLaboratorio();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(jlab);
       jlab.setClosable(true);
       jlab.setIconifiable(true);
       
        try {
            jlab.setMaximum(true);
        } catch (Exception e) {
        }
        jlab.toFront();
        jlab.setVisible(true);

   
   }
   
          
    int order=0;
    String Factura="";
    public void knowAboutplace(){
        
   
    String cedula = TXTPcedula.getText(); 
    // Validación de la cédula
    if ("V-".equals(cedula) || cedula.isEmpty()) {
        JOptionPane.showMessageDialog(null, "CAMPO VACIO O CÉDULA INVALIDA", "CÉDULA", JOptionPane.ERROR_MESSAGE);
        TXTPcedula.setText("V-");
        return;
    }
        
        
              
          SimpleDateFormat FormatoFecha = new SimpleDateFormat("yyyy/MM/dd");
          String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
          
          if(!estadoEstudio.equals("")){  
          
          String fechaEstudio1 = fechaEstudio; 
          String[] partesFecha = fechaEstudio1.split("/");
          String mesFormateado = String.format("%02d", Integer.parseInt(partesFecha[1]));
          Fecha = partesFecha[2] + "/" + mesFormateado + "/" + partesFecha[0];
           }
          
          
          
          Connection con=null;
          EnlaceBd cn = new EnlaceBd();
          PreparedStatement ps=null;
          ResultSet rs=null;
     
       
         String busqueda = this.TXTPcedula.getText();
         try{
         String sql="SELECT id_orden, lugar, cedula, nombre, apellido, fecha, Factura " +
                     "FROM orden_lab o " +
                     "INNER JOIN table_paciente n " +
                     "ON o.paciente = n.Idpaciente " +
                     "WHERE Cedula = ? AND fecha = ?";
      
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setString(1, busqueda );
        ps.setString(2, Fecha);
        rs=ps.executeQuery();
        if(rs.next()){
        order=rs.getInt("lugar");
        Factura=rs.getString("Factura");
    //  System.out.println(order);
         }
        
        else{
        Factura="";
        }


}catch(Exception e){

System.out.println("error en knowAboutPlace"+e);
}
         
finally {
          closeResources(rs, ps, con);} }


          
    
    
    
    
    
    
          
      
      public void procesarPaciente() {
    // Primero valida la cédula
    String cedula = TXTPcedula.getText();
    if ("V-".equals(cedula) || cedula.isEmpty()) {
        JOptionPane.showMessageDialog(null, "CAMPO VACIO O CÉDULA INVALIDA", "CÉDULA", JOptionPane.ERROR_MESSAGE);
        TXTPcedula.setText("V-");
        return; // Detiene la ejecución si la cédula es inválida
    }
    
    // Luego, llama a knowAboutplace para buscar la factura
    knowAboutplace();
    
    if (Factura.equals("")) {
        // Si no se encuentra factura, pregunta si desea registrar
        if (JOptionPane.showConfirmDialog(rootPane, "ESTE PACIENTE NO TIENE UN NÚMERO DE ORDEN NI FACTURA ASIGNADO ¿DESEA AGREGARLO?",
            "PACIENTE", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {       
            goToRegister();
        }
    } else {
        // Si ya tiene factura, se puede proceder con la llamada a Callpacient()
        callPacient();
    }
}


      
      
      
      
      
      
          private void closeResources(ResultSet rs, PreparedStatement ps, Connection con) {
    try {
        if (rs != null) {
            rs.close();
        }
        if (ps != null) {
            ps.close();
        }
        if (con != null) {
            con.close();
        }
    } catch (SQLException ex) {
        System.out.println("Error al cerrar la conexión o los recursos: " + ex.getMessage());
    }
}
      
      
      
      
      
      
      
      
      
      
          
       public int idCallestudios=0;
       public String estadoEstudio="";
       private int labid;               
       private String labEstudio, labCedula, fechaEstudio;  
       
       
       
        public void setfechaEstudio(String fecha) {
        this.fechaEstudio = fecha;
    }        
       
       public String getfechaEstudio() {
        return fechaEstudio;
    } 
      
       
       
       
       public void setValorA(int labid2) {
        this.labid = labid2;
    }        
       
       public int getValorA() {
        return labid;
    } 

       
        public void setValorB(String labEstudio2) {
        this.labEstudio = labEstudio2;
    }        
         public String getValorB() {
        return labEstudio;
    }
         
         
        public void setValorC(String labCedula2) {
        this.labCedula = labCedula2;
    }        
         public String getValorC() {
        return labCedula;
    }
          
          
         
         
         
         
         
         
         
  DefaultTableModel modelo = new DefaultTableModel();
  labEstudiosBdDao labDao = new labEstudiosBdDao();

  Temporal MP = new Temporal();
  Mprincipal Menu = new Mprincipal();
  int idusuario=MP.getTexto();

  Encriptar encriptar = new Encriptar();
  JCPacientes pacientes  = new JCPacientes();
  JPacientesDao pacientesDao  = new JPacientesDao();     
  Tabla_PdfVO tpdf = new Tabla_PdfVO();   
  String ruta_archivo = "";
  String Usuario;
  Validar va = new Validar();
  Jlab_auditorias audit = new Jlab_auditorias();
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgregar;
    private javax.swing.JButton BtnCancelar;
    private javax.swing.JButton BtnSearch;
    private javax.swing.JTextField COREHEPATITISB;
    private javax.swing.JTextField DENGUEIGG;
    private javax.swing.JTextField DENGUEIGG1;
    private javax.swing.JTextField DENGUEIGG2;
    private javax.swing.JTextField DENGUEIGM;
    private javax.swing.JTextField DENGUEIGM1;
    private javax.swing.JTextField DENGUEIGM2;
    private javax.swing.JTextField DIABETICO;
    private javax.swing.JTextField ESTRADIOL;
    private javax.swing.JTextField ESTRADIOL1;
    private javax.swing.JTextField ESembarazo;
    private javax.swing.JTextField ESfase;
    private javax.swing.JTextField ESovulacion;
    private javax.swing.JTextField ESpostmenop;
    private javax.swing.JTextField ESpubertad;
    private javax.swing.JTextField EStardia;
    private javax.swing.JTextField FERRITINA_BIOME;
    private javax.swing.JTextField FERRITINA_BIOME1;
    private javax.swing.JTextField FERRhombre;
    private javax.swing.JTextField FERRkids;
    private javax.swing.JTextField FERRmujer;
    private javax.swing.JTextField FERRnacidos;
    private javax.swing.JTextField FSHCICLOB;
    private javax.swing.JTextField FSHFOLICULARB;
    private javax.swing.JTextField FSHHOMBRESB;
    private javax.swing.JTextField FSHLUTEAB;
    private javax.swing.JTextField FSHPOSTMENOSPAUSIAB;
    private javax.swing.JTextField FSH_BIOME;
    private javax.swing.JTextField FSH_BIOME1;
    private javax.swing.JLabel FechaAc8;
    private com.toedter.calendar.JDateChooser FechaNacimiento;
    private javax.swing.JTextField HEMOGLOBINA;
    private javax.swing.JTextField HEMOGLOBINA1;
    private javax.swing.JTextField HEPATITISA_IGM;
    private javax.swing.JTextField HEPATITISA_IGM1;
    private javax.swing.JTextField HEPATITISB;
    private javax.swing.JTextField HEPATITISB1;
    private javax.swing.JTextField HEPATITISB2;
    private javax.swing.JTextField HEPATITISB3;
    private javax.swing.JTextField HEPATITISB_BIOME;
    private javax.swing.JTextField HEPATITISB_BIOME1;
    private javax.swing.JTextField HEPATITISC;
    private javax.swing.JTextField HEPATITISC1;
    private javax.swing.JTextField HEPATITISC2;
    private javax.swing.JTextField HEPAigm;
    private javax.swing.JTextField IGG_BIOME;
    private javax.swing.JTextField IGG_BIOME1;
    private javax.swing.JTextField IGGpositivo;
    private javax.swing.JTextField IGM_BIOME;
    private javax.swing.JTextField IGM_BIOME1;
    private javax.swing.JTextField IGMpositivo;
    private javax.swing.JTextField INSULINA_BIOME;
    private javax.swing.JTextField INSULINA_BIOME1;
    private javax.swing.JTextField INSULINA_BIOME2;
    private javax.swing.JTextField INSULINA_INMU;
    private javax.swing.JTextField INSULINA_INMU1;
    private javax.swing.JTextField INSULINA_INMU2;
    private javax.swing.JTextField INSULINA_POSTINMUKIT;
    private javax.swing.JTextField INSULINA_POSTINMUKIT1;
    private javax.swing.JTextField INSULINA_POSTINMUKIT2;
    private javax.swing.JTextField INSULINA_REACTIVO;
    private javax.swing.JTextField INSULINA_REACTIVO1;
    private javax.swing.JTextField INSULINA_REACTIVOA;
    private javax.swing.JTextField INSULINA_REACTIVOD;
    private javax.swing.JTextField INSULINA_REACTIVON;
    private javax.swing.JTextField INSULITA_POSTBIOME;
    private javax.swing.JTextField INSULITA_POSTBIOME1;
    private javax.swing.JTextField INSULITA_POSTBIOME2;
    private javax.swing.JTextField INSULITA_POSTREACTIVA;
    private javax.swing.JTextField INSULITA_POSTREACTIVA1;
    private javax.swing.JTextField INSULITA_POSTREACTIVA2;
    private javax.swing.JPanel JPregistro;
    private javax.swing.JRadioButton JRMasculino;
    private javax.swing.JRadioButton JRfemenino;
    private javax.swing.JRadioButton JradioPerfil;
    private javax.swing.JRadioButton Jradioreferencias;
    private javax.swing.JRadioButton Jradioreferencias1;
    private javax.swing.JRadioButton Jradioreferencias2;
    private javax.swing.JTextArea JtextObservaciones;
    private javax.swing.JTextField LFFOLICULAR;
    private javax.swing.JTextField LHCICLO;
    private javax.swing.JTextField LHHOMBREADOLESCENTE;
    private javax.swing.JTextField LHHOMBREADULTO1;
    private javax.swing.JTextField LHLUTEA;
    private javax.swing.JTextField LHPOSMENOSPAUSIA;
    private javax.swing.JTextField LHPREPUBERTAD;
    private javax.swing.JTextField LH_BIOME;
    private javax.swing.JTextField LH_BIOME1;
    private javax.swing.JTextField NODIABETICO;
    private javax.swing.JTextField PROGECICLO;
    private javax.swing.JTextField PROGELUTEA;
    private javax.swing.JTextField PROGEPOSMENOSPAUSIA;
    private javax.swing.JTextField PROGESTERONA;
    private javax.swing.JTextField PROGESTERONA1;
    private javax.swing.JTextField PROGFOLICULAR;
    private javax.swing.JTextField PROLACTINA;
    private javax.swing.JTextField PROLACTINA1;
    private javax.swing.JTextField PROnoembarazo;
    private javax.swing.JTextField PSAL;
    private javax.swing.JTextField PSAL_BIOME;
    private javax.swing.JTextField PSAL_BIOME1;
    private javax.swing.JTextField PSAT;
    private javax.swing.JTextField PSAT_BIOME;
    private javax.swing.JTextField PSAT_BIOME1;
    private javax.swing.JTextField PYLORI_IGG;
    private javax.swing.JTextField PYLORI_IGG1;
    private javax.swing.JTextField PYLOTY_IGM;
    private javax.swing.JTextField PYLOTY_IGM1;
    private javax.swing.JTextField RAZONPSA;
    private javax.swing.JTextField RAZON_PSA;
    private javax.swing.JTextField RAZON_PSA1;
    private javax.swing.JTextField SUPERFhepatitisB;
    private javax.swing.JTextField SuperficieHepatitisB2;
    private javax.swing.JTextField T3L_REACTIVA;
    private javax.swing.JTextField T3L_REACTIVA1;
    private javax.swing.JTextField T3L_REACTIVA2;
    private javax.swing.JTextField T3T_AUTOBIO;
    private javax.swing.JTextField T3T_AUTOBIO1;
    private javax.swing.JTextField T3T_AUTOBIO2;
    private javax.swing.JTextField T4L_REACTIVA;
    private javax.swing.JTextField T4L_REACTIVA1;
    private javax.swing.JTextField T4L_REACTIVA2;
    private javax.swing.JTextField T4L_RJL;
    private javax.swing.JTextField T4L_RJL1;
    private javax.swing.JTextField T4L_RJL2;
    private javax.swing.JTextField T4T_AUTOBIO;
    private javax.swing.JTextField T4T_AUTOBIO1;
    private javax.swing.JTextField T4T_AUTOBIO2;
    private javax.swing.JTextField TIGGindeterminado;
    private javax.swing.JTextField TIGGnegativo;
    private javax.swing.JTextField TIGMindeterminado;
    private javax.swing.JTextField TIGMnegativo;
    private javax.swing.JTextField TL3_RJL;
    private javax.swing.JTextField TL3_RJL1;
    private javax.swing.JTextField TL3_RJL2;
    private javax.swing.JTextField TOXOigg;
    private javax.swing.JTextField TOXOigm;
    private javax.swing.JTextField TROPONINA1;
    private javax.swing.JTextField TROPONINA_BIOME;
    private javax.swing.JTextField TROPONINA_BIOME1;
    private javax.swing.JTextField TS3_BIOME;
    private javax.swing.JTextField TS3_BIOME1;
    private javax.swing.JTextField TS3_BIOME2;
    private javax.swing.JTextField TS4_BIOME;
    private javax.swing.JTextField TS4_BIOME1;
    private javax.swing.JTextField TS4_BIOME2;
    private javax.swing.JTextField TSH_BIOME;
    private javax.swing.JTextField TSH_BIOME1;
    private javax.swing.JTextField TSH_BIOME2;
    private javax.swing.JTextField TSH_RJL;
    private javax.swing.JTextField TSH_RJL1;
    private javax.swing.JTextField TSH_RJL2;
    private javax.swing.JTextField TXTPapellido;
    public javax.swing.JTextField TXTPcedula;
    private javax.swing.JTextField TXTPcorreo;
    private javax.swing.JTextArea TXTPdireccion;
    private javax.swing.JTextField TXTPnombre;
    private javax.swing.JFormattedTextField TXTPtelefono;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton34;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

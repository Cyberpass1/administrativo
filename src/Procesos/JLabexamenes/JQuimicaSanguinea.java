/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Procesos.JLabexamenes;

import Clases.Encriptar;
import Clases.EnlaceBd;
import Clases.JCPacientes;
import Clases.JPacientesDao;
import Clases.Jlab_auditorias;
import Clases.PdfVO;
import Clases.Validar;
import Menu.Mprincipal;
import Clases.PdfDAO1;
import Clases.Tabla_PdfVO;
import Clases.Temporal;
import Clases.labEstudiosBdDao;
import Clases.sql;
import Clases.updateLaboratorio;
import Clases.updateLaboratorioDao;
import Consultas.ConsultaLaboratorio;
import Procesos.JLaboratorio;
import Registros.JPacientes;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FCGinebraI
 */
public class JQuimicaSanguinea extends javax.swing.JInternalFrame {

    /**
     * Creates new form JERutina
     */
    public JQuimicaSanguinea() {
    initComponents();
    ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
    informacionpdf();
    MaxIdestudios();
    this.JRMasculino.setSelected(true);
    JPregistro.setVisible(false);
    BtnAgregar.setVisible(false);
    IdPacientess.setVisible(false);
    CallReferencia();
    JradioPerfil.setSelected(true);

    }
     
    
    
 String  empresa, rif, ubicacion, telefonos, piepagina;
   public void informacionpdf() {

   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
   
        try {

            String sql = "select * from tableinfopdfs";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                empresa = rs.getString("nombrempresa");
                rif = rs.getString("rif");
                ubicacion = rs.getString("ubicacion");
                telefonos = rs.getString("telefonos");
                piepagina = rs.getString("infopiepagina");
               
            }

        } catch (Exception e) {System.out.println(e);
        }  finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
    }
    
    
    
    
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        BtnAgregar = new javax.swing.JButton();
        BtnCancelar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        JPregistro = new javax.swing.JPanel();
        TXTPnombre = new javax.swing.JTextField();
        TXTPcorreo = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        JRMasculino = new javax.swing.JRadioButton();
        JRfemenino = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TXTPdireccion = new javax.swing.JTextArea();
        FechaNacimiento = new com.toedter.calendar.JDateChooser();
        TXTPtelefono = new javax.swing.JFormattedTextField();
        TXTPapellido = new javax.swing.JTextField();
        TXTPcedula = new javax.swing.JTextField();
        BtnSearch = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        IdPacientess = new javax.swing.JTextField();
        FechaAc8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jButton34 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        TXTMAGNESIO = new javax.swing.JTextField();
        TXTHDL = new javax.swing.JTextField();
        TXTRIGLICERIDOS = new javax.swing.JTextField();
        TXTCOLESTEROL = new javax.swing.JTextField();
        TXTACIDOURICO = new javax.swing.JTextField();
        TXTCREATININA = new javax.swing.JTextField();
        TXTUREA = new javax.swing.JTextField();
        TXTGLICEMIA = new javax.swing.JTextField();
        TXTLDL = new javax.swing.JTextField();
        TXTFOSFATA = new javax.swing.JTextField();
        TXTRELACION = new javax.swing.JTextField();
        TXTGLOBULINAS = new javax.swing.JTextField();
        TXTALBUMINA = new javax.swing.JTextField();
        TXTPROTEINAS = new javax.swing.JTextField();
        TXTBILIINDIRECTA = new javax.swing.JTextField();
        TXTBILIDIRECTA = new javax.swing.JTextField();
        TXTBILITOTAL = new javax.swing.JTextField();
        TXTVLDL = new javax.swing.JTextField();
        TXTTGO = new javax.swing.JTextField();
        TXTTGP = new javax.swing.JTextField();
        TXTLIPASA = new javax.swing.JTextField();
        TXTLDH = new javax.swing.JTextField();
        TXTAMILASA = new javax.swing.JTextField();
        TXTPOTASIO = new javax.swing.JTextField();
        TXTSODIO = new javax.swing.JTextField();
        TXTCALCIO = new javax.swing.JTextField();
        TXTFOSFORO = new javax.swing.JTextField();
        TXTCKMB = new javax.swing.JTextField();
        TXTHIERRO = new javax.swing.JTextField();
        TXTCK = new javax.swing.JTextField();
        TXTGGT = new javax.swing.JTextField();
        TXTCLORO = new javax.swing.JTextField();
        TXTPANDRIAL = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        JtextObservaciones = new javax.swing.JTextArea();
        jPanel14 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        TXTMAGNESIO1 = new javax.swing.JTextField();
        TXTHDL1 = new javax.swing.JTextField();
        TXTRIGLICERIDOS1 = new javax.swing.JTextField();
        TXTCOLESTEROL1 = new javax.swing.JTextField();
        TXTACIDOURICO1 = new javax.swing.JTextField();
        TXTCREATININA1 = new javax.swing.JTextField();
        TXTUREA1 = new javax.swing.JTextField();
        TXTGLICEMIA1 = new javax.swing.JTextField();
        TXTLDL1 = new javax.swing.JTextField();
        TXTFOSFATA1 = new javax.swing.JTextField();
        TXTRELACION1 = new javax.swing.JTextField();
        TXTGLOBULINAS1 = new javax.swing.JTextField();
        TXTALBUMINA1 = new javax.swing.JTextField();
        TXTPROTEINAS1 = new javax.swing.JTextField();
        TXTBILIINDIRECTA1 = new javax.swing.JTextField();
        TXTBILIDIRECTA1 = new javax.swing.JTextField();
        TXTBILITOTAL1 = new javax.swing.JTextField();
        TXTVLDL1 = new javax.swing.JTextField();
        TXTTGO1 = new javax.swing.JTextField();
        TXTTGP1 = new javax.swing.JTextField();
        TXTLIPASA1 = new javax.swing.JTextField();
        TXTLDH1 = new javax.swing.JTextField();
        TXTAMILASA1 = new javax.swing.JTextField();
        TXTPOTASIO1 = new javax.swing.JTextField();
        TXTSODIO1 = new javax.swing.JTextField();
        TXTCLORO1 = new javax.swing.JTextField();
        TXTFOSFORO1 = new javax.swing.JTextField();
        TXTCKMB1 = new javax.swing.JTextField();
        TXTHIERRO1 = new javax.swing.JTextField();
        TXTCK1 = new javax.swing.JTextField();
        jButton21 = new javax.swing.JButton();
        TXTGGT1 = new javax.swing.JTextField();
        TXTCALCIO1 = new javax.swing.JTextField();
        TXTPANDRIAL1 = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        JradioPerfil = new javax.swing.JRadioButton();
        Jradioreferencias = new javax.swing.JRadioButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BtnAgregar.setText("Agregar");
        BtnAgregar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnAgregar.setContentAreaFilled(false);
        BtnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 120, 30));

        BtnCancelar.setText("NUEVO");
        BtnCancelar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnCancelar.setContentAreaFilled(false);
        BtnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 120, 30));

        jPanel9.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 560, 300, 60));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane1.setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JPregistro.setBackground(new java.awt.Color(255, 255, 255));
        JPregistro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTPnombre.setEditable(false);
        TXTPnombre.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre")));
        TXTPnombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPnombreActionPerformed(evt);
            }
        });
        TXTPnombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPnombreKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPnombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 120, 50));

        TXTPcorreo.setEditable(false);
        TXTPcorreo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Correo"));
        TXTPcorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPcorreoKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPcorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 120, 50));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Sexo"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JRMasculino.setBackground(new java.awt.Color(255, 255, 255));
        JRMasculino.setText("Masculino");
        JRMasculino.setEnabled(false);
        JRMasculino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRMasculinoActionPerformed(evt);
            }
        });
        jPanel5.add(JRMasculino, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        JRfemenino.setBackground(new java.awt.Color(255, 255, 255));
        JRfemenino.setText("Femenino");
        JRfemenino.setEnabled(false);
        JRfemenino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRfemeninoActionPerformed(evt);
            }
        });
        jPanel5.add(JRfemenino, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, -1, -1));

        JPregistro.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 250, 50));

        TXTPdireccion.setEditable(false);
        TXTPdireccion.setColumns(20);
        TXTPdireccion.setLineWrap(true);
        TXTPdireccion.setRows(5);
        TXTPdireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Dirección"));
        TXTPdireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPdireccionKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(TXTPdireccion);

        JPregistro.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 250, 130));

        FechaNacimiento.setBackground(new java.awt.Color(255, 255, 255));
        FechaNacimiento.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha de Nacimiento"));
        FechaNacimiento.setToolTipText("");
        FechaNacimiento.setEnabled(false);
        FechaNacimiento.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        JPregistro.add(FechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 250, 50));

        TXTPtelefono.setEditable(false);
        TXTPtelefono.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Telefono"));
        try {
            TXTPtelefono.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        TXTPtelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPtelefonoActionPerformed(evt);
            }
        });
        JPregistro.add(TXTPtelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 120, 50));

        TXTPapellido.setEditable(false);
        TXTPapellido.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Apellido"));
        TXTPapellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPapellidoActionPerformed(evt);
            }
        });
        TXTPapellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPapellidoKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPapellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 120, 50));

        jPanel1.add(JPregistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 310, 410));

        TXTPcedula.setText("V-");
        TXTPcedula.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cédula"));
        TXTPcedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPcedulaActionPerformed(evt);
            }
        });
        TXTPcedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyTyped(evt);
            }
        });
        jPanel1.add(TXTPcedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 180, 50));

        BtnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/magnifier-1_icon-icons.com_56924.png"))); // NOI18N
        BtnSearch.setBorderPainted(false);
        BtnSearch.setContentAreaFilled(false);
        BtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(BtnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, 50, 50));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 400, 20));
        jPanel1.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 400, 20));
        jPanel1.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 400, 20));

        IdPacientess.setText("ID");
        jPanel1.add(IdPacientess, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, -1, 50));

        FechaAc8.setBackground(new java.awt.Color(0, 0, 0));
        FechaAc8.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        FechaAc8.setText("                         P A C I E N T E ");
        jPanel1.add(FechaAc8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, 20));

        jTabbedPane1.addTab("tab1", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "PACIENTE", "CEDULA", "EDAD", "SEXO", "CORREO", "ESTUDIO"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 370, 450));

        jTabbedPane1.addTab("tab2", jPanel2);

        jPanel9.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 300, 580));

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton34.setText("Generar");
        jButton34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton34.setContentAreaFilled(false);
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton34ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton34, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 20, 130, 30));

        jButton20.setText("Cancelar");
        jButton20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton20.setContentAreaFilled(false);
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton20, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 130, 30));

        jPanel9.add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 560, 700, 60));

        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane2.setEnabled(false);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hematología"), "QUIMICA SANGUINEA"));
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTMAGNESIO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Magnesio"));
        TXTMAGNESIO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTMAGNESIOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTMAGNESIOKeyTyped(evt);
            }
        });
        jPanel10.add(TXTMAGNESIO, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 230, 110, 40));

        TXTHDL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "H.D.L colesterol"));
        TXTHDL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTHDLActionPerformed(evt);
            }
        });
        TXTHDL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTHDLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTHDLKeyTyped(evt);
            }
        });
        jPanel10.add(TXTHDL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, 110, 40));

        TXTRIGLICERIDOS.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Trigliceridos"));
        TXTRIGLICERIDOS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTRIGLICERIDOSKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRIGLICERIDOSKeyTyped(evt);
            }
        });
        jPanel10.add(TXTRIGLICERIDOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, 110, 40));

        TXTCOLESTEROL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Colesterol"));
        TXTCOLESTEROL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTCOLESTEROLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCOLESTEROLKeyTyped(evt);
            }
        });
        jPanel10.add(TXTCOLESTEROL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, 110, 40));

        TXTACIDOURICO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ácido Urico"));
        TXTACIDOURICO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTACIDOURICOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTACIDOURICOKeyTyped(evt);
            }
        });
        jPanel10.add(TXTACIDOURICO, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 110, 40));

        TXTCREATININA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Creatinina"));
        TXTCREATININA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTCREATININAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCREATININAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTCREATININA, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 110, 40));

        TXTUREA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Urea"));
        TXTUREA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTUREAActionPerformed(evt);
            }
        });
        TXTUREA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTUREAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTUREAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTUREA, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 110, 40));

        TXTGLICEMIA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Glicemia"));
        TXTGLICEMIA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTGLICEMIAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTGLICEMIAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTGLICEMIA, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 110, 40));

        TXTLDL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "L.D.L colesterol"));
        TXTLDL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTLDLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLDLKeyTyped(evt);
            }
        });
        jPanel10.add(TXTLDL, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 110, 40));

        TXTFOSFATA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fosfata Alcalina"));
        TXTFOSFATA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTFOSFATAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTFOSFATAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTFOSFATA, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 190, 110, 40));

        TXTRELACION.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Rel. ALB/GLOB"));
        TXTRELACION.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTRELACIONKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRELACIONKeyTyped(evt);
            }
        });
        jPanel10.add(TXTRELACION, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, 110, 40));

        TXTGLOBULINAS.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Globulinas"));
        TXTGLOBULINAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTGLOBULINASActionPerformed(evt);
            }
        });
        TXTGLOBULINAS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTGLOBULINASKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTGLOBULINASKeyTyped(evt);
            }
        });
        jPanel10.add(TXTGLOBULINAS, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 310, 110, 40));

        TXTALBUMINA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Albumina"));
        TXTALBUMINA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTALBUMINAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTALBUMINAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTALBUMINA, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 270, 110, 40));

        TXTPROTEINAS.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Proteinas Totales"));
        TXTPROTEINAS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTPROTEINASKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPROTEINASKeyTyped(evt);
            }
        });
        jPanel10.add(TXTPROTEINAS, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 230, 110, 40));

        TXTBILIINDIRECTA.setToolTipText("");
        TXTBILIINDIRECTA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Indirecta"));
        TXTBILIINDIRECTA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTBILIINDIRECTAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILIINDIRECTAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTBILIINDIRECTA, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 110, 40));

        TXTBILIDIRECTA.setToolTipText("");
        TXTBILIDIRECTA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Directa"));
        TXTBILIDIRECTA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTBILIDIRECTAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILIDIRECTAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTBILIDIRECTA, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 150, 110, 40));

        TXTBILITOTAL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Total"));
        TXTBILITOTAL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTBILITOTALActionPerformed(evt);
            }
        });
        TXTBILITOTAL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTBILITOTALKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILITOTALKeyTyped(evt);
            }
        });
        jPanel10.add(TXTBILITOTAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 110, 40));

        TXTVLDL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "V.L.D.L colesterol"));
        TXTVLDL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTVLDLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTVLDLKeyTyped(evt);
            }
        });
        jPanel10.add(TXTVLDL, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 110, 40));

        TXTTGO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T.G.O"));
        TXTTGO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTTGOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTTGOKeyTyped(evt);
            }
        });
        jPanel10.add(TXTTGO, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, 110, 40));

        TXTTGP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T.G.P"));
        TXTTGP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTTGPActionPerformed(evt);
            }
        });
        TXTTGP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTTGPKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTTGPKeyTyped(evt);
            }
        });
        jPanel10.add(TXTTGP, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, 110, 40));

        TXTLIPASA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Lipasa"));
        TXTLIPASA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTLIPASAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLIPASAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTLIPASA, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 310, 110, 40));

        TXTLDH.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "L.D.H"));
        TXTLDH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTLDHKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLDHKeyTyped(evt);
            }
        });
        jPanel10.add(TXTLDH, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 230, 110, 40));

        TXTAMILASA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Amilasa"));
        TXTAMILASA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTAMILASAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTAMILASAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTAMILASA, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 270, 110, 40));

        TXTPOTASIO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Potasio"));
        TXTPOTASIO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTPOTASIOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPOTASIOKeyTyped(evt);
            }
        });
        jPanel10.add(TXTPOTASIO, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 70, 110, 40));

        TXTSODIO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Sodio"));
        TXTSODIO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTSODIOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTSODIOKeyTyped(evt);
            }
        });
        jPanel10.add(TXTSODIO, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 110, 40));

        TXTCALCIO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Calcio"));
        TXTCALCIO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTCALCIOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCALCIOKeyTyped(evt);
            }
        });
        jPanel10.add(TXTCALCIO, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 150, 110, 40));

        TXTFOSFORO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fosforo"));
        TXTFOSFORO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTFOSFOROKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTFOSFOROKeyTyped(evt);
            }
        });
        jPanel10.add(TXTFOSFORO, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 190, 110, 40));

        TXTCKMB.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "CKMB"));
        TXTCKMB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTCKMBKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCKMBKeyTyped(evt);
            }
        });
        jPanel10.add(TXTCKMB, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 30, 110, 40));

        TXTHIERRO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hierro Serico"));
        TXTHIERRO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTHIERROKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTHIERROKeyTyped(evt);
            }
        });
        jPanel10.add(TXTHIERRO, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 270, 110, 40));

        TXTCK.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "CK"));
        TXTCK.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTCKKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCKKeyTyped(evt);
            }
        });
        jPanel10.add(TXTCK, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 310, 110, 40));

        TXTGGT.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "G.G.T"));
        TXTGGT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTGGTKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTGGTKeyTyped(evt);
            }
        });
        jPanel10.add(TXTGGT, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, 110, 40));

        TXTCLORO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cloro"));
        TXTCLORO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTCLOROKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCLOROKeyTyped(evt);
            }
        });
        jPanel10.add(TXTCLORO, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 110, 110, 40));

        TXTPANDRIAL.setToolTipText("Glicemia postpandrial");
        TXTPANDRIAL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Glicemia postpandrial"));
        TXTPANDRIAL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTPANDRIALKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPANDRIALKeyTyped(evt);
            }
        });
        jPanel10.add(TXTPANDRIAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 110, 40));

        JtextObservaciones.setColumns(20);
        JtextObservaciones.setLineWrap(true);
        JtextObservaciones.setRows(5);
        JtextObservaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Observaciones")));
        JtextObservaciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JtextObservacionesKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(JtextObservaciones);

        jPanel10.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, 620, 110));

        jPanel4.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 690, 490));
        jPanel4.add(jPanel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, -1));

        jTabbedPane2.addTab("QUIMICA", jPanel4);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hematología"), "QUIMICA SANGUINEA"));
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTMAGNESIO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Magnesio"));
        TXTMAGNESIO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTMAGNESIO1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTMAGNESIO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 290, 110, 40));

        TXTHDL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "H.D.L colesterol"));
        TXTHDL1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTHDL1ActionPerformed(evt);
            }
        });
        TXTHDL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTHDL1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTHDL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 110, 40));

        TXTRIGLICERIDOS1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Trigliceridos"));
        TXTRIGLICERIDOS1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRIGLICERIDOS1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTRIGLICERIDOS1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 340, 110, 40));

        TXTCOLESTEROL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Colesterol"));
        TXTCOLESTEROL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCOLESTEROL1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTCOLESTEROL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, 110, 40));

        TXTACIDOURICO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ácido Urico"));
        TXTACIDOURICO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTACIDOURICO1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTACIDOURICO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, 110, 40));

        TXTCREATININA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Creatinina"));
        TXTCREATININA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCREATININA1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTCREATININA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, 110, 40));

        TXTUREA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Urea"));
        TXTUREA1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTUREA1ActionPerformed(evt);
            }
        });
        TXTUREA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTUREA1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTUREA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 110, 40));

        TXTGLICEMIA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Glicemia"));
        TXTGLICEMIA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTGLICEMIA1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTGLICEMIA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 110, 40));

        TXTLDL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "L.D.L colesterol"));
        TXTLDL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLDL1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTLDL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, 110, 40));

        TXTFOSFATA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fosfata Alcalina"));
        TXTFOSFATA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTFOSFATA1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTFOSFATA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 240, 110, 40));

        TXTRELACION1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Rel. ALB/GLOB"));
        TXTRELACION1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRELACION1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTRELACION1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 110, 40));

        TXTGLOBULINAS1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Globulinas"));
        TXTGLOBULINAS1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTGLOBULINAS1ActionPerformed(evt);
            }
        });
        TXTGLOBULINAS1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTGLOBULINAS1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTGLOBULINAS1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 390, 110, 40));

        TXTALBUMINA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Albumina"));
        TXTALBUMINA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTALBUMINA1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTALBUMINA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 340, 110, 40));

        TXTPROTEINAS1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Proteinas Totales", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TXTPROTEINAS1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPROTEINAS1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTPROTEINAS1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 290, 110, 40));

        TXTBILIINDIRECTA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Indirecta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TXTBILIINDIRECTA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILIINDIRECTA1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTBILIINDIRECTA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, 110, 40));

        TXTBILIDIRECTA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Directa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TXTBILIDIRECTA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILIDIRECTA1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTBILIDIRECTA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 110, 40));

        TXTBILITOTAL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Total"));
        TXTBILITOTAL1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTBILITOTAL1ActionPerformed(evt);
            }
        });
        TXTBILITOTAL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILITOTAL1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTBILITOTAL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 110, 40));

        TXTVLDL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "V.L.D.L colesterol", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TXTVLDL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTVLDL1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTVLDL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 110, 40));

        TXTTGO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T.G.O"));
        TXTTGO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTTGO1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTTGO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 90, 110, 40));

        TXTTGP1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T.G.P"));
        TXTTGP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTTGP1ActionPerformed(evt);
            }
        });
        TXTTGP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTTGP1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTTGP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 110, 40));

        TXTLIPASA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Lipasa"));
        TXTLIPASA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLIPASA1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTLIPASA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, 110, 40));

        TXTLDH1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "L.D.H"));
        TXTLDH1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLDH1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTLDH1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 290, 110, 40));

        TXTAMILASA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Amilasa"));
        TXTAMILASA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTAMILASA1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTAMILASA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 340, 110, 40));

        TXTPOTASIO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Potasio"));
        TXTPOTASIO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPOTASIO1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTPOTASIO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 90, 110, 40));

        TXTSODIO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Sodio"));
        TXTSODIO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTSODIO1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTSODIO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 40, 110, 40));

        TXTCLORO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cloro"));
        TXTCLORO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCLORO1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTCLORO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 140, 110, 40));

        TXTFOSFORO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fosforo"));
        TXTFOSFORO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTFOSFORO1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTFOSFORO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 240, 110, 40));

        TXTCKMB1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "CKMB"));
        TXTCKMB1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCKMB1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTCKMB1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 40, 110, 40));

        TXTHIERRO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hierro Serico"));
        TXTHIERRO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTHIERRO1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTHIERRO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 340, 110, 40));

        TXTCK1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "CK"));
        TXTCK1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCK1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTCK1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 390, 110, 40));

        jButton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/modificar.png"))); // NOI18N
        jButton21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton21.setBorderPainted(false);
        jButton21.setContentAreaFilled(false);
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        jPanel11.add(jButton21, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 400, 110, 30));

        TXTGGT1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "G.G.T"));
        TXTGGT1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTGGT1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTGGT1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 190, 110, 40));

        TXTCALCIO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Calcio"));
        TXTCALCIO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCALCIO1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTCALCIO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 190, 110, 40));

        TXTPANDRIAL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Glicemia postpandrial"));
        TXTPANDRIAL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPANDRIAL1KeyTyped(evt);
            }
        });
        jPanel11.add(TXTPANDRIAL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 110, 40));

        jPanel7.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 690, 480));

        jTabbedPane2.addTab("Referencias", jPanel7);

        jPanel9.add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 50, 700, 540));

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JradioPerfil.setBackground(new java.awt.Color(255, 255, 255));
        JradioPerfil.setText("Ver quimica sanguinea");
        JradioPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JradioPerfilActionPerformed(evt);
            }
        });
        jPanel12.add(JradioPerfil, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        Jradioreferencias.setBackground(new java.awt.Color(255, 255, 255));
        Jradioreferencias.setText("Ver Referencias ");
        Jradioreferencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JradioreferenciasActionPerformed(evt);
            }
        });
        jPanel12.add(Jradioreferencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, -1, -1));

        jPanel9.add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 700, 40));

        getContentPane().add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1050, 630));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
     
    
    
    
    
    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton34ActionPerformed
       
        
           if (TXTPapellido.getText().equals("") 
                   
       
                   
                   
                   || TXTPnombre.getText().equals("")
                   || TXTPcedula.getText().equals("") 
                   || TXTPcorreo.getText().equals("") 
                   || TXTPtelefono.getText().equals("") 
                   || TXTPdireccion.getText().equals("")
                   
                   || TXTGLICEMIA1.getText().equals("")
                   || TXTUREA1.getText().equals("")
                   || TXTCREATININA1.getText().equals("")
                   || TXTACIDOURICO1.getText().equals("")
                   || TXTCOLESTEROL1.getText().equals("")
                   || TXTRIGLICERIDOS1.getText().equals("")
                   || TXTHDL1.getText().equals("")
                   || TXTLDL1.getText().equals("")
                   || TXTVLDL1.getText().equals("")
                   || TXTBILITOTAL1.getText().equals("")
                   || TXTBILIDIRECTA1.getText().equals("")
                   || TXTBILIINDIRECTA1.getText().equals("")
                   || TXTPROTEINAS1.getText().equals("")
                   || TXTALBUMINA1.getText().equals("")
                   || TXTGLOBULINAS1.getText().equals("")
                   || TXTRELACION1.getText().equals("")
                   || TXTTGO1.getText().equals("")
                   || TXTTGP1.getText().equals("")
                   || TXTCLORO1.getText().equals("")
                   || TXTFOSFATA1.getText().equals("")
                   
                  
                   )
           {JOptionPane.showMessageDialog(null, "ASIGNE UN PACIENTE, Y VERIFIQUE QUE TODOS LOS CAMPOS SE ENCUENTRAN COMPLETADOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);}
        
            
           
           
               else if (
                           
               TXTGLICEMIA.getText().equals("") &&
               TXTPANDRIAL.getText().equals("") &&
               TXTUREA.getText().equals("") &&
               TXTCREATININA.getText().equals("") &&
               TXTACIDOURICO.getText().equals("") &&
               TXTCOLESTEROL.getText().equals("") &&
               TXTRIGLICERIDOS.getText().equals("") &&
               TXTHDL.getText().equals("") &&
                       
               TXTLDL.getText().equals("") &&
               TXTVLDL.getText().equals("") &&
               TXTBILITOTAL.getText().equals("") &&
               TXTBILIDIRECTA.getText().equals("") &&
               TXTBILIINDIRECTA.getText().equals("") &&
               TXTPROTEINAS.getText().equals("") &&
               TXTALBUMINA.getText().equals("") &&
               TXTGLOBULINAS.getText().equals("") &&
                       
                    
               TXTRELACION.getText().equals("") &&
               TXTTGO.getText().equals("") &&
               TXTTGP.getText().equals("") &&
               TXTGGT.equals("") &&          
               TXTFOSFATA.getText().equals("") &&
               TXTLDH.getText().equals("") &&  
               TXTAMILASA.getText().equals("") &&       
               TXTLIPASA.getText().equals("") &&  
                       
               TXTSODIO.getText().equals("") && 
               TXTPOTASIO.getText().equals("") && 
               TXTCLORO.getText().equals("") && 
               TXTMAGNESIO.getText().equals("") && 
               TXTHIERRO.getText().equals("") &&    
               TXTCK.getText().equals("") &&   
               TXTCKMB.getText().equals("") &&         
               TXTCALCIO.getText().equals("") &&
               TXTFOSFORO.getText().equals("") 
          
                       
                       
                       
                       
                       ){
                   
               JOptionPane.showMessageDialog(null, "DEBE LLENAR POR LO MENOS UN CAMPO DEL ESTUDIO", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);
           } 
           
      
            
             else{  
   
           //--------------------------------------- ACTUALIZAR    
            String nivelUsuario=MP.getNivel(); 
            String especialidad= MP.getEspecialidad();
            if(especialidad.equals("Bioanalista")&& !estadoEstudio.equals("") || 
            nivelUsuario.equals("Administrador") && !estadoEstudio.equals("")){
            labDao.ConsultarFirma(); 
               
            Maxid=idCallestudios;
            pdf();  
            
        labDao.actualizarQuimica(
                       Maxid, 
                       TXTGLICEMIA.getText(), 
                       TXTUREA.getText(),
                       TXTCREATININA.getText(), 
                       TXTACIDOURICO.getText(), 
                       TXTCOLESTEROL.getText(), 
                       TXTRIGLICERIDOS.getText(), 
                       TXTHDL.getText(), 
                       TXTLDL.getText(),
                       TXTVLDL.getText(), 
                       TXTBILITOTAL.getText(),
                       TXTBILIDIRECTA.getText(), 
                       TXTBILIINDIRECTA.getText(), 
                       TXTPROTEINAS.getText(), 
                       TXTALBUMINA.getText(), 
                       TXTGLOBULINAS.getText(), 
                       TXTRELACION.getText(),
                       TXTTGO.getText(), 
                       TXTTGP.getText(), 
                       TXTGGT.getText(), 
                       TXTFOSFATA.getText(),
                       TXTLDH.getText(), 
                       TXTAMILASA.getText(),
                       TXTLIPASA.getText(), 
                       TXTSODIO.getText(), 
                       TXTPOTASIO.getText(), 
                       TXTCLORO.getText(), 
                       TXTCALCIO.getText(), 
                       TXTFOSFORO.getText(),
                       TXTMAGNESIO.getText(), 
                       TXTHIERRO.getText(), 
                       TXTCK.getText(), 
                       TXTCKMB.getText(),
                       TXTPANDRIAL.getText(),
                       JtextObservaciones.getText()
              ); 
            
            
            updateReporte(); 
            
            String Fecha = new SimpleDateFormat("yyyy/MM/dd").format(Menu.FechaAdmin.getDate());
            String accion = "HORA: "+ Menu.Time.getText()+" Corrigió el examen N° "+Maxid+" de: " +TXTPnombre.getText() +" "+ TXTPapellido.getText();
            audit.corregirEstudio(
                    idusuario, 
                    accion,
                    Fecha 
                    );
            
            cancelarexamen();
            backtoConsulta();
            }
           
    //--------------------------------------- AGREGAR    
       
            
               else{
               labDao.ConsultarFirma(); 
               MaxIdestudios(); 
               
               labDao.agregarQuimica(
                       Maxid, 
                       TXTGLICEMIA.getText(), 
                       TXTUREA.getText(),
                       TXTCREATININA.getText(), 
                       TXTACIDOURICO.getText(), 
                       TXTCOLESTEROL.getText(), 
                       TXTRIGLICERIDOS.getText(), 
                       TXTHDL.getText(), 
                       TXTLDL.getText(),
                       TXTVLDL.getText(), 
                       TXTBILITOTAL.getText(),
                       TXTBILIDIRECTA.getText(), 
                       TXTBILIINDIRECTA.getText(), 
                       TXTPROTEINAS.getText(), 
                       TXTALBUMINA.getText(), 
                       TXTGLOBULINAS.getText(), 
                       TXTRELACION.getText(),
                       TXTTGO.getText(), 
                       TXTTGP.getText(), 
                       TXTGGT.getText(), 
                       TXTFOSFATA.getText(),
                       TXTLDH.getText(), 
                       TXTAMILASA.getText(),
                       TXTLIPASA.getText(), 
                       TXTSODIO.getText(), 
                       TXTPOTASIO.getText(), 
                       TXTCLORO.getText(), 
                       TXTCALCIO.getText(), 
                       TXTFOSFORO.getText(),
                       TXTMAGNESIO.getText(), 
                       TXTHIERRO.getText(), 
                       TXTCK.getText(), 
                       TXTCKMB.getText(),
                       TXTPANDRIAL.getText(),
                       JtextObservaciones.getText()

                       
               );    
               
               
               pdf();  
               guardarReporte();  
               cancelarexamen();
               JOptionPane.showMessageDialog(null, "GENERANDO REPORTE...","ESTUDIO",1);
               }
           
           
           }

           
   
        
        
        
   
    }//GEN-LAST:event_jButton34ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed

        
                if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea cancelar los resultados?",
            "Cancelar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
           cancelarexamen(); CallReferencia(); }
                
                else{}
                
    }//GEN-LAST:event_jButton20ActionPerformed

    private void BtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSearchActionPerformed
    procesarPaciente();



    }//GEN-LAST:event_BtnSearchActionPerformed

    private void BtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarActionPerformed

        Connection con;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps;
        ResultSet rs;

        Pattern pattern = Pattern.compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
        String Correo = TXTPcorreo.getText();
        Matcher mather = pattern.matcher(Correo);

        if (TXTPapellido.getText().equals("") || TXTPnombre.getText().equals("") || FechaNacimiento.getDate()==null
            || TXTPcedula.getText().equals("") || TXTPcorreo.getText().equals("") || TXTPtelefono.getText().equals("") || TXTPdireccion.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "TODOS LOS CAMPOS SON OBLIGATORIOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);

        } else if (mather.find() == false) {
            JOptionPane.showMessageDialog(null, "EMAIL INVALIDO, VERIFIQUE", "EMAIL INVALIDO", JOptionPane.ERROR_MESSAGE);
            this.TXTPcorreo.requestFocus();
        }

        else {

            String sql="SELECT Idpaciente, Nombre, Apellido, Cedula, Telefono, Direccion FROM table_paciente  WHERE Cedula='"+ TXTPcedula.getText() +"'";

            try{
                con = cn.getConnection();
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();
                if(rs.next()){JOptionPane.showMessageDialog(null, "EL PACIENTE YA SE ENCUENTRA", "DATO DUPLICADO",JOptionPane.ERROR_MESSAGE);}

                else{
                    AuditoriaAgregar();
                    AgregarPaciente();
                    Callpacient();
                    BtnAgregar.setEnabled(false);
                    //      TxtMotivo.setEnabled(true);

                }

            }catch(Exception e){System.out.println(e);}
        }
    }//GEN-LAST:event_BtnAgregarActionPerformed

    private void BtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelarActionPerformed
        limpiarCampos();
        DesactivarCampos();
        JPregistro.setVisible(false);
        TXTPcedula.setText("V-");
        BtnAgregar.setEnabled(true);
        BtnSearch.setEnabled(true);  
        TXTPcedula.setEnabled(true);
        BtnAgregar.setEnabled(false);
        
    }//GEN-LAST:event_BtnCancelarActionPerformed

    private void TXTPcedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPcedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPcedulaActionPerformed

    private void TXTPcedulaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyTyped
         char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='V' || car=='E'  || car=='-'|| car=='J'|| car =='H' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTPcedula.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==14)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='V' && car!='E' && car!='-' && car != 'J' && car!='H' || car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }

    }//GEN-LAST:event_TXTPcedulaKeyTyped

    private void TXTPnombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPnombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPnombreActionPerformed

    private void TXTPnombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPnombreKeyTyped
          va.longitud(TXTPnombre.getText(), 30, evt);
    }//GEN-LAST:event_TXTPnombreKeyTyped

    private void TXTPapellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPapellidoKeyTyped
        va.longitud(TXTPapellido.getText(), 30, evt);
    }//GEN-LAST:event_TXTPapellidoKeyTyped

    private void TXTPcorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcorreoKeyTyped
         va.longitud(TXTPcorreo.getText(), 30, evt);
    }//GEN-LAST:event_TXTPcorreoKeyTyped

    private void TXTPdireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPdireccionKeyTyped
         va.longitud(TXTPdireccion .getText(), 80, evt);
    }//GEN-LAST:event_TXTPdireccionKeyTyped

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
    
                if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea actualizar los valores referenciales?",
            "Valores Referenciales", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
     AuditoriaModificar();   ActualizarReferencia(); CallReferencia(); }
                
                else{CallReferencia();}      
        
        
    }//GEN-LAST:event_jButton21ActionPerformed

    private void TXTPapellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPapellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPapellidoActionPerformed

    private void TXTMAGNESIOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTMAGNESIOKeyTyped
                                char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTMAGNESIO.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTMAGNESIOKeyTyped

    private void TXTHDLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTHDLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTHDLActionPerformed

    private void TXTHDLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTHDLKeyTyped
             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTHDL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTHDLKeyTyped

    private void TXTRIGLICERIDOSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRIGLICERIDOSKeyTyped
             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTRIGLICERIDOS.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTRIGLICERIDOSKeyTyped

    private void TXTCOLESTEROLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCOLESTEROLKeyTyped
                 char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTCOLESTEROL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTCOLESTEROLKeyTyped

    private void TXTACIDOURICOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTACIDOURICOKeyTyped
               char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTACIDOURICO.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTACIDOURICOKeyTyped

    private void TXTCREATININAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCREATININAKeyTyped
           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTCREATININA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTCREATININAKeyTyped

    private void TXTUREAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTUREAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTUREAActionPerformed

    private void TXTUREAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTUREAKeyTyped
           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTUREA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTUREAKeyTyped

    private void TXTGLICEMIAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLICEMIAKeyTyped
       char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTGLICEMIA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTGLICEMIAKeyTyped

    private void TXTLDLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDLKeyTyped
                   char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTLDL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTLDLKeyTyped

    private void TXTFOSFATAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFATAKeyTyped
                            char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTFOSFATA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTFOSFATAKeyTyped

    private void TXTRELACIONKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRELACIONKeyTyped
                 char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTRELACION.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTRELACIONKeyTyped

    private void TXTGLOBULINASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTGLOBULINASActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTGLOBULINASActionPerformed

    private void TXTGLOBULINASKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLOBULINASKeyTyped
             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTGLOBULINAS.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTGLOBULINASKeyTyped

    private void TXTALBUMINAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTALBUMINAKeyTyped
           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTALBUMINA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTALBUMINAKeyTyped

    private void TXTPROTEINASKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPROTEINASKeyTyped
      char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTPROTEINAS.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTPROTEINASKeyTyped

    private void TXTBILIINDIRECTAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIINDIRECTAKeyTyped
            char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTBILIINDIRECTA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTBILIINDIRECTAKeyTyped

    private void TXTBILIDIRECTAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIDIRECTAKeyTyped
                  char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTBILIDIRECTA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTBILIDIRECTAKeyTyped

    private void TXTBILITOTALActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTBILITOTALActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTBILITOTALActionPerformed

    private void TXTBILITOTALKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILITOTALKeyTyped
                  char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTBILITOTAL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTBILITOTALKeyTyped

    private void TXTVLDLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTVLDLKeyTyped
                      char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTVLDL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTVLDLKeyTyped

    private void TXTTGOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGOKeyTyped
                    char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTTGO.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTTGOKeyTyped

    private void TXTTGPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTTGPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTTGPActionPerformed

    private void TXTTGPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGPKeyTyped
                         char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTTGP.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTTGPKeyTyped

    private void JradioreferenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JradioreferenciasActionPerformed
      jTabbedPane2.setSelectedIndex(1);
    this.Jradioreferencias.setSelected(true);
    JradioPerfil.setSelected(false);
     
    }//GEN-LAST:event_JradioreferenciasActionPerformed

    private void JradioPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JradioPerfilActionPerformed
        jTabbedPane2.setSelectedIndex(0);
        this.JradioPerfil.setSelected(true);
        Jradioreferencias.setSelected(false);
    }//GEN-LAST:event_JradioPerfilActionPerformed

    private void TXTPtelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPtelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPtelefonoActionPerformed

    private void TXTLIPASAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLIPASAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTLIPASAKeyTyped

    private void TXTLDHKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDHKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTLDHKeyTyped

    private void TXTAMILASAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTAMILASAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTAMILASAKeyTyped

    private void TXTPOTASIOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPOTASIOKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPOTASIOKeyTyped

    private void TXTSODIOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTSODIOKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTSODIOKeyTyped

    private void TXTCALCIOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCALCIOKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTCALCIOKeyTyped

    private void TXTFOSFOROKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFOROKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTFOSFOROKeyTyped

    private void TXTCKMBKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCKMBKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTCKMBKeyTyped

    private void TXTHIERROKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTHIERROKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTHIERROKeyTyped

    private void TXTCKKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCKKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTCKKeyTyped

    private void TXTMAGNESIO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTMAGNESIO1KeyTyped
                va.longitud(TXTMAGNESIO1 .getText(), 15, evt);
    }//GEN-LAST:event_TXTMAGNESIO1KeyTyped

    private void TXTHDL1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTHDL1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTHDL1ActionPerformed

    private void TXTHDL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTHDL1KeyTyped
                           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTHDL1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTHDL1KeyTyped

    private void TXTRIGLICERIDOS1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRIGLICERIDOS1KeyTyped
                            char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTRIGLICERIDOS1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTRIGLICERIDOS1KeyTyped

    private void TXTCOLESTEROL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCOLESTEROL1KeyTyped
                     char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTCOLESTEROL1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTCOLESTEROL1KeyTyped

    private void TXTACIDOURICO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTACIDOURICO1KeyTyped
               char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTACIDOURICO1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTACIDOURICO1KeyTyped

    private void TXTCREATININA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCREATININA1KeyTyped
              char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTCREATININA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTCREATININA1KeyTyped

    private void TXTUREA1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTUREA1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTUREA1ActionPerformed

    private void TXTUREA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTUREA1KeyTyped
           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTUREA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTUREA1KeyTyped

    private void TXTGLICEMIA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLICEMIA1KeyTyped
                char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTGLICEMIA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTGLICEMIA1KeyTyped

    private void TXTLDL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDL1KeyTyped
                           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTLDL1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTLDL1KeyTyped

    private void TXTFOSFATA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFATA1KeyTyped
                       char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTFOSFATA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTFOSFATA1KeyTyped

    private void TXTRELACION1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRELACION1KeyTyped
              char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTRELACION1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTRELACION1KeyTyped

    private void TXTGLOBULINAS1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTGLOBULINAS1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTGLOBULINAS1ActionPerformed

    private void TXTGLOBULINAS1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLOBULINAS1KeyTyped
              char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTGLOBULINAS1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTGLOBULINAS1KeyTyped

    private void TXTALBUMINA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTALBUMINA1KeyTyped
                char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTALBUMINA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTALBUMINA1KeyTyped

    private void TXTPROTEINAS1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPROTEINAS1KeyTyped
         char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTBILIINDIRECTA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTPROTEINAS1KeyTyped

    private void TXTBILIINDIRECTA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIINDIRECTA1KeyTyped
                                        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTBILIINDIRECTA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTBILIINDIRECTA1KeyTyped

    private void TXTBILIDIRECTA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIDIRECTA1KeyTyped
                                     char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTBILIDIRECTA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTBILIDIRECTA1KeyTyped

    private void TXTBILITOTAL1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTBILITOTAL1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTBILITOTAL1ActionPerformed

    private void TXTBILITOTAL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILITOTAL1KeyTyped
                                 char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTBILITOTAL1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTBILITOTAL1KeyTyped

    private void TXTVLDL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTVLDL1KeyTyped
                             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTVLDL1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTVLDL1KeyTyped

    private void TXTTGO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGO1KeyTyped
             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTTGO1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTTGO1KeyTyped

    private void TXTTGP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTTGP1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTTGP1ActionPerformed

    private void TXTTGP1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGP1KeyTyped
                  char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTTGP1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTTGP1KeyTyped

    private void TXTLIPASA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLIPASA1KeyTyped
                      char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTLIPASA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTLIPASA1KeyTyped

    private void TXTLDH1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDH1KeyTyped
                       char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTLDH1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTLDH1KeyTyped

    private void TXTAMILASA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTAMILASA1KeyTyped
                      char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTAMILASA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTAMILASA1KeyTyped

    private void TXTPOTASIO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPOTASIO1KeyTyped
                            char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTPOTASIO1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTPOTASIO1KeyTyped

    private void TXTSODIO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTSODIO1KeyTyped
                       char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTSODIO1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTSODIO1KeyTyped

    private void TXTCLORO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCLORO1KeyTyped
                             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTCLORO1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTCLORO1KeyTyped

    private void TXTFOSFORO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFORO1KeyTyped
                                 char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTFOSFORO1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTFOSFORO1KeyTyped

    private void TXTCKMB1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCKMB1KeyTyped
                       char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTCKMB1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTCKMB1KeyTyped

    private void TXTHIERRO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTHIERRO1KeyTyped
                                      char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTHIERRO1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTHIERRO1KeyTyped

    private void TXTCK1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCK1KeyTyped
                                        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTHIERRO1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTCK1KeyTyped

    private void TXTGGT1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGGT1KeyTyped
                 char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTGGT1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTGGT1KeyTyped

    private void TXTCALCIO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCALCIO1KeyTyped
                               char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' && car<='<' && car<='>'  || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTCALCIO1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==15)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='<'  && car!='>'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTCALCIO1KeyTyped

    private void TXTGGTKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGGTKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTGGTKeyTyped

    private void TXTCLOROKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCLOROKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTCLOROKeyTyped

    private void JRMasculinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRMasculinoActionPerformed
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
    }//GEN-LAST:event_JRMasculinoActionPerformed

    private void JRfemeninoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRfemeninoActionPerformed
      JRfemenino.setSelected(true);
      JRMasculino.setSelected(false);
      Sexo="Femenino";
    }//GEN-LAST:event_JRfemeninoActionPerformed

    private void TXTPcedulaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyPressed
                        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
    procesarPaciente();




} 
    }//GEN-LAST:event_TXTPcedulaKeyPressed

    private void TXTPANDRIALKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPANDRIALKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPANDRIALKeyTyped

    private void TXTPANDRIAL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPANDRIAL1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPANDRIAL1KeyTyped

    private void JtextObservacionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JtextObservacionesKeyTyped
        va.longitud(JtextObservaciones.getText(), 200, evt);
    }//GEN-LAST:event_JtextObservacionesKeyTyped

    private void TXTGLICEMIAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLICEMIAKeyReleased
          
        try {
         String text = TXTGLICEMIA.getText().replace(',', '.');
      
    
  
       double valor = Double.parseDouble(text);
        if (valor < 60 || valor > 110) {
           Color lightRed = new Color(255, 192, 192);
            TXTGLICEMIA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTGLICEMIA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTGLICEMIA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTGLICEMIAKeyReleased

    private void TXTPANDRIALKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPANDRIALKeyReleased
       try {
      String text = TXTPANDRIAL.getText().replace(',', '.');
       
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 125) {
           Color lightRed = new Color(255, 192, 192);
            TXTPANDRIAL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTPANDRIAL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTPANDRIAL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTPANDRIALKeyReleased

    private void TXTUREAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTUREAKeyReleased
       try {
      
      String text = TXTUREA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 10 || valor > 50) {
           Color lightRed = new Color(255, 192, 192);
            TXTUREA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTUREA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTUREA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTUREAKeyReleased

    private void TXTCREATININAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCREATININAKeyReleased
         try {
      
      String text = TXTCREATININA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0.50 || valor > 1.10) {
           Color lightRed = new Color(255, 192, 192);
            TXTCREATININA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTCREATININA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTCREATININA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTCREATININAKeyReleased

    private void TXTACIDOURICOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTACIDOURICOKeyReleased
          try {
      
      String text = TXTACIDOURICO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 1.50 || valor > 7.0) {
           Color lightRed = new Color(255, 192, 192);
            TXTACIDOURICO.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTACIDOURICO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTACIDOURICO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTACIDOURICOKeyReleased

    private void TXTCOLESTEROLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCOLESTEROLKeyReleased
         try {
      
      String text = TXTCOLESTEROL.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 200) {
           Color lightRed = new Color(255, 192, 192);
            TXTCOLESTEROL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTCOLESTEROL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTCOLESTEROL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTCOLESTEROLKeyReleased

    private void TXTRIGLICERIDOSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRIGLICERIDOSKeyReleased
           try {
      
      String text = TXTRIGLICERIDOS.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 35 || valor > 165) {
           Color lightRed = new Color(255, 192, 192);
            TXTRIGLICERIDOS.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTRIGLICERIDOS.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTRIGLICERIDOS.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTRIGLICERIDOSKeyReleased

    private void TXTHDLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTHDLKeyReleased
      try {
      
      String text = TXTHDL.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 30 || valor > 70) {
           Color lightRed = new Color(255, 192, 192);
            TXTHDL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTHDL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTHDL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTHDLKeyReleased

    private void TXTLDLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDLKeyReleased
         try {
      
      String text = TXTLDL.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 150) {
           Color lightRed = new Color(255, 192, 192);
            TXTLDL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTLDL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTLDL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTLDLKeyReleased

    private void TXTVLDLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTVLDLKeyReleased
          try {
      
      String text = TXTVLDL.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 5 || valor > 40) {
           Color lightRed = new Color(255, 192, 192);
            TXTVLDL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTVLDL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTVLDL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTVLDLKeyReleased

    private void TXTBILITOTALKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILITOTALKeyReleased
        try {
      
      String text = TXTBILITOTAL.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 1.1) {
           Color lightRed = new Color(255, 192, 192);
            TXTBILITOTAL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTBILITOTAL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTBILITOTAL.setBackground(Color.WHITE); // Manejar entrada no válida
    }  
    }//GEN-LAST:event_TXTBILITOTALKeyReleased

    private void TXTBILIDIRECTAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIDIRECTAKeyReleased
         try {
      
      String text = TXTBILIDIRECTA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 0.25) {
           Color lightRed = new Color(255, 192, 192);
            TXTBILIDIRECTA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTBILIDIRECTA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
       TXTBILIDIRECTA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTBILIDIRECTAKeyReleased

    private void TXTBILIINDIRECTAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIINDIRECTAKeyReleased
           try {
      
      String text = TXTBILIINDIRECTA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0.1 || valor > 0.50) {
           Color lightRed = new Color(255, 192, 192);
            TXTBILIINDIRECTA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTBILIINDIRECTA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTBILIINDIRECTA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTBILIINDIRECTAKeyReleased

    private void TXTPROTEINASKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPROTEINASKeyReleased
           try {
      
      String text = TXTPROTEINAS.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 6.0 || valor > 8.4) {
           Color lightRed = new Color(255, 192, 192);
            TXTPROTEINAS.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTPROTEINAS.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTPROTEINAS.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTPROTEINASKeyReleased

    private void TXTALBUMINAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTALBUMINAKeyReleased
          try {
      
      String text = TXTALBUMINA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 3.2 || valor > 5.0) {
           Color lightRed = new Color(255, 192, 192);
            TXTALBUMINA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTALBUMINA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTALBUMINA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTALBUMINAKeyReleased

    private void TXTGLOBULINASKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLOBULINASKeyReleased
          try {
      
      String text = TXTGLOBULINAS.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 2.7 || valor > 4.5) {
           Color lightRed = new Color(255, 192, 192);
            TXTGLOBULINAS.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTGLOBULINAS.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTGLOBULINAS.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTGLOBULINASKeyReleased

    private void TXTRELACIONKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRELACIONKeyReleased
           try {
      
      String text = TXTRELACION.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0.9 || valor > 2.1) {
           Color lightRed = new Color(255, 192, 192);
            TXTRELACION.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTRELACION.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTRELACION.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTRELACIONKeyReleased

    private void TXTTGOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGOKeyReleased
           try {
      
      String text = TXTTGO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 40) {
           Color lightRed = new Color(255, 192, 192);
            TXTTGO.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
           TXTTGO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTTGO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTTGOKeyReleased

    private void TXTTGPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGPKeyReleased
            try {
      
      String text = TXTTGP.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 41) {
           Color lightRed = new Color(255, 192, 192);
            TXTTGP.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
           TXTTGP.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTTGP.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTTGPKeyReleased

    private void TXTGGTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGGTKeyReleased
         try {
      
      String text = TXTGGT.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 50) {
           Color lightRed = new Color(255, 192, 192);
           TXTGGT.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTGGT.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTGGT.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTGGTKeyReleased

    private void TXTFOSFATAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFATAKeyReleased
      try {
      
      String text = TXTFOSFATA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 25 || valor > 90) {
           Color lightRed = new Color(255, 192, 192);
           TXTFOSFATA.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTFOSFATA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTFOSFATA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTFOSFATAKeyReleased

    private void TXTLDHKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDHKeyReleased
         try {
      
      String text = TXTLDH.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 50 || valor > 166) {
           Color lightRed = new Color(255, 192, 192);
           TXTLDH.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTLDH.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTLDH.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTLDHKeyReleased

    private void TXTAMILASAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTAMILASAKeyReleased
            try {
      
      String text = TXTAMILASA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 125) {
           Color lightRed = new Color(255, 192, 192);
           TXTAMILASA.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTAMILASA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTAMILASA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTAMILASAKeyReleased

    private void TXTLIPASAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLIPASAKeyReleased
           try {
      
      String text = TXTLIPASA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 190) {
           Color lightRed = new Color(255, 192, 192);
           TXTLIPASA.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTLIPASA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTLIPASA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTLIPASAKeyReleased

    private void TXTSODIOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTSODIOKeyReleased
            try {
      
      String text = TXTSODIO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 138 || valor > 145) {
           Color lightRed = new Color(255, 192, 192);
           TXTSODIO.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTSODIO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTSODIO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTSODIOKeyReleased

    private void TXTPOTASIOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPOTASIOKeyReleased
              try {
      
      String text = TXTPOTASIO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 3.50 || valor > 5.50) {
           Color lightRed = new Color(255, 192, 192);
           TXTPOTASIO.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTPOTASIO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTPOTASIO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTPOTASIOKeyReleased

    private void TXTCLOROKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCLOROKeyReleased
      try {
      
      String text = TXTCLORO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 101.0 || valor > 114.0) {
           Color lightRed = new Color(255, 192, 192);
           TXTCLORO.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTCLORO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTCLORO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTCLOROKeyReleased

    private void TXTCALCIOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCALCIOKeyReleased
          try {
      
      String text = TXTCALCIO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 8.6 || valor > 10.3) {
           Color lightRed = new Color(255, 192, 192);
           TXTCALCIO.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTCALCIO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTCALCIO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTCALCIOKeyReleased

    private void TXTFOSFOROKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFOROKeyReleased
             try {
      
      String text = TXTFOSFORO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 2.7 || valor > 4.5) {
           Color lightRed = new Color(255, 192, 192);
           TXTFOSFORO.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTFOSFORO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTFOSFORO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTFOSFOROKeyReleased

    private void TXTMAGNESIOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTMAGNESIOKeyReleased
              try {
      
      String text = TXTMAGNESIO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 1.7 || valor > 2.2) {
           Color lightRed = new Color(255, 192, 192);
           TXTMAGNESIO.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTMAGNESIO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTMAGNESIO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTMAGNESIOKeyReleased

    private void TXTHIERROKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTHIERROKeyReleased
                try {
      
      String text = TXTHIERRO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 50.0 || valor > 170.0) {
           Color lightRed = new Color(255, 192, 192);
           TXTHIERRO.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTHIERRO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTHIERRO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTHIERROKeyReleased

    private void TXTCKKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCKKeyReleased
                   try {
      
      String text = TXTCK.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 26.0 || valor > 190.0) {
           Color lightRed = new Color(255, 192, 192);
           TXTCK.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTCK.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTCK.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTCKKeyReleased

    private void TXTCKMBKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCKMBKeyReleased
                   try {
      
      String text = TXTCKMB.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 24.0) {
           Color lightRed = new Color(255, 192, 192);
          TXTCKMB.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
          TXTCKMB.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTCKMB.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTCKMBKeyReleased

    
    
    
    public static String getEdad(Date fechaNacimiento) {
    if (fechaNacimiento != null) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        StringBuilder result = new StringBuilder();
        if (fechaNacimiento != null) {
            result.append(sdf.format(fechaNacimiento));
            result.append(" (");
            Calendar c = new GregorianCalendar();
            c.setTime(fechaNacimiento);
            result.append(calcularEdad(c));
            result.append(" años)");
        }
        return result.toString();
    }
    return "";
}

private static int calcularEdad(Calendar fechaNac) {
    Calendar today = Calendar.getInstance();
    int diffYear = today.get(Calendar.YEAR) - fechaNac.get(Calendar.YEAR);
    int diffMonth = today.get(Calendar.MONTH) - fechaNac.get(Calendar.MONTH);
    int diffDay = today.get(Calendar.DAY_OF_MONTH) - fechaNac.get(Calendar.DAY_OF_MONTH);
    // Si está en ese año pero todavía no los ha cumplido
    if (diffMonth < 0 || (diffMonth == 0 && diffDay < 0)) {
        diffYear = diffYear - 1;
    }
    return diffYear;
}
    
    
    
    
    
     public void pdf() {
      try {
       
          
          
          
                   
        /*-------------------------------------------------------------------------------------*/
            
            String fechaN = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts1= fechaN.split("/");
            String an1 = dateParts1[0];
            String mes1 = dateParts1[1];
            String dia1 = dateParts1[2];
            
            
            String an_actual = Validar.fecha_actual();
            String mes_actual = Validar.fecha_mes();
            String dia_actual = Validar.fecha_dia();
            
           /* System.out.println("Hoy es :"+dia_actual+" "+ mes_actual+" "+an_actual);*/
            
            
            
        
            
            int diferenciadia=Integer.parseInt(dia_actual)- Integer.parseInt(dia1);
            int diferenciames=Integer.parseInt(mes_actual)- Integer.parseInt(mes1);
            int diferencian=Integer.parseInt(an_actual)- Integer.parseInt(an1);;
        

            if (diferenciames < 0 || (diferenciames == 0 && diferenciadia < 0)) {
            diferencian = diferencian - 1;
            }
 
   
          
          
          
          
           DateTimeFormatter fth = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).ofPattern("dd-MM-yyyy--HH-mm");
           LocalDateTime fechaactual = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
          

         
             String Paciente=TXTPnombre.getText()+ " "+ TXTPapellido.getText(); 
             PdfNames=TXTPcedula.getText()+"_"+Paciente+"_"+Maxid;

        
          
          
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            Paragraph saltolinea = new Paragraph();
          

            FileOutputStream archivo;
            //String rut = System.getProperty("user.home");
            File file = new File("C://Fundaginebra//Reportes//"+PdfNames+".pdf");
            archivo = new FileOutputStream(file);
            Document doc = new Document();
            PdfWriter writer=  PdfWriter.getInstance(doc, archivo);
            doc.open();
       
            com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\src\\imagenes\\Fundacionlogo1.png");
            header.setAlignment(Chunk.ALIGN_CENTER);

         
            

            
            
            PdfPTable Encabezado = new PdfPTable(1);
            Encabezado.setWidthPercentage(25);
            Encabezado.getDefaultCell().setBorder(0);
            float[] ColumnaEncabezado = new float[]{50f};
            Encabezado.setWidths(ColumnaEncabezado);
            Encabezado.setHorizontalAlignment(Element.ALIGN_LEFT);
            Encabezado.addCell(header);
        

      
            //BODY 
            PdfPTable Tabla = new PdfPTable(3); 
            Tabla.setWidthPercentage(100);  
            float[] medidaCeldas = {1f, 3f, 1f };
            Tabla.setWidths(medidaCeldas);
            Tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            if(order>0){
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid+" | "+ order);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1);
            }
            else{
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1); 
            }
     
                
            Paragraph tcolumna2 = new Paragraph("RESULTADOS DEL ANÁLISIS");
            tcolumna2.getFont().setStyle(Font.BOLD);
            tcolumna2.getFont().setSize(12);        
            tcolumna2.setFont(Letra);
            tcolumna2.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna2);

            Paragraph tcolumna3 = new Paragraph("N° DE PACIENTE: " +IdPaciente+" ");
            tcolumna3.getFont().setStyle(Font.BOLD);
            tcolumna3.getFont().setSize(8);        
            tcolumna3.setFont(Letra);
            tcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna3);
        

              
              
            
            
            PdfPTable Tabla0 = new PdfPTable(4); 
            // Tabla0.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla0.setWidthPercentage(100);  
            float[] medidaCeldas0 = {3f, 2f, 1f,2f};
            Tabla0.setWidths(medidaCeldas0);
            Tabla0.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla0.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t0columna1 = new Paragraph("PACIENTE: "+ Paciente);
            t0columna1.getFont().setStyle(Font.BOLD);
            t0columna1.getFont().setSize(8);        
            t0columna1.setFont(Letra);
            t0columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna1);
     
                
            Paragraph t0columna2 = new Paragraph("CÉDULA: "+TXTPcedula.getText());
            t0columna2.getFont().setStyle(Font.BOLD);
            t0columna2.getFont().setSize(8);        
            t0columna2.setFont(Letra);
            t0columna2.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna2);

            Paragraph t0columna3 = new Paragraph("EDAD:" +Integer.toString(diferencian) + " años");
            t0columna3.getFont().setStyle(Font.BOLD);
            t0columna3.getFont().setSize(8);        
            t0columna3.setFont(Letra);
            t0columna3.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna3);
        
            Paragraph t0columna4 = new Paragraph("SEXO: "+ Sexo);
            t0columna4.getFont().setStyle(Font.BOLD);
            t0columna4.getFont().setSize(8);        
            t0columna4.setFont(Letra);
            t0columna4.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna4);
            
            
               float[] medidaCeldas1 = {5f};
               float[] medidaCeldas2 = {4f, 2f, 2f,4f};
            
                 
         
            
                   
            PdfPTable Tabla5 = new PdfPTable(1); 
            Tabla5.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla5.setWidthPercentage(100);  
            Tabla5.setWidths(medidaCeldas1);
            Tabla5.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla5.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t5columna1 = new Paragraph("----- QUIMICA SANGUINEA ---- ");
            t5columna1.getFont().setStyle(Font.BOLD);
            t5columna1.getFont().setSize(10);        
            t5columna1.setFont(Letra);
            t5columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla5.addCell(t5columna1);
     
                

            
            
            
            PdfPTable Tabla6 = new PdfPTable(4); 
            Tabla6.setWidthPercentage(100);  
            Tabla6.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tabla6.setWidths(medidaCeldas2);
            Tabla6.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla6.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t6columna1 = new Paragraph("ANALISIS REALIZADO");
            t6columna1.getFont().setStyle(Font.BOLD);
            t6columna1.getFont().setSize(9);        
            t6columna1.setFont(Letra);
            t6columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla6.addCell(t6columna1);
     
                
            Paragraph t6columna2 = new Paragraph("RESULTADOS");
            t6columna2.getFont().setStyle(Font.BOLD);
            t6columna2.getFont().setSize(9);        
            t6columna2.setFont(Letra);
            t6columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla6.addCell(t6columna2);

            Paragraph t6columna3 = new Paragraph("UNIDAD");
            t6columna3.getFont().setStyle(Font.BOLD);
            t6columna3.getFont().setSize(10);        
            t6columna3.setFont(Letra);
            t6columna3.setAlignment(Element.ALIGN_CENTER);
            Tabla6.addCell(t6columna3);

            Paragraph t6columna4 = new Paragraph("REFERENCIA");
            t6columna4.getFont().setStyle(Font.BOLD);
            t6columna4.getFont().setSize(9);        
            t6columna4.setFont(Letra);
            t6columna4.setAlignment(Element.ALIGN_CENTER);
            Tabla6.addCell(t6columna4);
            
            
            
         
           
            
           if(!TXTGLICEMIA.getText().equals("")){
           Tabla6.addCell(new Paragraph("Glicemia",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTGLICEMIA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTGLICEMIA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTPANDRIAL.getText().equals("")){
           Tabla6.addCell(new Paragraph("Glicemia Postpandrial",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTPANDRIAL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTPANDRIAL1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           
           if(!TXTUREA.getText().equals("")){
           Tabla6.addCell(new Paragraph("Urea",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTUREA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTUREA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTCREATININA.getText().equals("")){
           Tabla6.addCell(new Paragraph("Creatinina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCREATININA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCREATININA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTACIDOURICO.getText().equals("")){
           Tabla6.addCell(new Paragraph("Ácido Urico",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTACIDOURICO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dl",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTACIDOURICO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTCOLESTEROL.getText().equals("")){
           Tabla6.addCell(new Paragraph("Colesterol",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCOLESTEROL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCOLESTEROL1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           
           if(!TXTRIGLICERIDOS.getText().equals("")){
           Tabla6.addCell(new Paragraph("Trigliceridos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTRIGLICERIDOS.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dl",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTRIGLICERIDOS1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTHDL.getText().equals("")){
           Tabla6.addCell(new Paragraph("H.D.L colesterol",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTHDL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTHDL1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTLDL.getText().equals("")){
           Tabla6.addCell(new Paragraph("L.D.L colesterol",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTLDL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTLDL1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTVLDL.getText().equals("")){
           Tabla6.addCell(new Paragraph("V.L.D.L colesterol",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTVLDL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTVLDL1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTBILITOTAL.getText().equals("")){
           Tabla6.addCell(new Paragraph("Bilirrubina Total",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTBILITOTAL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dl",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTBILITOTAL1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
            }
           
            if(!TXTBILIDIRECTA.getText().equals("")){
           Tabla6.addCell(new Paragraph("Bilirrubina Directa",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTBILIDIRECTA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTBILIDIRECTA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
            }
            
            if(!TXTBILIINDIRECTA.getText().equals("")){
           Tabla6.addCell(new Paragraph("Bilirrubina Indirecta",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTBILIINDIRECTA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTBILIINDIRECTA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
            }
            
             if(!TXTPROTEINAS.getText().equals("")){
           Tabla6.addCell(new Paragraph("Proteinas Totales",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTPROTEINAS.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("g/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTPROTEINAS1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
             }
             
            if(!TXTALBUMINA.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Albumina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTALBUMINA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("gr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTALBUMINA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
            }
            
            if(!TXTGLOBULINAS.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Globulinas",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTGLOBULINAS.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("gr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTGLOBULINAS1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
            }
            
           if(!TXTRELACION.getText().equals("")){  
           Tabla6.addCell(new Paragraph("Relación ALB/GLOB",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTRELACION.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph(" ",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTRELACION1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTTGO.getText().equals("")){  
           Tabla6.addCell(new Paragraph("T.G.O",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTTGO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("U.I/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTTGO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
            if(!TXTTGP.getText().equals("")){
           Tabla6.addCell(new Paragraph("T.G.P",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTTGP.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("U.I/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTTGP1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
            }
            
             if(!TXTGGT.getText().equals("")){
           Tabla6.addCell(new Paragraph("G.G.T.",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTGGT.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("U.I/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTGGT1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
             }
             
               if(!TXTFOSFATA.getText().equals("")){
           Tabla6.addCell(new Paragraph("Fosfatasa Alcalina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTFOSFATA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("U.I/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTFOSFATA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
               }
               
             if(!TXTLDH.getText().equals("")){  
           Tabla6.addCell(new Paragraph("LDH",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTLDH.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("U.I/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTLDH1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
             }
             
           if(!TXTAMILASA.getText().equals("")){   
           Tabla6.addCell(new Paragraph("Amilasa",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTAMILASA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("U.I/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTAMILASA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
          
           if(!TXTLIPASA.getText().equals("")){
           Tabla6.addCell(new Paragraph("Lipasa",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTLIPASA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("U/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTLIPASA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTSODIO.getText().equals("")){
           Tabla6.addCell(new Paragraph("Sodio",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTSODIO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mmol/LL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTSODIO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTPOTASIO.getText().equals("")){
           Tabla6.addCell(new Paragraph("Potasio",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTPOTASIO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mmol/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTPOTASIO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
          
           if(!TXTCLORO.getText().equals("")){
           Tabla6.addCell(new Paragraph("Cloro",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCLORO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mmol/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCLORO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTCALCIO.getText().equals("")){
           Tabla6.addCell(new Paragraph("Calcio",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCALCIO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCALCIO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           } 
            
           if(!TXTFOSFORO.getText().equals("")){ 
           Tabla6.addCell(new Paragraph("Fosforo",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTFOSFORO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTFOSFORO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTMAGNESIO.getText().equals("")){ 
           Tabla6.addCell(new Paragraph("Magnesio",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTMAGNESIO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTMAGNESIO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTHIERRO.getText().equals("")){ 
           Tabla6.addCell(new Paragraph("Hierro Serico",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTHIERRO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("ug/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTHIERRO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTCK.getText().equals("")){ 
           Tabla6.addCell(new Paragraph("CK",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCK.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("U.I/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCK1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTCKMB.getText().equals("")){ 
           Tabla6.addCell(new Paragraph("CKMB",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCKMB.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla6.addCell(new Paragraph("U.I/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla6.addCell(new Paragraph(TXTCKMB1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           } 
            
            
            
            
        
   
  
             
            PdfPTable TableObservacion = new PdfPTable(1); 
            TableObservacion.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           // Tabla9.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            float[] medidaObservacion = {5f};
            TableObservacion.setWidthPercentage(100);  
            TableObservacion.setWidths(medidaObservacion);
            TableObservacion.setHorizontalAlignment(Element.ALIGN_CENTER);
            TableObservacion.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            
           
            Paragraph t9columna1 = new Paragraph("");
            t9columna1.getFont().setStyle(Font.BOLD);
            t9columna1.getFont().setSize(9);        
            t9columna1.setFont(Letra);
            t9columna1.setAlignment(Element.ALIGN_LEFT);
            TableObservacion.addCell(t9columna1);
            TableObservacion.addCell(new Paragraph(JtextObservaciones.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));           
            
            
           
           
           
           
            
            
            
               
            PdfPTable Tablafirma = new PdfPTable(3); 
            Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tablafirma.setWidthPercentage(100);  
            float[] medidaCeldasP = {3f, 1f, 3f};
            Tablafirma.setWidths(medidaCeldasP);
            Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph tPcolumna1 = new Paragraph("\n\n\n\n  "+piepagina);
            tPcolumna1.getFont().setStyle(Font.BOLD);
            tPcolumna1.getFont().setSize(8);        
            tPcolumna1.setFont(Letra);
            tPcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna1);

                
            com.itextpdf.text.Image FirmaLcdo = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\dist\\imagen.bin");
            FirmaLcdo.setAlignment(Chunk.ALIGN_CENTER);
            Tablafirma.addCell(FirmaLcdo);

            Paragraph tPcolumna3 = new Paragraph("\n\n\n\n" + writer.getPageNumber()+ " Pág");
            tPcolumna3.getFont().setStyle(Font.BOLD);
            tPcolumna3.getFont().setSize(8);        
            tPcolumna3.setFont(Letra);
            tPcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna3);
           


           knowaboutlcdo(); 
           PdfPTable TablafirmaLcdo = new PdfPTable(1); 
           TablafirmaLcdo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           TablafirmaLcdo.setWidthPercentage(100);  
           float[] medidaCeldasFirma = {20f};
           TablafirmaLcdo.setWidths(medidaCeldasFirma);
           TablafirmaLcdo.setHorizontalAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
           Paragraph tPcolumnaFirma1 = new Paragraph("________________ \n "+NameOfLcdo);
           tPcolumnaFirma1.getFont().setStyle(Font.BOLD);
           tPcolumnaFirma1.getFont().setSize(8);        
           tPcolumnaFirma1.setFont(Letra);
           tPcolumnaFirma1.setAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.addCell(tPcolumnaFirma1);

           
           
           
           
           
           
           
           
           
           
       /*                
                 
            PdfPTable Tablafirma = new PdfPTable(1); 
            //  Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           
            Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);// Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            float[] medidaCelda = {20f};
            Tabla1.setWidthPercentage(100);  
            Tabla1.setWidths(medidaCelda);
            Tabla1.setHorizontalAlignment(Element.ALIGN_LEFT);
            Tabla1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            
            Paragraph tf1columna1 = new Paragraph("Elaborado por Lcdo/a: "+MP.JLabelNombre.getText()+"                                |    www.fundaginebra.org    |                                     "+ writer.getPageNumber()+ "| Pág");
            tf1columna1.getFont().setStyle(Font.BOLD);
            tf1columna1.getFont().setSize(7);        
            tf1columna1.setFont(Letra);
            tf1columna1.setAlignment(Element.ALIGN_LEFT);
            Tablafirma.addCell(tf1columna1);
     
           */
           
            saltolinea.add("\n");
            
            /*PRIMERA PAGINA*/
            
            /*HEADER*/
            doc.add(Encabezado);
            Header(writer);
            doc.add(saltolinea); 
            doc.add(Tabla);
            doc.add(Tabla0);
            doc.add(saltolinea);
           
             /*BODY*/
            doc.add(Tabla5);
            doc.add(saltolinea); 
            doc.add(Tabla6);
            doc.add(saltolinea);
 
            if (!JtextObservaciones.getText().equals("")){ 
            doc.add(TableObservacion);
            doc.add(saltolinea);
             }
             
                
            /*FOOTER*/
            doc.add(saltolinea);
         
            doc.add(Tablafirma);
            doc.add(TablafirmaLcdo);
            
        
            
            
            
  
            
            doc.close();
            archivo.close();
          //  Desktop.getDesktop().open(file);
            
            
        } catch (DocumentException | IOException e) {
           System.out.println(e);
           JOptionPane.showMessageDialog(null, "NO SE CONSIGUE LA CARPETA FUNDAGINEBRA EN DISCO C", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
     
     
     
     
 String NameOfLcdo, Consultanlcdo;
     
     public void knowaboutlcdo(){
     
    Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null; 
         
         
         try{
         
       String query="Select FirmaLcdo from tableinfo where idinfo=? ";
       
       con = EnlaceBd.getConnection();
       ps = con.prepareStatement(query);
       ps.setInt(1, 1);
       rs=ps.executeQuery();
         
        if(rs.next()){
       Consultanlcdo= rs.getString("FirmaLcdo");
      
       if(!Consultanlcdo.equals("")){NameOfLcdo="Lcdo/a "+ Consultanlcdo;}
       else{NameOfLcdo="";}
       
       
         }

         }catch(Exception e){ System.out.println(e);}finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
     }

     
     
     
     
     
     
     
     
     public void Header(PdfWriter writer) throws IOException{
      

         try   {
             
             
            Paragraph fecha = new Paragraph();
            Font negrita = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
            fecha.add(Chunk.NEWLINE);
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
            String Hora = Menu.Time.getText()+" "+Menu.jLabel102.getText();
            //fecha.add( "  Fecha: " + Fecha + "\n" +"  Hora: "+ Hora ) ;

             
            String fechaN = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts1= fechaN.split("/");
            String an1 = dateParts1[0];
            String mes1 = dateParts1[1];
            String dia1 = dateParts1[2];
            
            
            String an_actual = Validar.fecha_actual();
            String mes_actual = Validar.fecha_mes();
            String dia_actual = Validar.fecha_dia();
            
            
            
        
            
            int diferenciadia=Integer.parseInt(dia_actual)- Integer.parseInt(dia1);
            int diferenciames=Integer.parseInt(mes_actual)- Integer.parseInt(mes1);
            int diferencian=Integer.parseInt(an_actual)- Integer.parseInt(an1);;
        

            
   if (diferenciames < 0 || (diferenciames == 0 && diferenciadia < 0)) {
        diferencian = diferencian - 1;
    }
 
   
          

    
        
          
          
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            Paragraph saltolinea = new Paragraph();
          
             
            PdfContentByte CB = writer.getDirectContent();  
            BaseFont BF2 = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
  
            CB.beginText();
            CB.setFontAndSize(BF2, 12);
            CB.setTextMatrix(200, 800);
            CB.showText(empresa);
            CB.setFontAndSize(BF, 10);
            CB.setTextMatrix(260, 790);
            CB.showText(rif);
            
            
            if(fechaEstudio==null){ 
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 780);
            CB.showText("FECHA: "+ Fecha);
            
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("HORA: "+ Hora);    
              
            }
            
            else if( !fechaEstudio.equals(Fecha)){          
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("FECHA: "+ fechaEstudio);
            }
            
            else{
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 780);
            CB.showText("FECHA: "+ Fecha);
            
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("HORA: "+ Hora);
            }

            
            
            if(!Factura.equals("")){
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(460, 760);
            CB.showText("FACTURA: #"+ Factura);
            }



            
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(235, 740);
            CB.showText(ubicacion);
          
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(210, 730);
            CB.showText(telefonos); 
            CB.setTextMatrix(168, 725);
            CB.showText("__________________________________________________________________");
          
            CB.endText();
            
            
            
           }  catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    }
      }
     
      
        private void addFooter(PdfWriter writer) throws IOException{

    try {

        
        
        
             
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
     
          
        
        
        
        
        
          
            PdfPTable Tablafirma = new PdfPTable(3); 
            Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tablafirma.setWidthPercentage(100);  
            float[] medidaCeldasP = {3f, 3f, 3f };
            Tablafirma.setWidths(medidaCeldasP);
            Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        
            Paragraph tPcolumna1 = new Paragraph("www.fundaginebra.org");
            tPcolumna1.getFont().setStyle(Font.BOLD);
            tPcolumna1.getFont().setSize(8);        
            tPcolumna1.setFont(Letra);
            tPcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna1);

                
            Paragraph tPcolumna2 = new Paragraph("____________________ \n Firma");
            tPcolumna2.getFont().setStyle(Font.BOLD);
            tPcolumna2.getFont().setSize(8);        
            tPcolumna2.setFont(Letra);
            tPcolumna2.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna2);

            Paragraph tPcolumna3 = new Paragraph( " " + writer.getPageNumber()+ " Pág");
            tPcolumna3.getFont().setStyle(Font.BOLD);
            tPcolumna3.getFont().setSize(8);        
            tPcolumna3.setFont(Letra);
            tPcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna3); 
             

     
        Tablafirma.setTotalWidth(527);
        Tablafirma.setLockedWidth(false);
        Tablafirma.getDefaultCell().setFixedHeight(40);
        Tablafirma.getDefaultCell().setBorder(Rectangle.TOP);
        Tablafirma.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);
        
        
        
        // write page
        PdfContentByte canvas = writer.getDirectContent();
        canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
        Tablafirma.writeSelectedRows(0, -1, 34, 50, canvas);
        canvas.endMarkedContentSequence();
    } catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    }
}
        
        
        
        
        
         private void addFooterConfirma(PdfWriter writer) throws IOException{
                 
     knowaboutlcdo();    
    try {

            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
     
          

           
           PdfPTable TablafirmaLcdo = new PdfPTable(1); 
           TablafirmaLcdo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           TablafirmaLcdo.setWidthPercentage(100);  
           float[] medidaCeldasFirma = {20f};
           TablafirmaLcdo.setWidths(medidaCeldasFirma);
           TablafirmaLcdo.setHorizontalAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
           Paragraph tPcolumnaFirma1 = new Paragraph("________________ \n "+ NameOfLcdo);
           tPcolumnaFirma1.getFont().setStyle(Font.BOLD);
           tPcolumnaFirma1.getFont().setSize(8);        
           tPcolumnaFirma1.setFont(Letra);
           tPcolumnaFirma1.setAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.addCell(tPcolumnaFirma1);

            
            
            
          PdfPTable Tablafirma = new PdfPTable(3); 
          Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
          Tablafirma.setWidthPercentage(100);  
          float[] medidaCeldasP = {3f, 1f, 3f };
          Tablafirma.setWidths(medidaCeldasP);
          Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
          Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        
          Paragraph tPcolumna1 = new Paragraph("\n\n\n\n  "+piepagina);
          tPcolumna1.getFont().setStyle(Font.BOLD);
          tPcolumna1.getFont().setSize(8);        
          tPcolumna1.setFont(Letra);
          tPcolumna1.setAlignment(Element.ALIGN_CENTER);
          Tablafirma.addCell(tPcolumna1);


            
            
            
         com.itextpdf.text.Image FirmaLcdo = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\dist\\imagen.bin");
         FirmaLcdo.setAlignment(Chunk.ALIGN_CENTER);
         Tablafirma.addCell(FirmaLcdo);
   

         

            
            
            
            
            
            
        Paragraph tPcolumna3 = new Paragraph( "\n\n\n\n\n" + writer.getPageNumber()+ " Pág");
        tPcolumna3.getFont().setStyle(Font.BOLD);
        tPcolumna3.getFont().setSize(8);        
        tPcolumna3.setFont(Letra);
        tPcolumna3.setAlignment(Element.ALIGN_CENTER);
        Tablafirma.addCell(tPcolumna3); 
             

     
        Tablafirma.setTotalWidth(527);
        Tablafirma.setLockedWidth(false);
        Tablafirma.getDefaultCell().setFixedHeight(40);
        Tablafirma.getDefaultCell().setBorder(Rectangle.TOP);
        Tablafirma.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);
        
        TablafirmaLcdo.setTotalWidth(527);
        TablafirmaLcdo.setLockedWidth(false);
        TablafirmaLcdo.getDefaultCell().setFixedHeight(40);
        TablafirmaLcdo.getDefaultCell().setBorder(Rectangle.TOP);
        TablafirmaLcdo.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);
        
        // write page
        PdfContentByte canvas = writer.getDirectContent();
        canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
        

        Tablafirma.writeSelectedRows(0, -1, 34, 120, canvas);
        TablafirmaLcdo.writeSelectedRows(0, -1, 34, 80, canvas);
        
        canvas.endMarkedContentSequence();
    } catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    }
}

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    
    /*
         
            private void addHeader(PdfWriter writer){
   
                
                
                PdfPTable footer = new PdfPTable(1);
    try {

        footer.setWidths(new int[]{100});
        footer.setTotalWidth(527);
        footer.setLockedWidth(false);
        footer.getDefaultCell().setFixedHeight(40);
        footer.getDefaultCell().setBorder(Rectangle.TOP);
        footer.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);

        // add current page count
        footer.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
        footer.addCell(new Phrase(String.format("@Fundaginebra                                              |    www.fundaginebra.org    |                                            "+ writer.getPageNumber()+ " | Pág") , new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));

        // write page
        PdfContentByte canvas = writer.getDirectContent();
        canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
        footer.writeSelectedRows(0, -1, 34, 50, canvas);
        canvas.endMarkedContentSequence();
    } catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    }
}
         
         
 
   
   
   
   
   */
   
   
   
         
         
 public void Callpacient() {  
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    String Cedula = TXTPcedula.getText().trim();  // Usar trim para eliminar espacios extra.

    // Validación temprana de la cédula antes de hacer la consulta
    if (Cedula.isEmpty() || Cedula.equals("V-")) {
        JOptionPane.showMessageDialog(null, "EL CAMPO CÉDULA NO PUEDE ESTAR VACIO Y DEBE LLEVAR V-", "CAMPO VACIO", JOptionPane.WARNING_MESSAGE);
        return; // Salir si la cédula es inválida
    }
    
    try {
        // Primera consulta para obtener IdPaciente
        String query = "SELECT Idpaciente FROM table_paciente WHERE Cedula = ?";
        con = cn.getConnection();
        ps = con.prepareStatement(query);
        ps.setString(1, Cedula);
        rs = ps.executeQuery();
        
        if (rs.next()) { // Si se encuentra el paciente
            IdPaciente = rs.getInt("Idpaciente");
            IdPacientess.setText(Integer.toString(IdPaciente));

            // Segunda consulta para obtener los detalles del paciente
            String sql2 = "SELECT Nombre, Apellido, Cedula, Telefono, Correo, Direccion, Sexo, date_format(FechNacimiento, '%d/%m/%Y') AS Fecha FROM table_paciente WHERE Idpaciente = ?";
            ps = con.prepareStatement(sql2);
            ps.setInt(1, IdPaciente);
            rs = ps.executeQuery();

            if (rs.next()) { // Si se obtienen los detalles del paciente
                String nombre = rs.getString("Nombre");
                String apellido = rs.getString("Apellido");
                String telefono = rs.getString("Telefono");
                String correo = rs.getString("Correo");
                String direccion = rs.getString("Direccion");
                Sexo = rs.getString("Sexo");
                String nacimiento = rs.getString("Fecha");

                // Asignar valores a los campos
                TXTPnombre.setText(nombre);
                TXTPapellido.setText(apellido);
                TXTPcorreo.setText(correo);
                TXTPtelefono.setText(telefono);
                TXTPdireccion.setText(direccion);
                
                // Selección de sexo
                if (Sexo.equals("Femenino")) {
                    JRfemenino.setSelected(true);
                    JRMasculino.setSelected(false);
                } else if (Sexo.equals("Masculino")) {
                    JRMasculino.setSelected(true);
                    JRfemenino.setSelected(false);
                }
                
                // Convertir fecha de nacimiento
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                FechaNacimiento.setDate(formato.parse(nacimiento));

                JPregistro.setVisible(true);  // Mostrar panel de registro
                TXTPcedula.setEnabled(false); // Desactivar el campo de cédula
            }
        } else {  // Si no se encuentra el paciente
            int option = JOptionPane.showConfirmDialog(rootPane, "El paciente no se encuentra registrado. ¿Desea registrarlo?", 
                                                        "Registro Paciente", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                goToRegister();  // Ir al formulario de registro
            } else {
                BtnAgregar.setVisible(false);  // Ocultar el botón de agregar
                TXTPcedula.setEnabled(true);   // Rehabilitar campo de cédula
                BtnSearch.setEnabled(true);    // Habilitar búsqueda
            }
        }
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}
       
     
          
      public void goToRegister(){
  
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       JPacientes pac = new JPacientes();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(pac);
       pac.setClosable(true);
       pac.setIconifiable(true);
       
        try {
            pac.setMaximum(true);
        } catch (Exception e) {
        }
        pac.toFront();
        pac.setVisible(true);

   }
     
     
     
     
     
     public void AgregarPaciente(){                                             
    
    Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null;
    

          try {

              
                    
        java.sql.Date fechaU;
        Date dateU = FechaNacimiento.getDate();
        long dU = dateU.getTime();
        fechaU = new java.sql.Date(dU);
        
        
        
            String fecha = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts= fecha.split("/");
            String an = dateParts[0];
            String mes = dateParts[1];
            String dia = dateParts[2];
            String an_actual = Validar.fecha_actual();

            int edad;
            edad= Integer.parseInt(an_actual)-Integer.parseInt(an);
        
        
        
        
              
              
            String sql = "INSERT INTO table_paciente (Nombre, Apellido, Cedula,Telefono,Correo,Direccion, Sexo, FechNacimiento, edad) VALUES (?,?,?,?,?,?,?,?,?)";
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
      
            ps.setString(1, TXTPnombre.getText());
            ps.setString(2, TXTPapellido.getText());
            ps.setString(3, TXTPcedula.getText());
            ps.setString(4, TXTPtelefono.getText());
            ps.setString(5, TXTPcorreo.getText());
            ps.setString(6, TXTPdireccion.getText());
            ps.setString(7, Sexo);
            ps.setDate(8, fechaU);
            ps.setInt(9, edad);
            ps.execute();
  
            
            
  JOptionPane.showMessageDialog(null, "EL PACIENTE HA SIDO REGISTRADO","REGISTRO DE PACIENTES", 1);
        } catch (Exception e) {
      
            JOptionPane.showMessageDialog(null, e);
        }
      finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }


      
          
          
    } 
     

    
    public void guardar_pdf(int codigo, int idexamen, int idpaciente, int idusuario, String Fecha, File ruta) {
        
        
   
        
        PdfDAO1 pa = new PdfDAO1();
        PdfVO po = new PdfVO();
        po.setCodigopdf(codigo);
        po.setIdexamen(idexamen);
        po.setIdpaciente(idpaciente);
        po.setIdusuario(idusuario);
        po.setFecha(Fecha);
        
        try {
            byte[] pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
            po.setArchivopdf(pdf);
        } catch (IOException ex) {
            po.setArchivopdf(null);
            System.out.println("Error al agregar archivo pdf "+ex.getMessage());
        }
        pa.Agregar_PdfVO(po);
    }

    String PdfNames;
    
    public void guardarReporte()
    {

      
        ruta_archivo="C://Fundaginebra//Reportes//"+PdfNames+".pdf";
        int idexamen = 1037;
        int idpaciente= Integer.parseInt(IdPacientess.getText());
   
        String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
        sql s = new sql();
        
        int codigo = s.auto_increment("SELECT MAX(codigopdf) FROM table_laboratorio;");
        File ruta = new File(ruta_archivo);
       
        
        
        
        if ( ruta_archivo.trim().length() != 0) {
            guardar_pdf(codigo, idexamen, idpaciente, idusuario, Fecha, ruta);
 
         //   tpdf.visualizar_PdfVO(tabla);
            ruta_archivo = "";
           // activa_boton(false, false, false);
  
        } else {
            JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
        }
    
    }
     /*
         public void seleccionar_pdf() {
        JFileChooser j = new JFileChooser();
        FileNameExtensionFilter fi = new FileNameExtensionFilter("pdf", "pdf");
        j.setFileFilter(fi);
        int se = j.showOpenDialog(this);
        if (se == 0) {
            this.btnseleccionar.setText("" + j.getSelectedFile().getName());
            ruta_archivo = j.getSelectedFile().getAbsolutePath();

        } else {
        }
    }
*/
     
     
     
     
     
     
     
     
     
     
     
     
     
          public void ActivarCampos() {
   
                 TXTPnombre.setEditable(true);
                 TXTPapellido.setEditable(true);
                 TXTPcorreo.setEditable(true);
                 TXTPtelefono.setEditable(true);
                 TXTPdireccion.setEditable(true);
                 JRMasculino.setEnabled(true);
                 JRfemenino.setEnabled(true);
                 FechaNacimiento.setEnabled(true);
                 BtnAgregar.setEnabled(true);
                 BtnAgregar.setVisible(true);
                
                 
       
           
    }
    
                
    public void limpiarCamposNoregistro() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true); 
      FechaNacimiento.setCalendar(null);
    }  
    
       
                   public void DesactivarCampos() {
   
                 TXTPnombre.setEditable(false);
                 TXTPapellido.setEditable(false);
                 TXTPcorreo.setEditable(false);
                 TXTPtelefono.setEditable(false);
                 TXTPdireccion.setEditable(false);
                 JRMasculino.setEnabled(false);
                 JRfemenino.setEnabled(false);
                 FechaNacimiento.setEnabled(false);
                 BtnAgregar.setEnabled(false);
               
       
           
    }
     
     
     
     
     
     

    String Sexo;
    int IdPaciente;
    
    
    public void limpiarCampos() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcedula.setText("V-");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true);  
      FechaNacimiento.setCalendar(null);
    }
    
    
        
        void limpiarTabla() {
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i);
            i = i - 1;
        }
    }
        
        
   
        

   int Maxid;
             public void MaxIdestudios() {
   Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs=null;
    
   
       try {

            String sql = "SELECT MAX(COdigopdf) from table_laboratorio ";
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
            Maxid= rs.getInt("MAX(codigopdf)")+1;
        
            }
            
          
            

        } catch (Exception e) { JOptionPane.showMessageDialog(null, e);}
     
    finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
     
     
     }
    
     
           public void cancelarexamen() 
        
        {
        
        
         jButton34.setEnabled(true);
        

              
              
              
                    TXTGLICEMIA.setText("");
                    TXTUREA.setText("");
                    TXTCREATININA.setText("");
                    TXTACIDOURICO.setText("");
                    TXTCOLESTEROL.setText("");
                    TXTRIGLICERIDOS.setText("");
                    TXTHDL.setText("");
                    TXTLDL.setText("");
                    TXTVLDL.setText("");
                    TXTBILITOTAL.setText("");
                    TXTBILIDIRECTA.setText("");
                    TXTBILIINDIRECTA.setText("");
                    TXTPROTEINAS.setText("");
                    TXTALBUMINA.setText("");
                    TXTGLOBULINAS.setText("");
                    TXTRELACION.setText("");
                    TXTTGO.setText("");
                    TXTTGP.setText("");
                    TXTGGT.setText("");
                    TXTMAGNESIO.setText("");
                    TXTFOSFATA.setText("");
                    TXTLDH.setText("");
                    TXTAMILASA.setText("");
                    TXTLIPASA.setText("");
                    TXTSODIO.setText("");
                    TXTPOTASIO.setText("");
                    TXTCLORO.setText("");
                    TXTCALCIO.setText("");
                    TXTFOSFORO.setText("");
                    TXTMAGNESIO.setText("");
                    TXTHIERRO.setText("");
                    TXTCK.setText("");
                    TXTCKMB.setText("");
                    JtextObservaciones.setText("");
                    TXTPANDRIAL.setText("");
                   
                   
                   
                    TXTGLICEMIA.setBackground(Color.WHITE);
                    TXTPANDRIAL.setBackground(Color.WHITE);
                    TXTUREA.setBackground(Color.WHITE);
                    TXTCREATININA.setBackground(Color.WHITE);
                    TXTACIDOURICO.setBackground(Color.WHITE);
                    TXTCOLESTEROL.setBackground(Color.WHITE);
                    TXTRIGLICERIDOS.setBackground(Color.WHITE);
                    TXTHDL.setBackground(Color.WHITE);
                    TXTLDL.setBackground(Color.WHITE);
                    TXTVLDL.setBackground(Color.WHITE);
                    TXTBILITOTAL.setBackground(Color.WHITE);
                    TXTBILIDIRECTA.setBackground(Color.WHITE);
                    TXTBILIINDIRECTA.setBackground(Color.WHITE);
                    TXTPROTEINAS.setBackground(Color.WHITE);
                    TXTALBUMINA.setBackground(Color.WHITE);
                    TXTGLOBULINAS.setBackground(Color.WHITE);
                    TXTRELACION.setBackground(Color.WHITE);
                    TXTTGO.setBackground(Color.WHITE);
                    TXTTGP.setBackground(Color.WHITE);
                    TXTGGT.setBackground(Color.WHITE);
                    TXTFOSFATA.setBackground(Color.WHITE);
                    TXTLDH.setBackground(Color.WHITE);
                    TXTAMILASA.setBackground(Color.WHITE);
                    TXTLIPASA.setBackground(Color.WHITE);
                    TXTSODIO.setBackground(Color.WHITE);
                    TXTPOTASIO.setBackground(Color.WHITE);
                    TXTCLORO.setBackground(Color.WHITE);
                    TXTCALCIO.setBackground(Color.WHITE);
                    TXTFOSFORO.setBackground(Color.WHITE);
                    TXTMAGNESIO.setBackground(Color.WHITE);
                    TXTHIERRO.setBackground(Color.WHITE);
                    TXTCK.setBackground(Color.WHITE);
                    TXTCKMB.setBackground(Color.WHITE);
                   
        }
           
         
           
           
           public void ActualizarReferencia()   {
                   
                   

        Connection con=null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps=null;
        ResultSet rs=null;


        
        
        
        
        
        
        
        
             try {
   String sql = "UPDATE referencia_qumicasanguinea SET GLICEMIA=?, UREA=?, CREATININA=?, ACIDO_URICO=?,COLESTEROL=?, TRIGLICERIDOS=?, HDL=?,LDL=?,VLDL=?,BILITOTAL=?,BILIDIRECTA=?,BILIINDIRECTA=?,PROTEINAS_TOTALES=?,ALBUMINA=?,GLOBULINAS=?,RELACION=?,TGO=?,TGP=?,GGT=?, FOSFATASA=?, LDH=?, AMILASA=?, LIPASA=? ,SODIO=?, POTASIO=?, CLORO=?, CALCIO=?, FOSFORO=?, MAGNESIO=?, HIERRO_SERICO=?, CK=?,CKMB=?, GLICEMIAPANDRIAL=?";    
                    

            
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, TXTGLICEMIA1.getText());
            ps.setString(2, TXTUREA1.getText());
            ps.setString(3, TXTCREATININA1.getText());
            ps.setString(4, TXTACIDOURICO1.getText());
            ps.setString(5, TXTCOLESTEROL1.getText());
            ps.setString(6, TXTRIGLICERIDOS1.getText());
            ps.setString(7, TXTHDL1.getText());
            ps.setString(8, TXTLDL1.getText());
            ps.setString(9, TXTVLDL1.getText());
            ps.setString(10, TXTBILITOTAL1.getText());
            ps.setString(11, TXTBILIDIRECTA1.getText());
            ps.setString(12, TXTBILIINDIRECTA1.getText());
            ps.setString(13, TXTPROTEINAS1.getText());
            ps.setString(14, TXTALBUMINA1.getText());
            ps.setString(15, TXTGLOBULINAS1.getText());
            ps.setString(16, TXTRELACION1.getText());
            ps.setString(17, TXTTGO1.getText());
            ps.setString(18, TXTTGP1.getText());
            ps.setString(19, TXTGGT1.getText());
            ps.setString(20, TXTFOSFATA1.getText());
            ps.setString(21, TXTLDH1.getText());
            ps.setString(22, TXTAMILASA1.getText());
            ps.setString(23, TXTLIPASA1.getText());
            ps.setString(24, TXTSODIO1.getText());
            ps.setString(25, TXTPOTASIO1.getText());
            ps.setString(26, TXTCLORO1.getText());     
            ps.setString(27, TXTCALCIO1.getText());
            ps.setString(28, TXTFOSFORO1.getText());
            ps.setString(29, TXTMAGNESIO1.getText());
            ps.setString(30, TXTHIERRO1.getText());
            ps.setString(31, TXTCK1.getText());
            ps.setString(32, TXTCKMB1.getText());
            ps.setString(33, TXTPANDRIAL1.getText());
      
            
            int res = ps.executeUpdate();

            if (res >= 1) {
                JOptionPane.showMessageDialog(null, "LOS VALORES REFENCIALES HAN SIDO MODIFICADOS", "VALORES REFENCIALES", 1);
            } else {
                JOptionPane.showMessageDialog(null, "Fallo al actualizar los datos....");
            }
        } catch (Exception e) {
            System.out.println(e);
        }
           
        
        
    
        
        
        
        
        
        
        
                  }
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
 
        
   public void CallReferencia() {
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
    
            
        
        
          try {

            String sql2 = "SELECT * FROM referencia_qumicasanguinea";

            con = cn.getConnection();
            ps = con.prepareStatement(sql2);
            rs = ps.executeQuery();
            if (rs.next()) {
                String info0 = rs.getString("GLICEMIA");
                String GLICEMIAPANDRIAL = rs.getString("GLICEMIAPANDRIAL");
                String info1 = rs.getString("UREA");
                String info2 = rs.getString("CREATININA");
                String info3 = rs.getString("ACIDO_URICO");
                String info4 = rs.getString("COLESTEROL");
                String info5 = rs.getString("TRIGLICERIDOS");
                String info6 = rs.getString("HDL");
                String info7 = rs.getString("LDL");
                String info8 = rs.getString("VLDL");
                String info9 = rs.getString("BILITOTAL");
                String info10 = rs.getString("BILIDIRECTA");
                String info11 = rs.getString("BILIINDIRECTA");
                String info12 = rs.getString("PROTEINAS_TOTALES");
                String info13 = rs.getString("ALBUMINA");
                String info14 = rs.getString("GLOBULINAS");
                String info15 = rs.getString("RELACION");
                String info16 = rs.getString("TGO");
                String info17 = rs.getString("TGP");
                String info18 = rs.getString("GGT");
                String info19 = rs.getString("FOSFATASA");
                String info20 = rs.getString("LDH");
                String info21 = rs.getString("AMILASA");
                String info22 = rs.getString("LIPASA");
                String info23 = rs.getString("SODIO");
                String info24 = rs.getString("POTASIO");
                String info25 = rs.getString("CLORO");
                String info26 = rs.getString("CALCIO");
                String info27 = rs.getString("FOSFORO");
                String info28 = rs.getString("MAGNESIO");
                String info29 = rs.getString("HIERRO_SERICO");
                String info30 = rs.getString("CK");
                String info31 = rs.getString("CKMB");
                
        
                
         TXTGLICEMIA1.setText(info0); 
         TXTPANDRIAL1.setText(GLICEMIAPANDRIAL);
         TXTUREA1.setText(info1);
         TXTCREATININA1.setText(info2);
         TXTACIDOURICO1.setText(info3);
         TXTCOLESTEROL1.setText(info4);
         TXTRIGLICERIDOS1.setText(info5);
         TXTHDL1.setText(info6);
         TXTLDL1.setText(info7); 
         TXTVLDL1.setText(info8); 
         TXTBILITOTAL1.setText(info9);
         TXTBILIDIRECTA1.setText(info10);
         TXTBILIINDIRECTA1.setText(info11);
         TXTPROTEINAS1.setText(info12);
         TXTALBUMINA1.setText(info13);
         TXTGLOBULINAS1.setText(info14);
         TXTRELACION1.setText(info15);
         TXTTGO1.setText(info16); 
         TXTTGP1.setText(info17);
         TXTGGT1.setText(info18); 
         TXTFOSFATA1.setText(info19);
         TXTLDH1.setText(info20);
         TXTAMILASA1.setText(info21);
         TXTLIPASA1.setText(info22);
         TXTSODIO1.setText(info23);
         TXTPOTASIO1.setText(info24);
         TXTCLORO1.setText(info25);    
         TXTCALCIO1.setText(info26); 
         TXTFOSFORO1.setText(info27);
         TXTMAGNESIO1.setText(info28);
         TXTHIERRO1.setText(info29);
         TXTCK1.setText(info30);
         TXTCKMB1.setText(info31);
         
         
 
            }

        } catch (Exception e) {System.out.println(e);
        }  
        
        
    finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
        
        
        
        
        
    }
         
              public void AuditoriaAgregar(){
            
            
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Agrego al paciente "+ TXTPnombre.getText()+" "+TXTPapellido.getText() +" " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idusuario);
            ps.setInt(2, idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
   finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
     
    }               
                    
          public void AuditoriaModificar(){
            
            
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Modificó los valores referenciales de: Quimica Sanguinea" ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idusuario);
            ps.setInt(2, idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
 finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
     
    }                                        
                          
                
          
          
          
          
 public void updateReporte()
    {

      
        ruta_archivo="C://Fundaginebra//Reportes//"+PdfNames+".pdf";
        int codigo =  idCallestudios;
        File ruta = new File(ruta_archivo);
       
        
       
        
        if ( ruta_archivo.trim().length() != 0) {
 
         update_pdf(codigo, ruta);
         ruta_archivo = "";

  
        } else {
            //JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
        }
    
    }
       
       

 
 
 
   public void mostrarQuimica() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_quimica` WHERE id_historiaQU=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
TXTGLICEMIA.setText(rs.getString("GLICEMIA"));
TXTUREA.setText(rs.getString("UREA"));
TXTCREATININA.setText(rs.getString("CREATININA"));
TXTACIDOURICO.setText(rs.getString("ACIDO_URICO"));
TXTCOLESTEROL.setText(rs.getString("COLESTEROL"));
TXTRIGLICERIDOS.setText(rs.getString("TRIGLICERIDOS"));
TXTHDL.setText(rs.getString("HDL"));
TXTLDL.setText(rs.getString("LDL"));
TXTVLDL.setText(rs.getString("VLDL"));
TXTBILITOTAL.setText(rs.getString("BILITOTAL"));
TXTBILIDIRECTA.setText(rs.getString("BILIDIRECTA"));
TXTBILIINDIRECTA.setText(rs.getString("BILIINDIRECTA"));
TXTPROTEINAS.setText(rs.getString("PROTEINAS_TOTALES"));
TXTALBUMINA.setText(rs.getString("ALBUMINA"));
TXTGLOBULINAS.setText(rs.getString("GLOBULINAS"));
TXTRELACION.setText(rs.getString("RELACION"));
TXTTGO.setText(rs.getString("TGO"));
TXTTGP.setText(rs.getString("TGP"));
TXTGGT.setText(rs.getString("GGT"));
TXTFOSFATA.setText(rs.getString("FOSFATASA"));
TXTLDH.setText(rs.getString("LDH"));
TXTAMILASA.setText(rs.getString("AMILASA"));
TXTLIPASA.setText(rs.getString("LIPASA"));
TXTSODIO.setText(rs.getString("SODIO"));
TXTPOTASIO.setText(rs.getString("POTASIO"));
TXTCLORO.setText(rs.getString("CLORO"));
TXTCALCIO.setText(rs.getString("CALCIO"));
TXTFOSFORO.setText(rs.getString("FOSFORO"));
TXTMAGNESIO.setText(rs.getString("MAGNESIO"));
TXTHIERRO.setText(rs.getString("HIERRO_SERICO"));
TXTCK.setText(rs.getString("CK"));
TXTCKMB.setText(rs.getString("CKMB"));
TXTPANDRIAL.setText(rs.getString("GLICEMIAPANDRIAL"));      
JtextObservaciones.setText(rs.getString("Observacion"));          
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}
 
 
 
 
 
 
      
       public void update_pdf(int codigo, File ruta) {
           
        updateLaboratorio pa = new updateLaboratorio();
        updateLaboratorioDao po = new  updateLaboratorioDao();
        pa.setIdlabUpdate(codigo);
        
        try {
            byte[] pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
            pa.setArchivoUpdate(pdf);
        } catch (IOException ex) {
            pa.setArchivoUpdate(null);
            System.out.println("Error al agregar archivo pdf "+ex);
        }
        po.updateLaboratorio(pa);
    }
   
          
          
          
         public void backtoConsulta(){
   
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       ConsultaLaboratorio jlab = new ConsultaLaboratorio();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(jlab);
       jlab.setClosable(true);
       jlab.setIconifiable(true);
       
        try {
            jlab.setMaximum(true);
        } catch (Exception e) {
        }
        jlab.toFront();
        jlab.setVisible(true);

   
   }
   
          
          
          
          
       public int idCallestudios=0;
       public String estadoEstudio="";
       private int labid;               
       private String labEstudio, labCedula, fechaEstudio;  
       
       
       
        public void setfechaEstudio(String fecha) {
        this.fechaEstudio = fecha;
    }        
       
       public String getfechaEstudio() {
        return fechaEstudio;
    } 
        
       
       public void setValorA(int labid2) {
        this.labid = labid2;
    }        
       
       public int getValorA() {
        return labid;
    } 

       
        public void setValorB(String labEstudio2) {
        this.labEstudio = labEstudio2;
    }        
         public String getValorB() {
        return labEstudio;
    }
         
         
        public void setValorC(String labCedula2) {
        this.labCedula = labCedula2;
    }        
         public String getValorC() {
        return labCedula;
    }
          
      
         
         
    int order=0;
    String Factura="";
   public void knowAboutplace(){
        
       
          SimpleDateFormat FormatoFecha = new SimpleDateFormat("yyyy/MM/dd");
          String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
          
          if(!estadoEstudio.equals("")){  
          
          String fechaEstudio1 = fechaEstudio; 
          String[] partesFecha = fechaEstudio1.split("/");
          String mesFormateado = String.format("%02d", Integer.parseInt(partesFecha[1]));
          Fecha = partesFecha[2] + "/" + mesFormateado + "/" + partesFecha[0];
           }
          
          
          
          Connection con=null;
          EnlaceBd cn = new EnlaceBd();
          PreparedStatement ps=null;
          ResultSet rs=null;
     
       
         String busqueda = this.TXTPcedula.getText();
         try{
         String sql="SELECT id_orden, lugar, cedula, nombre, apellido, fecha, Factura " +
                     "FROM orden_lab o " +
                     "INNER JOIN table_paciente n " +
                     "ON o.paciente = n.Idpaciente " +
                     "WHERE Cedula = ? AND fecha = ?";
      
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setString(1, busqueda );
        ps.setString(2, Fecha);
        rs=ps.executeQuery();
        if(rs.next()){
        order=rs.getInt("lugar");
        Factura=rs.getString("Factura");
    //  System.out.println(order);
         }
        
        else{
        Factura="";
        }


}catch(Exception e){

System.out.println("error en knowAboutPlace"+e);
}
         
    finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    } }


     
      public void procesarPaciente() {
    // Primero valida la cédula
    String cedula = TXTPcedula.getText();
    if ("V-".equals(cedula) || cedula.isEmpty()) {
        JOptionPane.showMessageDialog(null, "CAMPO VACIO O CÉDULA INVALIDA", "CÉDULA", JOptionPane.ERROR_MESSAGE);
        TXTPcedula.setText("V-");
        return; // Detiene la ejecución si la cédula es inválida
    }
    
    // Luego, llama a knowAboutplace para buscar la factura
    knowAboutplace();
    
    if (Factura.equals("")) {
        // Si no se encuentra factura, pregunta si desea registrar
        if (JOptionPane.showConfirmDialog(rootPane, "ESTE PACIENTE NO TIENE UN NÚMERO DE ORDEN NI FACTURA ASIGNADO ¿DESEA AGREGARLO?",
            "PACIENTE", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {       
            goToRegister();
        }
    } else {
        // Si ya tiene factura, se puede proceder con la llamada a Callpacient()
        Callpacient();
    }
}


   
         
         
  DefaultTableModel modelo = new DefaultTableModel();
  labEstudiosBdDao labDao = new labEstudiosBdDao();

  Temporal MP = new Temporal();
  Mprincipal Menu = new Mprincipal();
  int idusuario=MP.getTexto();

  Encriptar encriptar = new Encriptar();
  JCPacientes pacientes  = new JCPacientes();
  JPacientesDao pacientesDao  = new JPacientesDao();     
  Tabla_PdfVO tpdf = new Tabla_PdfVO();   
  String ruta_archivo = "";
  String Usuario;
  Validar va = new Validar();
  Jlab_auditorias audit = new Jlab_auditorias();
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgregar;
    private javax.swing.JButton BtnCancelar;
    private javax.swing.JButton BtnSearch;
    private javax.swing.JLabel FechaAc8;
    private com.toedter.calendar.JDateChooser FechaNacimiento;
    private javax.swing.JTextField IdPacientess;
    private javax.swing.JPanel JPregistro;
    private javax.swing.JRadioButton JRMasculino;
    private javax.swing.JRadioButton JRfemenino;
    private javax.swing.JRadioButton JradioPerfil;
    private javax.swing.JRadioButton Jradioreferencias;
    private javax.swing.JTextArea JtextObservaciones;
    private javax.swing.JTextField TXTACIDOURICO;
    private javax.swing.JTextField TXTACIDOURICO1;
    private javax.swing.JTextField TXTALBUMINA;
    private javax.swing.JTextField TXTALBUMINA1;
    private javax.swing.JTextField TXTAMILASA;
    private javax.swing.JTextField TXTAMILASA1;
    private javax.swing.JTextField TXTBILIDIRECTA;
    private javax.swing.JTextField TXTBILIDIRECTA1;
    private javax.swing.JTextField TXTBILIINDIRECTA;
    private javax.swing.JTextField TXTBILIINDIRECTA1;
    private javax.swing.JTextField TXTBILITOTAL;
    private javax.swing.JTextField TXTBILITOTAL1;
    private javax.swing.JTextField TXTCALCIO;
    private javax.swing.JTextField TXTCALCIO1;
    private javax.swing.JTextField TXTCK;
    private javax.swing.JTextField TXTCK1;
    private javax.swing.JTextField TXTCKMB;
    private javax.swing.JTextField TXTCKMB1;
    private javax.swing.JTextField TXTCLORO;
    private javax.swing.JTextField TXTCLORO1;
    private javax.swing.JTextField TXTCOLESTEROL;
    private javax.swing.JTextField TXTCOLESTEROL1;
    private javax.swing.JTextField TXTCREATININA;
    private javax.swing.JTextField TXTCREATININA1;
    private javax.swing.JTextField TXTFOSFATA;
    private javax.swing.JTextField TXTFOSFATA1;
    private javax.swing.JTextField TXTFOSFORO;
    private javax.swing.JTextField TXTFOSFORO1;
    private javax.swing.JTextField TXTGGT;
    private javax.swing.JTextField TXTGGT1;
    private javax.swing.JTextField TXTGLICEMIA;
    private javax.swing.JTextField TXTGLICEMIA1;
    private javax.swing.JTextField TXTGLOBULINAS;
    private javax.swing.JTextField TXTGLOBULINAS1;
    private javax.swing.JTextField TXTHDL;
    private javax.swing.JTextField TXTHDL1;
    private javax.swing.JTextField TXTHIERRO;
    private javax.swing.JTextField TXTHIERRO1;
    private javax.swing.JTextField TXTLDH;
    private javax.swing.JTextField TXTLDH1;
    private javax.swing.JTextField TXTLDL;
    private javax.swing.JTextField TXTLDL1;
    private javax.swing.JTextField TXTLIPASA;
    private javax.swing.JTextField TXTLIPASA1;
    private javax.swing.JTextField TXTMAGNESIO;
    private javax.swing.JTextField TXTMAGNESIO1;
    private javax.swing.JTextField TXTPANDRIAL;
    private javax.swing.JTextField TXTPANDRIAL1;
    private javax.swing.JTextField TXTPOTASIO;
    private javax.swing.JTextField TXTPOTASIO1;
    private javax.swing.JTextField TXTPROTEINAS;
    private javax.swing.JTextField TXTPROTEINAS1;
    private javax.swing.JTextField TXTPapellido;
    public javax.swing.JTextField TXTPcedula;
    private javax.swing.JTextField TXTPcorreo;
    private javax.swing.JTextArea TXTPdireccion;
    private javax.swing.JTextField TXTPnombre;
    private javax.swing.JFormattedTextField TXTPtelefono;
    private javax.swing.JTextField TXTRELACION;
    private javax.swing.JTextField TXTRELACION1;
    private javax.swing.JTextField TXTRIGLICERIDOS;
    private javax.swing.JTextField TXTRIGLICERIDOS1;
    private javax.swing.JTextField TXTSODIO;
    private javax.swing.JTextField TXTSODIO1;
    private javax.swing.JTextField TXTTGO;
    private javax.swing.JTextField TXTTGO1;
    private javax.swing.JTextField TXTTGP;
    private javax.swing.JTextField TXTTGP1;
    private javax.swing.JTextField TXTUREA;
    private javax.swing.JTextField TXTUREA1;
    private javax.swing.JTextField TXTVLDL;
    private javax.swing.JTextField TXTVLDL1;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton34;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

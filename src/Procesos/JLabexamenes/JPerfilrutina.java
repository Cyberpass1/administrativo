/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Procesos.JLabexamenes;

import Clases.Encriptar;
import Clases.EnlaceBd;
import Clases.JCPacientes;
import Clases.JPacientesDao;
import Clases.Jlab_auditorias;
import Clases.PdfVO;
import Clases.Validar;
import Menu.Mprincipal;
import Clases.PdfDAO1;
import Clases.Tabla_PdfVO;
import Clases.Temporal;
import Clases.labEstudiosBdDao;
import Clases.sql;
import Clases.updateLaboratorio;
import Clases.updateLaboratorioDao;
import Consultas.ConsultaLaboratorio;
import Procesos.JLaboratorio;
import Registros.JPacientes;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FCGinebraI
 */
public class JPerfilrutina extends javax.swing.JInternalFrame {

    /**
     * Creates new form JERutina
     */
    public JPerfilrutina() {
    initComponents();
    ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
    informacionpdf();
    MaxIdestudios();
    this.JRMasculino.setSelected(true);
    JPregistro.setVisible(false);
    BtnAgregar.setVisible(false);
    IdPacientess.setVisible(false);
    CallReferencia();
    JradioPerfil.setSelected(true);
// ConocerUsuario();
texto.setLineWrap(true);
    }
     

 String  empresa, rif, ubicacion, telefonos, piepagina;
   public void informacionpdf() {

   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
   
        try {

            String sql = "select * from tableinfopdfs";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                empresa = rs.getString("nombrempresa");
                rif = rs.getString("rif");
                ubicacion = rs.getString("ubicacion");
                telefonos = rs.getString("telefonos");
                piepagina = rs.getString("infopiepagina");
               
            }

        } catch (Exception e) {System.out.println(e);
        } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    } 
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        BtnAgregar = new javax.swing.JButton();
        BtnCancelar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        JPregistro = new javax.swing.JPanel();
        TXTPnombre = new javax.swing.JTextField();
        TXTPcorreo = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        JRMasculino = new javax.swing.JRadioButton();
        JRfemenino = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TXTPdireccion = new javax.swing.JTextArea();
        FechaNacimiento = new com.toedter.calendar.JDateChooser();
        TXTPtelefono = new javax.swing.JFormattedTextField();
        TXTPapellido = new javax.swing.JTextField();
        TXTPcedula = new javax.swing.JTextField();
        BtnSearch = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        IdPacientess = new javax.swing.JTextField();
        FechaAc8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jButton34 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        JcheckUro = new javax.swing.JCheckBox();
        JcheckCopro = new javax.swing.JCheckBox();
        JCheckppt = new javax.swing.JCheckBox();
        JEnzimatico = new javax.swing.JCheckBox();
        JSerologia = new javax.swing.JCheckBox();
        FechaAc6 = new javax.swing.JLabel();
        JPcr = new javax.swing.JCheckBox();
        JSanguineo = new javax.swing.JCheckBox();
        JObserva = new javax.swing.JCheckBox();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        TXTCALCIO = new javax.swing.JTextField();
        TXTHDL = new javax.swing.JTextField();
        TXTRIGLICERIDOS = new javax.swing.JTextField();
        TXTCOLESTEROL = new javax.swing.JTextField();
        TXTACIDOURICO = new javax.swing.JTextField();
        TXTCREATININA = new javax.swing.JTextField();
        TXTUREA = new javax.swing.JTextField();
        TXTGLICEMIA = new javax.swing.JTextField();
        TXTLDL = new javax.swing.JTextField();
        TXTFOSFATA = new javax.swing.JTextField();
        TXTRELACION = new javax.swing.JTextField();
        TXTGLOBULINAS = new javax.swing.JTextField();
        TXTALBUMINA = new javax.swing.JTextField();
        TXTPROTEINAS = new javax.swing.JTextField();
        TXTBILIINDIRECTA = new javax.swing.JTextField();
        TXTBILIDIRECTA = new javax.swing.JTextField();
        TXTBILITOTAL = new javax.swing.JTextField();
        TXTVLDL = new javax.swing.JTextField();
        TXTTGO = new javax.swing.JTextField();
        TXTTGP = new javax.swing.JTextField();
        TXTPANDRIAL = new javax.swing.JTextField();
        TXTFOSFORO = new javax.swing.JTextField();
        TXTMAGNESIO = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        TxtLeucocitos = new javax.swing.JTextField();
        TxtLinfocitos = new javax.swing.JTextField();
        TxtNeutrofilos = new javax.swing.JTextField();
        TxtHemoglobina = new javax.swing.JTextField();
        TxtHematocrito = new javax.swing.JTextField();
        TxtVCM = new javax.swing.JTextField();
        TxtPlaquetas = new javax.swing.JTextField();
        TXtCHCM = new javax.swing.JTextField();
        TxtEosinofilos = new javax.swing.JTextField();
        TxtMonocitos = new javax.swing.JTextField();
        TxtBasofilo = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        TXTLDH = new javax.swing.JTextField();
        TXTGGT = new javax.swing.JTextField();
        TXTAMILASA = new javax.swing.JTextField();
        TXTLIPASA = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        TXTSANGUINEO = new javax.swing.JTextField();
        TXTRH = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        TXTSANGUINEO1 = new javax.swing.JTextField();
        TXTRH1 = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        TXTPCR1 = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        TXTSANGUINEO3 = new javax.swing.JTextField();
        TXTRH3 = new javax.swing.JTextField();
        TXTPCR = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        JpanelUro = new javax.swing.JPanel();
        JCcolor1 = new javax.swing.JComboBox<>();
        JCph = new javax.swing.JComboBox<>();
        JCnitridos = new javax.swing.JComboBox<>();
        JCglucosa1 = new javax.swing.JComboBox<>();
        TxtOlor1 = new javax.swing.JTextField();
        JCcuerposCe = new javax.swing.JComboBox<>();
        JCurobilinogeno1 = new javax.swing.JComboBox<>();
        JCproteinas = new javax.swing.JComboBox<>();
        TxtDensidad = new javax.swing.JTextField();
        JCaspecto = new javax.swing.JComboBox<>();
        JChemoglobina = new javax.swing.JComboBox<>();
        JCpigmentos = new javax.swing.JComboBox<>();
        JCbilirrubina = new javax.swing.JComboBox<>();
        JCbacterias = new javax.swing.JComboBox<>();
        JCEP = new javax.swing.JComboBox<>();
        TxtLeucositos = new javax.swing.JTextField();
        TxtHematies = new javax.swing.JTextField();
        TxtCelulasredondas = new javax.swing.JTextField();
        TxtFilamentos = new javax.swing.JComboBox<>();
        Txtcilindros = new javax.swing.JTextField();
        Txtcristales = new javax.swing.JTextField();
        TXTfungicas = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        JpanelCopro = new javax.swing.JPanel();
        JCcolor4 = new javax.swing.JComboBox<>();
        JCreaccion1 = new javax.swing.JComboBox<>();
        JCmoco = new javax.swing.JComboBox<>();
        JCAspect = new javax.swing.JComboBox<>();
        JCconsistencia = new javax.swing.JComboBox<>();
        Jolor = new javax.swing.JComboBox<>();
        JCrestos = new javax.swing.JComboBox<>();
        JCsangre1 = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        JtextMicroscopio = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        TXTCALCIO1 = new javax.swing.JTextField();
        TXTHDL1 = new javax.swing.JTextField();
        TXTRIGLICERIDOS1 = new javax.swing.JTextField();
        TXTCOLESTEROL1 = new javax.swing.JTextField();
        TXTACIDOURICO1 = new javax.swing.JTextField();
        TXTCREATININA1 = new javax.swing.JTextField();
        TXTUREA1 = new javax.swing.JTextField();
        TXTGLICEMIA1 = new javax.swing.JTextField();
        TXTLDL1 = new javax.swing.JTextField();
        TXTFOSFATA1 = new javax.swing.JTextField();
        TXTRELACION1 = new javax.swing.JTextField();
        TXTGLOBULINAS1 = new javax.swing.JTextField();
        TXTALBUMINA1 = new javax.swing.JTextField();
        TXTPROTEINAS1 = new javax.swing.JTextField();
        TXTBILIINDIRECTA1 = new javax.swing.JTextField();
        TXTBILIDIRECTA1 = new javax.swing.JTextField();
        TXTBILITOTAL1 = new javax.swing.JTextField();
        TXTVLDL1 = new javax.swing.JTextField();
        TXTTGO1 = new javax.swing.JTextField();
        TXTTGP1 = new javax.swing.JTextField();
        TXTPANDRIAL1 = new javax.swing.JTextField();
        TXTFOSFORO1 = new javax.swing.JTextField();
        TXTMAGNESIO1 = new javax.swing.JTextField();
        jButton21 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        TxtPlaquetas1 = new javax.swing.JTextField();
        TXtCHCM1 = new javax.swing.JTextField();
        TxtVCM1 = new javax.swing.JTextField();
        TxtHematocrito1 = new javax.swing.JTextField();
        TxtHemoglobina1 = new javax.swing.JTextField();
        TxtNeutrofilos1 = new javax.swing.JTextField();
        TxtLinfocitos1 = new javax.swing.JTextField();
        TxtLeucocitos1 = new javax.swing.JTextField();
        TxtEosinofilos1 = new javax.swing.JTextField();
        TxtMonocitos1 = new javax.swing.JTextField();
        TxtBasofilo1 = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        TXTLDH1 = new javax.swing.JTextField();
        TXTHGGT1 = new javax.swing.JTextField();
        TXTMGGT1 = new javax.swing.JTextField();
        TXTAMILASA1 = new javax.swing.JTextField();
        TXTLIPASA1 = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        TXTPROTROMBINA = new javax.swing.JTextField();
        TXTPARCIAL = new javax.swing.JTextField();
        TXTVSG = new javax.swing.JTextField();
        TXTRPC = new javax.swing.JTextField();
        TXTDPC = new javax.swing.JTextField();
        TXTVRH = new javax.swing.JTextField();
        TXTM = new javax.swing.JTextField();
        TXTKIDS = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jButton23 = new javax.swing.JButton();
        TXTUNID = new javax.swing.JTextField();
        TXTUNID2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        JtextINR = new javax.swing.JTextField();
        JtextISIS = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        JCPruebasangre = new javax.swing.JComboBox<>();
        TXTrematoideo = new javax.swing.JTextField();
        TXTREACTIVA = new javax.swing.JTextField();
        TXTASTRO = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        TxtObservacion = new javax.swing.JTextArea();
        TXTHLV = new javax.swing.JComboBox<>();
        TXTVDRL = new javax.swing.JComboBox<>();
        jPanel12 = new javax.swing.JPanel();
        JradioPerfil = new javax.swing.JRadioButton();
        Jradioreferencias = new javax.swing.JRadioButton();
        JradioUroanalisis = new javax.swing.JRadioButton();
        JradioPtt = new javax.swing.JRadioButton();
        JradioSero = new javax.swing.JRadioButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BtnAgregar.setText("Agregar");
        BtnAgregar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnAgregar.setContentAreaFilled(false);
        BtnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 120, 30));

        BtnCancelar.setText("NUEVO");
        BtnCancelar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        BtnCancelar.setContentAreaFilled(false);
        BtnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelarActionPerformed(evt);
            }
        });
        jPanel3.add(BtnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, 120, 30));

        jPanel9.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 300, 60));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane1.setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JPregistro.setBackground(new java.awt.Color(255, 255, 255));
        JPregistro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTPnombre.setEditable(false);
        TXTPnombre.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre")));
        TXTPnombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPnombreActionPerformed(evt);
            }
        });
        TXTPnombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPnombreKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPnombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 120, 50));

        TXTPcorreo.setEditable(false);
        TXTPcorreo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Correo"));
        TXTPcorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPcorreoKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPcorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 120, 50));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Sexo"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JRMasculino.setBackground(new java.awt.Color(255, 255, 255));
        JRMasculino.setText("Masculino");
        JRMasculino.setEnabled(false);
        JRMasculino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRMasculinoActionPerformed(evt);
            }
        });
        jPanel5.add(JRMasculino, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        JRfemenino.setBackground(new java.awt.Color(255, 255, 255));
        JRfemenino.setText("Femenino");
        JRfemenino.setEnabled(false);
        JRfemenino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRfemeninoActionPerformed(evt);
            }
        });
        jPanel5.add(JRfemenino, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, -1, -1));

        JPregistro.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 250, 50));

        TXTPdireccion.setEditable(false);
        TXTPdireccion.setColumns(20);
        TXTPdireccion.setLineWrap(true);
        TXTPdireccion.setRows(5);
        TXTPdireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Dirección"));
        TXTPdireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPdireccionKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(TXTPdireccion);

        JPregistro.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 250, 130));

        FechaNacimiento.setBackground(new java.awt.Color(255, 255, 255));
        FechaNacimiento.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha de Nacimiento"));
        FechaNacimiento.setToolTipText("");
        FechaNacimiento.setEnabled(false);
        FechaNacimiento.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        JPregistro.add(FechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 250, 50));

        TXTPtelefono.setEditable(false);
        TXTPtelefono.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Telefono"));
        try {
            TXTPtelefono.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        TXTPtelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPtelefonoActionPerformed(evt);
            }
        });
        JPregistro.add(TXTPtelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 120, 50));

        TXTPapellido.setEditable(false);
        TXTPapellido.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Apellido"));
        TXTPapellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPapellidoActionPerformed(evt);
            }
        });
        TXTPapellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPapellidoKeyTyped(evt);
            }
        });
        JPregistro.add(TXTPapellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 120, 50));

        jPanel1.add(JPregistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 310, 390));

        TXTPcedula.setText("V-");
        TXTPcedula.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cédula"));
        TXTPcedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPcedulaActionPerformed(evt);
            }
        });
        TXTPcedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPcedulaKeyTyped(evt);
            }
        });
        jPanel1.add(TXTPcedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 180, 50));

        BtnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/magnifier-1_icon-icons.com_56924.png"))); // NOI18N
        BtnSearch.setBorderPainted(false);
        BtnSearch.setContentAreaFilled(false);
        BtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(BtnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, 50, 50));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 400, 20));
        jPanel1.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 400, 20));
        jPanel1.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 400, 20));

        IdPacientess.setText("ID");
        jPanel1.add(IdPacientess, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, -1, 50));

        FechaAc8.setBackground(new java.awt.Color(0, 0, 0));
        FechaAc8.setFont(new java.awt.Font("Agency FB", 0, 18)); // NOI18N
        FechaAc8.setText("                         P A C I E N T E ");
        jPanel1.add(FechaAc8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, 20));

        jTabbedPane1.addTab("tab1", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "PACIENTE", "CEDULA", "EDAD", "SEXO", "CORREO", "ESTUDIO"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 370, 450));

        jTabbedPane1.addTab("tab2", jPanel2);

        jPanel9.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 300, 580));

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel13.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton34.setText("Generar");
        jButton34.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton34.setContentAreaFilled(false);
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton34ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton34, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 20, 100, 30));

        jButton20.setText("Cancelar");
        jButton20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton20.setContentAreaFilled(false);
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton20, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 20, 100, 30));

        JcheckUro.setBackground(new java.awt.Color(255, 255, 255));
        JcheckUro.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JcheckUro.setText("Uroanálisis");
        JcheckUro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JcheckUroActionPerformed(evt);
            }
        });
        jPanel13.add(JcheckUro, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        JcheckCopro.setBackground(new java.awt.Color(255, 255, 255));
        JcheckCopro.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JcheckCopro.setText("Coproanálisis");
        JcheckCopro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JcheckCoproActionPerformed(evt);
            }
        });
        jPanel13.add(JcheckCopro, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, -1, -1));

        JCheckppt.setBackground(new java.awt.Color(255, 255, 255));
        JCheckppt.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCheckppt.setText("PPT");
        JCheckppt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCheckpptActionPerformed(evt);
            }
        });
        jPanel13.add(JCheckppt, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, -1, -1));

        JEnzimatico.setBackground(new java.awt.Color(255, 255, 255));
        JEnzimatico.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JEnzimatico.setText("Enzimatico");
        JEnzimatico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JEnzimaticoActionPerformed(evt);
            }
        });
        jPanel13.add(JEnzimatico, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, -1, -1));

        JSerologia.setBackground(new java.awt.Color(255, 255, 255));
        JSerologia.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JSerologia.setText("Serologia");
        JSerologia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JSerologiaActionPerformed(evt);
            }
        });
        jPanel13.add(JSerologia, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, -1));

        FechaAc6.setBackground(new java.awt.Color(0, 0, 0));
        FechaAc6.setFont(new java.awt.Font("Arial Narrow", 0, 12)); // NOI18N
        FechaAc6.setText("Agregar:");
        jPanel13.add(FechaAc6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 50, 20));

        JPcr.setBackground(new java.awt.Color(255, 255, 255));
        JPcr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JPcr.setText("PCR");
        JPcr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JPcrActionPerformed(evt);
            }
        });
        jPanel13.add(JPcr, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, -1, -1));

        JSanguineo.setBackground(new java.awt.Color(255, 255, 255));
        JSanguineo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JSanguineo.setText("Grp. Sanguineo");
        JSanguineo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JSanguineoActionPerformed(evt);
            }
        });
        jPanel13.add(JSanguineo, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, -1, -1));

        JObserva.setBackground(new java.awt.Color(255, 255, 255));
        JObserva.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JObserva.setText("Observación");
        JObserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JObservaActionPerformed(evt);
            }
        });
        jPanel13.add(JObserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, -1, -1));

        jPanel9.add(jPanel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 550, 700, 60));

        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane2.setEnabled(false);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hematología"), "QUIMICA SANGUINEA"));
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTCALCIO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Calcio"));
        TXTCALCIO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTCALCIOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCALCIOKeyTyped(evt);
            }
        });
        jPanel10.add(TXTCALCIO, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 140, 120, 40));

        TXTHDL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "H.D.L colesterol"));
        TXTHDL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTHDLActionPerformed(evt);
            }
        });
        TXTHDL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTHDLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTHDLKeyTyped(evt);
            }
        });
        jPanel10.add(TXTHDL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 120, 40));

        TXTRIGLICERIDOS.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Trigliceridos"));
        TXTRIGLICERIDOS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTRIGLICERIDOSKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRIGLICERIDOSKeyTyped(evt);
            }
        });
        jPanel10.add(TXTRIGLICERIDOS, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 120, 40));

        TXTCOLESTEROL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Colesterol"));
        TXTCOLESTEROL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTCOLESTEROLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCOLESTEROLKeyTyped(evt);
            }
        });
        jPanel10.add(TXTCOLESTEROL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 120, 40));

        TXTACIDOURICO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ácido Urico"));
        TXTACIDOURICO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTACIDOURICOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTACIDOURICOKeyTyped(evt);
            }
        });
        jPanel10.add(TXTACIDOURICO, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 120, 40));

        TXTCREATININA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Creatinina"));
        TXTCREATININA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTCREATININAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCREATININAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTCREATININA, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 120, 40));

        TXTUREA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Urea"));
        TXTUREA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTUREAActionPerformed(evt);
            }
        });
        TXTUREA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTUREAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTUREAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTUREA, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 120, 40));

        TXTGLICEMIA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Glicemia"));
        TXTGLICEMIA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTGLICEMIAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTGLICEMIAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTGLICEMIA, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 120, 40));

        TXTLDL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "L.D.L colesterol"));
        TXTLDL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTLDLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLDLKeyTyped(evt);
            }
        });
        jPanel10.add(TXTLDL, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 120, 40));

        TXTFOSFATA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fosfata Alcalina"));
        TXTFOSFATA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTFOSFATAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTFOSFATAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTFOSFATA, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 180, 120, 40));

        TXTRELACION.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Rel. ALB/GLOB"));
        TXTRELACION.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTRELACIONKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRELACIONKeyTyped(evt);
            }
        });
        jPanel10.add(TXTRELACION, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, 120, 40));

        TXTGLOBULINAS.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Globulinas"));
        TXTGLOBULINAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTGLOBULINASActionPerformed(evt);
            }
        });
        TXTGLOBULINAS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTGLOBULINASKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTGLOBULINASKeyTyped(evt);
            }
        });
        jPanel10.add(TXTGLOBULINAS, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 260, 120, 40));

        TXTALBUMINA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Albumina"));
        TXTALBUMINA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTALBUMINAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTALBUMINAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTALBUMINA, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 260, 120, 40));

        TXTPROTEINAS.setToolTipText("Proteina Totales");
        TXTPROTEINAS.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Proteinas Totales"));
        TXTPROTEINAS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTPROTEINASKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPROTEINASKeyTyped(evt);
            }
        });
        jPanel10.add(TXTPROTEINAS, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 220, 120, 40));

        TXTBILIINDIRECTA.setToolTipText("Bilirrubina Indirecta");
        TXTBILIINDIRECTA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Indirecta"));
        TXTBILIINDIRECTA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTBILIINDIRECTAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILIINDIRECTAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTBILIINDIRECTA, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, 120, 40));

        TXTBILIDIRECTA.setToolTipText("Bilirrubina Directa");
        TXTBILIDIRECTA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Directa"));
        TXTBILIDIRECTA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTBILIDIRECTAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILIDIRECTAKeyTyped(evt);
            }
        });
        jPanel10.add(TXTBILIDIRECTA, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 120, 40));

        TXTBILITOTAL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Total"));
        TXTBILITOTAL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTBILITOTALActionPerformed(evt);
            }
        });
        TXTBILITOTAL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTBILITOTALKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILITOTALKeyTyped(evt);
            }
        });
        jPanel10.add(TXTBILITOTAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 120, 40));

        TXTVLDL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "V.L.D.L colesterol"));
        TXTVLDL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTVLDLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTVLDLKeyTyped(evt);
            }
        });
        jPanel10.add(TXTVLDL, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 120, 40));

        TXTTGO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T.G.O"));
        TXTTGO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTTGOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTTGOKeyTyped(evt);
            }
        });
        jPanel10.add(TXTTGO, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 60, 120, 40));

        TXTTGP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T.G.P"));
        TXTTGP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTTGPActionPerformed(evt);
            }
        });
        TXTTGP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTTGPKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTTGPKeyTyped(evt);
            }
        });
        jPanel10.add(TXTTGP, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, 120, 40));

        TXTPANDRIAL.setToolTipText("Glicemia postpandrial");
        TXTPANDRIAL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Glicemia postpandrial"));
        TXTPANDRIAL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTPANDRIALKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPANDRIALKeyTyped(evt);
            }
        });
        jPanel10.add(TXTPANDRIAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 120, 40));

        TXTFOSFORO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fosforo"));
        TXTFOSFORO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTFOSFOROKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTFOSFOROKeyTyped(evt);
            }
        });
        jPanel10.add(TXTFOSFORO, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 220, 120, 40));

        TXTMAGNESIO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Magnesio"));
        TXTMAGNESIO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTMAGNESIOKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTMAGNESIOKeyTyped(evt);
            }
        });
        jPanel10.add(TXTMAGNESIO, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 300, 120, 40));

        jPanel4.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 0, 400, 350));

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "HEMATOLOGÍA"));
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TxtLeucocitos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Leucocitos"));
        TxtLeucocitos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtLeucocitosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtLeucocitosKeyTyped(evt);
            }
        });
        jPanel11.add(TxtLeucocitos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 120, 40));

        TxtLinfocitos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Linfocitos"));
        TxtLinfocitos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtLinfocitosActionPerformed(evt);
            }
        });
        TxtLinfocitos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtLinfocitosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtLinfocitosKeyTyped(evt);
            }
        });
        jPanel11.add(TxtLinfocitos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 120, 40));

        TxtNeutrofilos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Neutrofilos"));
        TxtNeutrofilos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtNeutrofilosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtNeutrofilosKeyTyped(evt);
            }
        });
        jPanel11.add(TxtNeutrofilos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 120, 40));

        TxtHemoglobina.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hemoglobina"));
        TxtHemoglobina.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtHemoglobinaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtHemoglobinaKeyTyped(evt);
            }
        });
        jPanel11.add(TxtHemoglobina, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 120, 40));

        TxtHematocrito.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hematocrito"));
        TxtHematocrito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtHematocritoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtHematocritoKeyTyped(evt);
            }
        });
        jPanel11.add(TxtHematocrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 120, 40));

        TxtVCM.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "VCM"));
        TxtVCM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtVCMKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtVCMKeyTyped(evt);
            }
        });
        jPanel11.add(TxtVCM, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 120, 40));

        TxtPlaquetas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Plaquetas"));
        TxtPlaquetas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtPlaquetasKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtPlaquetasKeyTyped(evt);
            }
        });
        jPanel11.add(TxtPlaquetas, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 240, 40));

        TXtCHCM.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "CHCM"));
        TXtCHCM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXtCHCMActionPerformed(evt);
            }
        });
        TXtCHCM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXtCHCMKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXtCHCMKeyTyped(evt);
            }
        });
        jPanel11.add(TXtCHCM, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, 120, 40));

        TxtEosinofilos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Eosinofilos"));
        TxtEosinofilos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtEosinofilosFocusLost(evt);
            }
        });
        TxtEosinofilos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtEosinofilosKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtEosinofilosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtEosinofilosKeyTyped(evt);
            }
        });
        jPanel11.add(TxtEosinofilos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 120, 40));

        TxtMonocitos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Monocitos"));
        TxtMonocitos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtMonocitosFocusLost(evt);
            }
        });
        TxtMonocitos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtMonocitosKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtMonocitosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtMonocitosKeyTyped(evt);
            }
        });
        jPanel11.add(TxtMonocitos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 120, 40));

        TxtBasofilo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Basofilo"));
        TxtBasofilo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtBasofiloFocusLost(evt);
            }
        });
        TxtBasofilo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtBasofiloKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtBasofiloKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtBasofiloKeyTyped(evt);
            }
        });
        jPanel11.add(TxtBasofilo, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 120, 40));

        jPanel4.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 260, 350));

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));
        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ENZIMATICO"));
        jPanel19.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTLDH.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "LDH"));
        TXTLDH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXTLDHKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTLDHKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLDHKeyTyped(evt);
            }
        });
        jPanel19.add(TXTLDH, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 120, 40));

        TXTGGT.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "GGT"));
        TXTGGT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTGGTActionPerformed(evt);
            }
        });
        TXTGGT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXTGGTKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTGGTKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTGGTKeyTyped(evt);
            }
        });
        jPanel19.add(TXTGGT, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 120, 40));

        TXTAMILASA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "AMILASA"));
        TXTAMILASA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXTAMILASAKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTAMILASAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTAMILASAKeyTyped(evt);
            }
        });
        jPanel19.add(TXTAMILASA, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 120, 40));

        TXTLIPASA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "LIPASA"));
        TXTLIPASA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTLIPASAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLIPASAKeyTyped(evt);
            }
        });
        jPanel19.add(TXTLIPASA, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 120, 40));

        jPanel4.add(jPanel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, 260, 140));

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));
        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "GRUPO SANGUINEO"));
        jPanel20.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTSANGUINEO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Grupo Sanguineo"));
        TXTSANGUINEO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTSANGUINEOActionPerformed(evt);
            }
        });
        TXTSANGUINEO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTSANGUINEOKeyTyped(evt);
            }
        });
        jPanel20.add(TXTSANGUINEO, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 170, 40));

        TXTRH.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Factor RH"));
        TXTRH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTRHActionPerformed(evt);
            }
        });
        TXTRH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRHKeyTyped(evt);
            }
        });
        jPanel20.add(TXTRH, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 190, 40));

        jPanel21.setBackground(new java.awt.Color(255, 255, 255));
        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "GRUPO SANGUINEO"));
        jPanel21.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTSANGUINEO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Grupo Sanguineo"));
        TXTSANGUINEO1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTSANGUINEO1ActionPerformed(evt);
            }
        });
        TXTSANGUINEO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTSANGUINEO1KeyTyped(evt);
            }
        });
        jPanel21.add(TXTSANGUINEO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 170, 40));

        TXTRH1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Factor RH"));
        TXTRH1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTRH1ActionPerformed(evt);
            }
        });
        TXTRH1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRH1KeyTyped(evt);
            }
        });
        jPanel21.add(TXTRH1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 190, 40));

        jPanel20.add(jPanel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 370, 400, 70));

        jPanel4.add(jPanel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 350, 400, 70));

        jPanel22.setBackground(new java.awt.Color(255, 255, 255));
        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PCR"));
        jPanel22.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTPCR1.setText("0 - 6");
        TXTPCR1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "REFERENCIA"));
        TXTPCR1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPCR1ActionPerformed(evt);
            }
        });
        TXTPCR1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPCR1KeyTyped(evt);
            }
        });
        jPanel22.add(TXTPCR1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 190, 40));

        jPanel23.setBackground(new java.awt.Color(255, 255, 255));
        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "GRUPO SANGUINEO"));
        jPanel23.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTSANGUINEO3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Grupo Sanguineo"));
        TXTSANGUINEO3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTSANGUINEO3ActionPerformed(evt);
            }
        });
        TXTSANGUINEO3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTSANGUINEO3KeyTyped(evt);
            }
        });
        jPanel23.add(TXTSANGUINEO3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 170, 40));

        TXTRH3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Factor RH"));
        TXTRH3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTRH3ActionPerformed(evt);
            }
        });
        TXTRH3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRH3KeyTyped(evt);
            }
        });
        jPanel23.add(TXTRH3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 190, 40));

        jPanel22.add(jPanel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 370, 400, 70));

        TXTPCR.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PCR"));
        TXTPCR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TXTPCRKeyReleased(evt);
            }
        });
        jPanel22.add(TXTPCR, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 170, 40));

        jPanel4.add(jPanel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 420, 400, 70));

        jTabbedPane2.addTab("Perfil 20", jPanel4);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JpanelUro.setBackground(new java.awt.Color(255, 255, 255));
        JpanelUro.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "UROANÁLISIS"));
        JpanelUro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JCcolor1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCcolor1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AMARILLO", "AMBAR", "ROJO" }));
        JCcolor1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Color"));
        JpanelUro.add(JCcolor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 100, 40));

        JCph.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCph.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ÁCIDO", "ALCALINO", "NEUTRA" }));
        JCph.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "PH"));
        JpanelUro.add(JCph, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 100, 40));

        JCnitridos.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCnitridos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCnitridos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nitritos"));
        JCnitridos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCnitridosActionPerformed(evt);
            }
        });
        JpanelUro.add(JCnitridos, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 110, 40));

        JCglucosa1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCglucosa1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCglucosa1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Glucosa"));
        JCglucosa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCglucosa1ActionPerformed(evt);
            }
        });
        JpanelUro.add(JCglucosa1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 100, 40));

        TxtOlor1.setText("SUIGENERIS");
        TxtOlor1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Olor"));
        TxtOlor1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtOlor1KeyTyped(evt);
            }
        });
        JpanelUro.add(TxtOlor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 100, 40));

        JCcuerposCe.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCcuerposCe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCcuerposCe.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cuerpos Cétonicos"));
        JpanelUro.add(JCcuerposCe, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 110, 40));

        JCurobilinogeno1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCurobilinogeno1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCurobilinogeno1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Urobilinógeno"));
        JpanelUro.add(JCurobilinogeno1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 120, 110, 40));

        JCproteinas.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCproteinas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCproteinas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Proteínas"));
        JpanelUro.add(JCproteinas, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 100, 40));

        TxtDensidad.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Densidad"));
        TxtDensidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtDensidadKeyTyped(evt);
            }
        });
        JpanelUro.add(TxtDensidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 100, 40));

        JCaspecto.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCaspecto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CLARO", "LIGERO TURBIO", "TURBIO" }));
        JCaspecto.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Aspecto"));
        JCaspecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCaspectoActionPerformed(evt);
            }
        });
        JpanelUro.add(JCaspecto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 100, 40));

        JChemoglobina.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JChemoglobina.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JChemoglobina.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hemoglobina"));
        JpanelUro.add(JChemoglobina, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 170, 100, 40));

        JCpigmentos.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        JCpigmentos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCpigmentos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Pigmentos Biliares"));
        JpanelUro.add(JCpigmentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 170, 110, 40));

        JCbilirrubina.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCbilirrubina.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO 1+", "POSITIVO 2+", "POSITIVO 3+", "POSITIVO 4+", "TRAZAS", "LIG. TRAZAS" }));
        JCbilirrubina.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina"));
        JCbilirrubina.setLightWeightPopupEnabled(false);
        JpanelUro.add(JCbilirrubina, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 100, 40));

        JCbacterias.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCbacterias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ESCASAS", "MODERADAS", "ABUNDANTES" }));
        JCbacterias.setBorder(javax.swing.BorderFactory.createTitledBorder("Bacterias"));
        JpanelUro.add(JCbacterias, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 60, 130, 40));

        JCEP.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCEP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ESCASAS", "MODERADAS", "ABUNDANTES" }));
        JCEP.setBorder(javax.swing.BorderFactory.createTitledBorder("Celulas E.P."));
        JpanelUro.add(JCEP, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 60, 130, 40));

        TxtLeucositos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Leucocitos"));
        TxtLeucositos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtLeucositosActionPerformed(evt);
            }
        });
        TxtLeucositos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtLeucositosKeyTyped(evt);
            }
        });
        JpanelUro.add(TxtLeucositos, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 20, 270, 40));

        TxtHematies.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hematies"));
        TxtHematies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtHematiesActionPerformed(evt);
            }
        });
        TxtHematies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtHematiesKeyTyped(evt);
            }
        });
        JpanelUro.add(TxtHematies, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, 130, 40));

        TxtCelulasredondas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Células Redondas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        TxtCelulasredondas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtCelulasredondasActionPerformed(evt);
            }
        });
        TxtCelulasredondas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtCelulasredondasKeyTyped(evt);
            }
        });
        JpanelUro.add(TxtCelulasredondas, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 100, 140, 40));

        TxtFilamentos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "ESCASAS", "MODERADAS", "ABUNDANTES" }));
        TxtFilamentos.setBorder(javax.swing.BorderFactory.createTitledBorder("Filamentos de Mucina"));
        JpanelUro.add(TxtFilamentos, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 220, 270, 40));

        Txtcilindros.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cilindro"));
        Txtcilindros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtcilindrosActionPerformed(evt);
            }
        });
        Txtcilindros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtcilindrosKeyTyped(evt);
            }
        });
        JpanelUro.add(Txtcilindros, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 140, 130, 40));

        Txtcristales.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cristales"));
        Txtcristales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtcristalesActionPerformed(evt);
            }
        });
        Txtcristales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtcristalesKeyTyped(evt);
            }
        });
        JpanelUro.add(Txtcristales, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 140, 140, 40));

        TXTfungicas.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Formas Fungicas"));
        TXTfungicas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTfungicasActionPerformed(evt);
            }
        });
        TXTfungicas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTfungicasKeyTyped(evt);
            }
        });
        JpanelUro.add(TXTfungicas, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 180, 270, 40));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        JpanelUro.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 40, 270));

        jPanel6.add(JpanelUro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 690, 280));

        JpanelCopro.setBackground(new java.awt.Color(255, 255, 255));
        JpanelCopro.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "COPROANÁLISIS"));
        JpanelCopro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JCcolor4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCcolor4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MARRÓN", "NEGRO", "VERDE", "AMARILLO", "ROJO" }));
        JCcolor4.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));
        JpanelCopro.add(JCcolor4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 100, 40));

        JCreaccion1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCreaccion1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ÁCIDA", "ALCALINA" }));
        JCreaccion1.setBorder(javax.swing.BorderFactory.createTitledBorder("Reacción"));
        JpanelCopro.add(JCreaccion1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 90, 40));

        JCmoco.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCmoco.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO" }));
        JCmoco.setBorder(javax.swing.BorderFactory.createTitledBorder("Moco"));
        JpanelCopro.add(JCmoco, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 90, 40));

        JCAspect.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCAspect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HETEROGENEO", "HOMOGENEO" }));
        JCAspect.setBorder(javax.swing.BorderFactory.createTitledBorder("Aspecto"));
        JCAspect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JCAspectActionPerformed(evt);
            }
        });
        JpanelCopro.add(JCAspect, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 100, 40));

        JCconsistencia.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCconsistencia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BLANDA", "DURA", "LIQUIDA" }));
        JCconsistencia.setBorder(javax.swing.BorderFactory.createTitledBorder("Consistencia"));
        JpanelCopro.add(JCconsistencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, 100, 40));

        Jolor.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        Jolor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FECAL", "FETIDO" }));
        Jolor.setBorder(javax.swing.BorderFactory.createTitledBorder("Olor"));
        JpanelCopro.add(Jolor, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, 100, 40));

        JCrestos.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCrestos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AUSENTE", "PRESENTE" }));
        JCrestos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Res. Alimenticie", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        JpanelCopro.add(JCrestos, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, 90, 40));

        JCsangre1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        JCsangre1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEGATIVO", "POSITIVO" }));
        JCsangre1.setBorder(javax.swing.BorderFactory.createTitledBorder("Sangre"));
        JpanelCopro.add(JCsangre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, 90, 40));

        JtextMicroscopio.setColumns(20);
        JtextMicroscopio.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
        JtextMicroscopio.setLineWrap(true);
        JtextMicroscopio.setRows(5);
        JtextMicroscopio.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Examen Microscopio"));
        JtextMicroscopio.setMargin(new java.awt.Insets(1, 1, 1, 1));
        JtextMicroscopio.setMinimumSize(new java.awt.Dimension(0, 0));
        JtextMicroscopio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                JtextMicroscopioKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(JtextMicroscopio);

        JpanelCopro.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 660, 70));

        jPanel6.add(JpanelCopro, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 280, 690, 210));

        jTabbedPane2.addTab("Coproanálisis & Uroanálisis", jPanel6);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));
        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hematología"), "REFERENCIAS QUIMICA SANGUINEA"));
        jPanel16.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTCALCIO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Calcio"));
        TXTCALCIO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCALCIO1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTCALCIO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 150, 110, 40));

        TXTHDL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "H.D.L colesterol"));
        TXTHDL1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTHDL1ActionPerformed(evt);
            }
        });
        TXTHDL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTHDL1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTHDL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 110, 40));

        TXTRIGLICERIDOS1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Trigliceridos"));
        TXTRIGLICERIDOS1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRIGLICERIDOS1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTRIGLICERIDOS1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 110, 40));

        TXTCOLESTEROL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Colesterol"));
        TXTCOLESTEROL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCOLESTEROL1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTCOLESTEROL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 110, 40));

        TXTACIDOURICO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Ácido Urico"));
        TXTACIDOURICO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTACIDOURICO1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTACIDOURICO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 110, 40));

        TXTCREATININA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Creatinina"));
        TXTCREATININA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTCREATININA1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTCREATININA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 110, 40));

        TXTUREA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Urea"));
        TXTUREA1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTUREA1ActionPerformed(evt);
            }
        });
        TXTUREA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTUREA1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTUREA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 110, 40));

        TXTGLICEMIA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Glicemia"));
        TXTGLICEMIA1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTGLICEMIA1ActionPerformed(evt);
            }
        });
        TXTGLICEMIA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTGLICEMIA1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTGLICEMIA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 110, 40));

        TXTLDL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "L.D.L colesterol"));
        TXTLDL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLDL1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTLDL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 110, 40));

        TXTFOSFATA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fosfata Alcalina"));
        TXTFOSFATA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTFOSFATA1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTFOSFATA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 190, 110, 40));

        TXTRELACION1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Rel. ALB/GLOB"));
        TXTRELACION1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRELACION1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTRELACION1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, 110, 40));

        TXTGLOBULINAS1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Globulinas"));
        TXTGLOBULINAS1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTGLOBULINAS1ActionPerformed(evt);
            }
        });
        TXTGLOBULINAS1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTGLOBULINAS1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTGLOBULINAS1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 310, 110, 40));

        TXTALBUMINA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Albumina"));
        TXTALBUMINA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTALBUMINA1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTALBUMINA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, 110, 40));

        TXTPROTEINAS1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Proteinas Totales"));
        TXTPROTEINAS1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPROTEINAS1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTPROTEINAS1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 230, 110, 40));

        TXTBILIINDIRECTA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Indirecta"));
        TXTBILIINDIRECTA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILIINDIRECTA1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTBILIINDIRECTA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 110, 40));

        TXTBILIDIRECTA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Directa"));
        TXTBILIDIRECTA1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTBILIDIRECTA1ActionPerformed(evt);
            }
        });
        TXTBILIDIRECTA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILIDIRECTA1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTBILIDIRECTA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, 110, 40));

        TXTBILITOTAL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Bilirrubina Total"));
        TXTBILITOTAL1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTBILITOTAL1ActionPerformed(evt);
            }
        });
        TXTBILITOTAL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTBILITOTAL1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTBILITOTAL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 110, 40));

        TXTVLDL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "V.L.D.L colesterol"));
        TXTVLDL1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTVLDL1ActionPerformed(evt);
            }
        });
        TXTVLDL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTVLDL1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTVLDL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 110, 40));

        TXTTGO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T.G.O"));
        TXTTGO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTTGO1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTTGO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 70, 110, 40));

        TXTTGP1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "T.G.P"));
        TXTTGP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTTGP1ActionPerformed(evt);
            }
        });
        TXTTGP1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTTGP1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTTGP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 110, 110, 40));

        TXTPANDRIAL1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Glicemia"));
        TXTPANDRIAL1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPANDRIAL1ActionPerformed(evt);
            }
        });
        TXTPANDRIAL1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPANDRIAL1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTPANDRIAL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 110, 40));

        TXTFOSFORO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fosforo"));
        TXTFOSFORO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTFOSFORO1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTFOSFORO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 230, 110, 40));

        TXTMAGNESIO1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Magnesio"));
        TXTMAGNESIO1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTMAGNESIO1KeyTyped(evt);
            }
        });
        jPanel16.add(TXTMAGNESIO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 270, 110, 40));

        jButton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/modificar.png"))); // NOI18N
        jButton21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton21.setBorderPainted(false);
        jButton21.setContentAreaFilled(false);
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        jPanel16.add(jButton21, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 420, 110, 30));

        jPanel7.add(jPanel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 400, 470));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hematología"), "REFERENCIAS HEMATOLOGÍA"));
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TxtPlaquetas1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Plaquetas"));
        TxtPlaquetas1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtPlaquetas1KeyTyped(evt);
            }
        });
        jPanel8.add(TxtPlaquetas1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 230, 40));

        TXtCHCM1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "CHCM"));
        TXtCHCM1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXtCHCM1ActionPerformed(evt);
            }
        });
        TXtCHCM1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXtCHCM1KeyTyped(evt);
            }
        });
        jPanel8.add(TXtCHCM1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, 110, 40));

        TxtVCM1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "VCM"));
        TxtVCM1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtVCM1KeyTyped(evt);
            }
        });
        jPanel8.add(TxtVCM1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 110, 40));

        TxtHematocrito1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hematocrito"));
        TxtHematocrito1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtHematocrito1KeyTyped(evt);
            }
        });
        jPanel8.add(TxtHematocrito1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 110, 40));

        TxtHemoglobina1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hemoglobina"));
        TxtHemoglobina1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtHemoglobina1KeyTyped(evt);
            }
        });
        jPanel8.add(TxtHemoglobina1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 150, 110, 40));

        TxtNeutrofilos1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Neutrofilos"));
        TxtNeutrofilos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtNeutrofilos1ActionPerformed(evt);
            }
        });
        TxtNeutrofilos1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtNeutrofilos1KeyTyped(evt);
            }
        });
        jPanel8.add(TxtNeutrofilos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 110, 40));

        TxtLinfocitos1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Linfocitos"));
        TxtLinfocitos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtLinfocitos1ActionPerformed(evt);
            }
        });
        TxtLinfocitos1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtLinfocitos1KeyTyped(evt);
            }
        });
        jPanel8.add(TxtLinfocitos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 110, 40));

        TxtLeucocitos1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Leucocitos"));
        TxtLeucocitos1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtLeucocitos1KeyTyped(evt);
            }
        });
        jPanel8.add(TxtLeucocitos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 110, 40));

        TxtEosinofilos1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Eosinofilos"));
        TxtEosinofilos1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtEosinofilos1FocusLost(evt);
            }
        });
        TxtEosinofilos1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtEosinofilos1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtEosinofilos1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtEosinofilos1KeyTyped(evt);
            }
        });
        jPanel8.add(TxtEosinofilos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 110, 40));

        TxtMonocitos1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Monocitos"));
        TxtMonocitos1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtMonocitos1FocusLost(evt);
            }
        });
        TxtMonocitos1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtMonocitos1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtMonocitos1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtMonocitos1KeyTyped(evt);
            }
        });
        jPanel8.add(TxtMonocitos1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 110, 40));

        TxtBasofilo1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Basofilo"));
        TxtBasofilo1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TxtBasofilo1FocusLost(evt);
            }
        });
        TxtBasofilo1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TxtBasofilo1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtBasofilo1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtBasofilo1KeyTyped(evt);
            }
        });
        jPanel8.add(TxtBasofilo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 110, 40));

        jPanel7.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 260, 300));

        jPanel17.setBackground(new java.awt.Color(255, 255, 255));
        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hematología"), "REFERENCIAS ENZIMATICO"));
        jPanel17.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTLDH1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia LDH"));
        TXTLDH1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLDH1KeyTyped(evt);
            }
        });
        jPanel17.add(TXTLDH1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 110, 40));

        TXTHGGT1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Hombres GGT"));
        TXTHGGT1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTHGGT1ActionPerformed(evt);
            }
        });
        TXTHGGT1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTHGGT1KeyTyped(evt);
            }
        });
        jPanel17.add(TXTHGGT1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 110, 40));

        TXTMGGT1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Mujeres GGT"));
        TXTMGGT1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTMGGT1KeyTyped(evt);
            }
        });
        jPanel17.add(TXTMGGT1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 110, 40));

        TXTAMILASA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "AMILASA"));
        TXTAMILASA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTAMILASA1KeyTyped(evt);
            }
        });
        jPanel17.add(TXTAMILASA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 110, 40));

        TXTLIPASA1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "LIPASA"));
        TXTLIPASA1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTLIPASA1KeyTyped(evt);
            }
        });
        jPanel17.add(TXTLIPASA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 110, 40));

        jPanel7.add(jPanel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 260, 160));

        jTabbedPane2.addTab("Referencias", jPanel7);

        jPanel18.setBackground(new java.awt.Color(255, 255, 255));
        jPanel18.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel25.setBackground(new java.awt.Color(255, 255, 255));
        jPanel25.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "TIEMPOS DE COAGULACIÓN Y VELOCIDAD DE SEDIMENTACIÓN "));
        jPanel25.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TXTPROTROMBINA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Tiempo de Protrombina"));
        TXTPROTROMBINA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPROTROMBINAKeyTyped(evt);
            }
        });
        jPanel25.add(TXTPROTROMBINA, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, 220, 40));

        TXTPARCIAL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Tiempo Parcial de Tromboplastina"));
        TXTPARCIAL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTPARCIALActionPerformed(evt);
            }
        });
        TXTPARCIAL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTPARCIALKeyTyped(evt);
            }
        });
        jPanel25.add(TXTPARCIAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 220, 40));

        TXTVSG.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "VSG"));
        TXTVSG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTVSGKeyTyped(evt);
            }
        });
        jPanel25.add(TXTVSG, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 300, 220, 40));

        TXTRPC.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia RPC"));
        TXTRPC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTRPCKeyTyped(evt);
            }
        });
        jPanel25.add(TXTRPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 60, 150, 40));

        TXTDPC.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia DPC"));
        TXTDPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTDPCActionPerformed(evt);
            }
        });
        TXTDPC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTDPCKeyTyped(evt);
            }
        });
        jPanel25.add(TXTDPC, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, 150, 40));

        TXTVRH.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia VRH"));
        TXTVRH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTVRHKeyTyped(evt);
            }
        });
        jPanel25.add(TXTVRH, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 270, 190, 40));

        TXTM.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia M"));
        TXTM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTMKeyTyped(evt);
            }
        });
        jPanel25.add(TXTM, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 310, 190, 40));

        TXTKIDS.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Referencia Niños"));
        TXTKIDS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTKIDSKeyTyped(evt);
            }
        });
        jPanel25.add(TXTKIDS, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 350, 190, 40));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel25.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, 40, 470));

        jButton23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/modificar.png"))); // NOI18N
        jButton23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton23.setBorderPainted(false);
        jButton23.setContentAreaFilled(false);
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });
        jPanel25.add(jButton23, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 420, 110, 30));

        TXTUNID.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "RPC="));
        TXTUNID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTUNIDActionPerformed(evt);
            }
        });
        TXTUNID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTUNIDKeyTyped(evt);
            }
        });
        jPanel25.add(TXTUNID, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 60, 90, 40));

        TXTUNID2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "DPC="));
        TXTUNID2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTUNID2ActionPerformed(evt);
            }
        });
        TXTUNID2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTUNID2KeyTyped(evt);
            }
        });
        jPanel25.add(TXTUNID2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 110, 90, 40));

        jLabel2.setText("Referencias Tiempos de Coagulación");
        jPanel25.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, -1, -1));

        JtextINR.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "INR"));
        jPanel25.add(JtextINR, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, 220, 40));

        JtextISIS.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "ISI"));
        jPanel25.add(JtextISIS, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, 220, 40));

        jPanel18.add(jPanel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 660, 480));

        jTabbedPane2.addTab("Coagulacion", jPanel18);

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));
        jPanel14.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JCPruebasangre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "NEGATIVA", "POSITIVA" }));
        JCPruebasangre.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Prueba de Embarazo en la Sangre"));
        jPanel14.add(JCPruebasangre, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 260, 50));

        TXTrematoideo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Factor Reumatoideo"));
        TXTrematoideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTrematoideoActionPerformed(evt);
            }
        });
        TXTrematoideo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTrematoideoKeyTyped(evt);
            }
        });
        jPanel14.add(TXTrematoideo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 260, 50));

        TXTREACTIVA.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Nombre"), "Proteina C Reactiva"));
        TXTREACTIVA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTREACTIVAActionPerformed(evt);
            }
        });
        TXTREACTIVA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTREACTIVAKeyTyped(evt);
            }
        });
        jPanel14.add(TXTREACTIVA, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 90, 260, 50));

        TXTASTRO.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "Asto (Titulo Antiestreptolisina)"));
        TXTASTRO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXTASTROActionPerformed(evt);
            }
        });
        TXTASTRO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXTASTROKeyTyped(evt);
            }
        });
        jPanel14.add(TXTASTRO, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 150, 260, 50));

        TxtObservacion.setColumns(20);
        TxtObservacion.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        TxtObservacion.setRows(5);
        TxtObservacion.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Observaciones"));
        TxtObservacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtObservacionKeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(TxtObservacion);

        jPanel14.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 530, 110));

        TXTHLV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "NO REACTIVO", "REACTIVO" }));
        TXTHLV.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))), "V.I.H"));
        jPanel14.add(TXTHLV, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 260, 50));

        TXTVDRL.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "NO REACTIVO", "REACTIVO", "REACTIVO DÉBIL", "REACTIVO 2 DILS", "REACTIVO 4 DILS", "REACTIVO 8 DILS", "REACTIVO 16 DILS", "REACTIVO 32 DILS", "REACTIVO 64 DILS", "REACTIVO 128 DILS", "REACTIVO 256 DILS", "REACTIVO 1024 DILS" }));
        TXTVDRL.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "V.D.R.L")));
        jPanel14.add(TXTVDRL, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, 260, 50));

        jTabbedPane2.addTab("Serología", jPanel14);

        jPanel9.add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 50, 700, 550));

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JradioPerfil.setBackground(new java.awt.Color(255, 255, 255));
        JradioPerfil.setText("Ver rutina");
        JradioPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JradioPerfilActionPerformed(evt);
            }
        });
        jPanel12.add(JradioPerfil, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        Jradioreferencias.setBackground(new java.awt.Color(255, 255, 255));
        Jradioreferencias.setText("Ver Referencias ");
        Jradioreferencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JradioreferenciasActionPerformed(evt);
            }
        });
        jPanel12.add(Jradioreferencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, -1, -1));

        JradioUroanalisis.setBackground(new java.awt.Color(255, 255, 255));
        JradioUroanalisis.setText("Uroanálisis & Coproanálisis");
        JradioUroanalisis.setEnabled(false);
        JradioUroanalisis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JradioUroanalisisActionPerformed(evt);
            }
        });
        jPanel12.add(JradioUroanalisis, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, -1, -1));

        JradioPtt.setBackground(new java.awt.Color(255, 255, 255));
        JradioPtt.setText(" PPT");
        JradioPtt.setEnabled(false);
        JradioPtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JradioPttActionPerformed(evt);
            }
        });
        jPanel12.add(JradioPtt, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, -1, -1));

        JradioSero.setBackground(new java.awt.Color(255, 255, 255));
        JradioSero.setText("SEROLOGÍA");
        JradioSero.setEnabled(false);
        JradioSero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JradioSeroActionPerformed(evt);
            }
        });
        jPanel12.add(JradioSero, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, -1, -1));

        jPanel9.add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 700, 40));

        getContentPane().add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1050, 630));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    
    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton34ActionPerformed
        valorTotal=0;
        
        
        if(!TxtEosinofilos.getText().equals("") && !TxtMonocitos.getText().equals("") && !TxtBasofilo.getText().equals("")){
           calcularValores();
        }
        
                   if (TXTPapellido.getText().equals("") 
                   || TXTPnombre.getText().equals("")
                   || TXTPcedula.getText().equals("") 
                   || TXTPcorreo.getText().equals("") 
                   || TXTPtelefono.getText().equals("") 
                   || TXTPdireccion.getText().equals("")

                   
                   )
           
           {
               
            JOptionPane.showMessageDialog(null, "ASIGNE UN PACIENTE, Y VERIFIQUE CAMPOS; ESTUDIOS OBLIGATORIOS *HEMATOLOGIA *QUIMICA SANGUINEA", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);
          }
        
             
            else if (valorTotal>100){
           
            JOptionPane.showMessageDialog(null, "LA SUMA DE LOS VALORES NEUTROFILOS, LINFOCITOS, EOSINOFILOS, MONOCITOS, BASOFILO: DA UN NUMERO MAYOR A 100, VALOR RECIBIDO: "+valorTotal, "VALIDACION", JOptionPane.ERROR_MESSAGE);

           
           }
                   
           
           
                   else if (
                           
               TXTGLICEMIA.getText().equals("") &&
               TXTPANDRIAL.getText().equals("") &&
               TXTUREA.getText().equals("") &&
               TXTCREATININA.getText().equals("") &&
               TXTACIDOURICO.getText().equals("") &&
               TXTCOLESTEROL.getText().equals("") &&
               TXTRIGLICERIDOS.getText().equals("") &&
               TXTHDL.getText().equals("") &&
                           
               TXTLDL.getText().equals("") &&
               TXTVLDL.getText().equals("") &&
               TXTBILITOTAL.getText().equals("") &&
               TXTBILIDIRECTA.getText().equals("") &&
               TXTBILIINDIRECTA.getText().equals("") &&
               TXTPROTEINAS.getText().equals("") &&
               TXTALBUMINA.getText().equals("") &&
               TXTMAGNESIO.getText().equals("") &&
                                   
               TXTRELACION.getText().equals("") &&
               TXTTGO.getText().equals("") &&
               TXTTGP.getText().equals("") &&
               TXTCALCIO.getText().equals("") &&
               TXTFOSFATA.getText().equals("") &&           
               TXTFOSFORO.getText().equals("") && 
               TXTGLOBULINAS.getText().equals("") &&
                           
               TxtLeucocitos.getText().equals("")&&
               TxtNeutrofilos.getText().equals("")&&
               TxtHematocrito.getText().equals("")&&
               TXtCHCM.getText().equals("")&&
               TxtLinfocitos.getText().equals("")&&
               TxtHemoglobina.getText().equals("")&&
               TxtVCM.getText().equals("")&&
               TxtPlaquetas.getText().equals("")){
                   
                   
                JOptionPane.showMessageDialog(null, "ASIGNE UN PACIENTE, Y VERIFIQUE CAMPOS; ESTUDIOS OBLIGATORIOS *HEMATOLOGIA *QUIMICA SANGUINEA", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);
                   
                   
                   } 
           
           
       else{  
   
          
            //--------------------------------------- ACTUALIZAR  
     
            String nivelUsuario=MP.getNivel(); 
            String especialidad= MP.getEspecialidad();
            if(especialidad.equals("Bioanalista")&& !estadoEstudio.equals("") || 
            nivelUsuario.equals("Administrador") && !estadoEstudio.equals("")){
            labDao.ConsultarFirma();    
            Maxid=idCallestudios;
            pdf();  
       
                   labDao.actualizarHematologia(
                       Maxid, 
                       TxtLeucocitos.getText(), 
                       TxtLinfocitos.getText(),
                       TxtNeutrofilos.getText(), 
                       TxtHemoglobina.getText(), 
                       TxtHematocrito.getText(), 
                       TxtVCM.getText(), 
                       TXtCHCM.getText(), 
                       TxtPlaquetas.getText(),
                       TxtEosinofilos.getText(),
                       TxtMonocitos.getText(),
                       TxtBasofilo.getText(),
                       ""
              ); 
            
                       labDao.actualizarQuimicaP(
                       Maxid, 
                       TXTGLICEMIA.getText(), 
                       TXTUREA.getText(),
                       TXTCREATININA.getText(), 
                       TXTACIDOURICO.getText(), 
                       TXTCOLESTEROL.getText(), 
                       TXTRIGLICERIDOS.getText(), 
                       TXTHDL.getText(), 
                       TXTLDL.getText(),
                       TXTVLDL.getText(), 
                       TXTBILITOTAL.getText(),
                       TXTBILIDIRECTA.getText(), 
                       TXTBILIINDIRECTA.getText(), 
                       TXTPROTEINAS.getText(), 
                       TXTALBUMINA.getText(), 
                       TXTGLOBULINAS.getText(), 
                       TXTRELACION.getText(),
                       TXTTGO.getText(), 
                       TXTTGP.getText(), 
                       TXTFOSFATA.getText(),
                       TXTCALCIO.getText(),
                       TXTPANDRIAL.getText(),
                       TXTFOSFORO.getText(),
                       TXTMAGNESIO.getText()

               );
                       
                       
                       
                       
                       labDao.actualizarUro(
                       Maxid, 
                       JCcolor1.getSelectedItem().toString(), 
                       TxtOlor1.getText(),
                       TxtDensidad.getText(), 
                       JCaspecto.getSelectedItem().toString(), 
                       JCph.getSelectedItem().toString(), 
                       JCglucosa1.getSelectedItem().toString(), 
                       JCproteinas.getSelectedItem().toString(), 
                       JChemoglobina.getSelectedItem().toString(), 
                       JCnitridos.getSelectedItem().toString(), 
                       JCcuerposCe.getSelectedItem().toString(), 
                       JCurobilinogeno1.getSelectedItem().toString(), 
                       JCpigmentos.getSelectedItem().toString(), 
                       JCbilirrubina.getSelectedItem().toString(), 
                       TxtLeucositos.getText(),
                       JCbacterias.getSelectedItem().toString(), 
                       JCEP.getSelectedItem().toString(), 
                       TxtHematies.getText(),
                       TxtCelulasredondas.getText(),
                       TxtFilamentos.getSelectedItem().toString(),
                       Txtcilindros.getText(),
                       Txtcristales.getText(),
                       TXTfungicas.getText()
                       
                       
              ); 
            
            
                 labDao.actualizarCopro(
                       Maxid, 
                       JCcolor4.getSelectedItem().toString(), 
                       JCAspect.getSelectedItem().toString(), 
                       JCconsistencia.getSelectedItem().toString(), 
                       JCreaccion1.getSelectedItem().toString(), 
                       JCmoco.getSelectedItem().toString(), 
                       Jolor.getSelectedItem().toString(), 
                       JCsangre1.getSelectedItem().toString(), 
                       JCrestos.getSelectedItem().toString(), 
                       JtextMicroscopio.getText()
                       
                       
              ); 
            
                 
                 
                   labDao.actualizarPTT(
                       Maxid, 
                       TXTPROTROMBINA.getText(), 
                       TXTPARCIAL.getText(),
                       TXTVSG.getText(),
                       JtextISIS.getText(),
                       JtextINR.getText()
               
              ); 
                 
            
                   labDao.ActualizarVIH20(
                       Maxid, 
                       TXTHLV.getSelectedItem().toString(), 
                       TXTVDRL.getSelectedItem().toString()
              ); 
            
                   
                         labDao.actualizarEnzimatico(
                       Maxid, 
                       TXTLDH.getText(), 
                       TXTGGT.getText(),
                       TXTAMILASA.getText(), 
                       TXTLIPASA.getText() 
              ); 
            
                   labDao.actualizarPCR(Maxid, TXTPCR.getText()); 
                   
                   
                       labDao.actualizarSerologia(
                       Maxid, 
                       TXTVDRL.getSelectedItem().toString(), 
                       JCPruebasangre.getSelectedItem().toString(),
                       TXTrematoideo.getText(), 
                       TXTREACTIVA.getText(), 
                       TXTASTRO.getText(),
                       TxtObservacion.getText()
                    
              ); 
                   
                       labDao.actualizarGrupo(
                       Maxid, 
                       TXTSANGUINEO.getText(), 
                       TXTRH.getText(),
                       ""
              ); 

            
            updateReporte(); 
            cancelarexamen();
            
            String Fecha = new SimpleDateFormat("yyyy/MM/dd").format(Menu.FechaAdmin.getDate());
            String accion = "HORA: "+ Menu.Time.getText()+" Corrigió el examen N° "+Maxid+" de: " +TXTPnombre.getText() +" "+ TXTPapellido.getText();
            audit.corregirEstudio(
                    idusuario, 
                    accion,
                    Fecha 
                    );
            
            backtoConsulta();
            }
            
            
            
            
            
           
    //--------------------------------------- AGREGAR    
            
            
               else{
               labDao.ConsultarFirma(); 
               MaxIdestudios(); 
               
               
               
               
               
                labDao.agregarHematologia(
                       Maxid, 
                       TxtLeucocitos.getText(), 
                       TxtLinfocitos.getText(),
                       TxtNeutrofilos.getText(), 
                       TxtHemoglobina.getText(), 
                       TxtHematocrito.getText(), 
                       TxtVCM.getText(), 
                       TXtCHCM.getText(), 
                       TxtPlaquetas.getText(),
                       TxtEosinofilos.getText(),
                       TxtMonocitos.getText(),
                       TxtBasofilo.getText(),
                       ""
               );    
                  
               
               
               
                   labDao.agregarQuimicaP(
                       Maxid, 
                       TXTGLICEMIA.getText(), 
                       TXTUREA.getText(),
                       TXTCREATININA.getText(), 
                       TXTACIDOURICO.getText(), 
                       TXTCOLESTEROL.getText(), 
                       TXTRIGLICERIDOS.getText(), 
                       TXTHDL.getText(), 
                       TXTLDL.getText(),
                       TXTVLDL.getText(), 
                       TXTBILITOTAL.getText(),
                       TXTBILIDIRECTA.getText(), 
                       TXTBILIINDIRECTA.getText(), 
                       TXTPROTEINAS.getText(), 
                       TXTALBUMINA.getText(), 
                       TXTGLOBULINAS.getText(), 
                       TXTRELACION.getText(),
                       TXTTGO.getText(), 
                       TXTTGP.getText(), 
                       TXTFOSFATA.getText(),
                       TXTCALCIO.getText(),
                       TXTPANDRIAL.getText(),
                       TXTFOSFORO.getText(),
                       TXTMAGNESIO.getText()
                       

               );    
               
                   
                   labDao.agregarUro(
                       Maxid, 
                       JCcolor1.getSelectedItem().toString(), 
                       TxtOlor1.getText(),
                       TxtDensidad.getText(), 
                       JCaspecto.getSelectedItem().toString(), 
                       JCph.getSelectedItem().toString(), 
                       JCglucosa1.getSelectedItem().toString(), 
                       JCproteinas.getSelectedItem().toString(), 
                       JChemoglobina.getSelectedItem().toString(), 
                       JCnitridos.getSelectedItem().toString(), 
                       JCcuerposCe.getSelectedItem().toString(), 
                       JCurobilinogeno1.getSelectedItem().toString(), 
                       JCpigmentos.getSelectedItem().toString(), 
                       JCbilirrubina.getSelectedItem().toString(), 
                       TxtLeucositos.getText(),
                       JCbacterias.getSelectedItem().toString(), 
                       JCEP.getSelectedItem().toString(), 
                       TxtHematies.getText(),
                       TxtCelulasredondas.getText(),
                       TxtFilamentos.getSelectedItem().toString(),
                       Txtcilindros.getText(),
                       Txtcristales.getText(),
                       TXTfungicas.getText()
               );    
               
                   
                     labDao.agregarCopro(
                       Maxid, 
                       JCcolor4.getSelectedItem().toString(), 
                       JCAspect.getSelectedItem().toString(), 
                       JCconsistencia.getSelectedItem().toString(), 
                       JCreaccion1.getSelectedItem().toString(), 
                       JCmoco.getSelectedItem().toString(), 
                       Jolor.getSelectedItem().toString(), 
                       JCsangre1.getSelectedItem().toString(), 
                       JCrestos.getSelectedItem().toString(), 
                       JtextMicroscopio.getText()
               );    
                   
               
                 labDao.agregarPTT(
                       Maxid, 
                       TXTPROTROMBINA.getText(), 
                       TXTPARCIAL.getText(),
                       TXTVSG.getText(),
                       JtextISIS.getText(),
                       JtextINR.getText()
                 
               );    
               
                 
                      labDao.AgregarVIH20(
                       Maxid, 
                       TXTHLV.getSelectedItem().toString(), 
                       TXTVDRL.getSelectedItem().toString()
              ); 
            
                 
                      labDao.agregarEnzimatico(
                       Maxid, 
                       TXTLDH.getText(), 
                       TXTGGT.getText(),
                       TXTAMILASA.getText(), 
                       TXTLIPASA.getText() 

               );    
                
                      
                      labDao.agregarPCR(Maxid, TXTPCR.getText());
                      
                      
                       labDao.agregarSerologia(
                       Maxid, 
                       TXTVDRL.getSelectedItem().toString(), 
                       JCPruebasangre.getSelectedItem().toString(),
                       TXTrematoideo.getText(), 
                       TXTREACTIVA.getText(), 
                       TXTASTRO.getText(),
                       TxtObservacion.getText()
                       
               );  

                       labDao.agregarGrupo(
                       Maxid, 
                       TXTSANGUINEO.getText(), 
                       TXTRH.getText(),
                       ""
       
               ); 
                      
                      
               pdf();  
               guardarReporte();  
               cancelarexamen();
  
             
               JOptionPane.showMessageDialog(null, "GENERANDO REPORTE...","ESTUDIO",1);
               }        

           
           
           
           }
        
        
        
   
    }//GEN-LAST:event_jButton34ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed

        
                if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea cancelar los resultados?",
            "Cancelar", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
            cancelarexamen(); CallReferencia();           }
                
                else{}
                
    }//GEN-LAST:event_jButton20ActionPerformed

    private void BtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSearchActionPerformed
      
    procesarPaciente();

    }//GEN-LAST:event_BtnSearchActionPerformed

    private void BtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarActionPerformed

        Connection con;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps;
        ResultSet rs;

        Pattern pattern = Pattern.compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" + "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
        String Correo = TXTPcorreo.getText();
        Matcher mather = pattern.matcher(Correo);

        if (TXTPapellido.getText().equals("") || TXTPnombre.getText().equals("") || FechaNacimiento.getDate()==null
            || TXTPcedula.getText().equals("") || TXTPcorreo.getText().equals("") || TXTPtelefono.getText().equals("") || TXTPdireccion.getText().equals("")) {

            JOptionPane.showMessageDialog(null, "TODOS LOS CAMPOS SON OBLIGATORIOS", "LLENADO DE CAMPOS", JOptionPane.INFORMATION_MESSAGE);

        } else if (mather.find() == false) {
            JOptionPane.showMessageDialog(null, "EMAIL INVALIDO, VERIFIQUE", "EMAIL INVALIDO", JOptionPane.ERROR_MESSAGE);
            this.TXTPcorreo.requestFocus();
        }

        else {

            String sql="SELECT Idpaciente, Nombre, Apellido, Cedula, Telefono, Direccion FROM table_paciente  WHERE Cedula='"+ TXTPcedula.getText() +"'";

            try{
                con = cn.getConnection();
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery();
                if(rs.next()){JOptionPane.showMessageDialog(null, "EL PACIENTE YA SE ENCUENTRA", "DATO DUPLICADO",JOptionPane.ERROR_MESSAGE);}

                else{
                    AuditoriaAgregar();
                    AgregarPaciente();
                    Callpacient();
                    BtnAgregar.setEnabled(false);
                    //      TxtMotivo.setEnabled(true);

                }

            }catch(Exception e){System.out.println(e);}
        }
    }//GEN-LAST:event_BtnAgregarActionPerformed

    private void BtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelarActionPerformed
        limpiarCampos();
        DesactivarCampos();

        JPregistro.setVisible(false);
        TXTPcedula.setText("V-");
        BtnAgregar.setEnabled(true);
        BtnSearch.setEnabled(true);  
        TXTPcedula.setEnabled(true);
        BtnAgregar.setEnabled(false);
        
    }//GEN-LAST:event_BtnCancelarActionPerformed

    private void TXTPcedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPcedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPcedulaActionPerformed

    private void TXTPcedulaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyTyped
         char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='V' || car=='E'  || car=='-'|| car=='J'|| car =='H' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTPcedula.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==14)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='V' && car!='E' && car!='-' && car != 'J' && car!='H' || car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTPcedulaKeyTyped

    private void TXTPnombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPnombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPnombreActionPerformed

    private void TXTPnombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPnombreKeyTyped
          va.longitud(TXTPnombre.getText(), 30, evt);
    }//GEN-LAST:event_TXTPnombreKeyTyped

    private void TXTPapellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPapellidoKeyTyped
        va.longitud(TXTPapellido.getText(), 30, evt);
    }//GEN-LAST:event_TXTPapellidoKeyTyped

    private void TXTPcorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcorreoKeyTyped
         va.longitud(TXTPcorreo.getText(), 30, evt);
    }//GEN-LAST:event_TXTPcorreoKeyTyped

    private void TXTPdireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPdireccionKeyTyped
         va.longitud(TXTPdireccion .getText(), 80, evt);
    }//GEN-LAST:event_TXTPdireccionKeyTyped

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
    
            if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea actualizar los valores referenciales?",
            "Valores Referenciales", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
            AuditoriaModificar();   ActualizarReferencia(); CallReferencia(); }
                
                else{CallReferencia();}      
        
        
    }//GEN-LAST:event_jButton21ActionPerformed

    private void TXTPapellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPapellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPapellidoActionPerformed

    private void JcheckCoproActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JcheckCoproActionPerformed
        if (JcheckCopro.isSelected()==true)  { JradioUroanalisis.setEnabled(true);   } 
        else  if (JcheckCopro.isSelected()==false)  { JradioUroanalisis.setEnabled(false);   } 
       /* 
           if (JcheckCopro.isSelected()==false)  {  JpanelCopro.setVisible(false);}
           else if (JcheckCopro.isSelected()==true)  {JradioUroanalisis.setEnabled(true);  JpanelCopro.setVisible(true);}      
           else   if (JcheckCopro.isSelected()==true && JcheckCopro.isSelected()==true  )  
           
           {
               
           JradioUroanalisis.setEnabled(true); 
           JpanelUro.setVisible(true);
           JpanelCopro.setVisible(true);
           }  
              
            
        
              
      */        
              
              
    }//GEN-LAST:event_JcheckCoproActionPerformed

    private void JcheckUroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JcheckUroActionPerformed
     
          if (JcheckUro.isSelected()==true)  { JradioUroanalisis.setEnabled(true);  }    
          else  if (JcheckUro.isSelected()==false)  { JradioUroanalisis.setEnabled(false);   } 
        /*
         
           if (JcheckUro.isSelected()==false)  {  JpanelUro.setVisible(false);}
           else if (JcheckUro.isSelected()==true)  {JradioUroanalisis.setEnabled(true);  JpanelUro.setVisible(true);}      
           else   if (JcheckUro.isSelected()==true && JcheckCopro.isSelected()==true  )  
           
           {
               
           JradioUroanalisis.setEnabled(true); 
           JpanelUro.setVisible(true);
           JpanelCopro.setVisible(true);
           }  
              */
        
        
        
    }//GEN-LAST:event_JcheckUroActionPerformed

    private void TxtLeucocitos1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLeucocitos1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtLeucocitos1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtLeucocitos1KeyTyped

    private void TxtLinfocitos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtLinfocitos1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtLinfocitos1ActionPerformed

    private void TxtLinfocitos1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLinfocitos1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtLinfocitos1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==2)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtLinfocitos1KeyTyped

    private void TxtNeutrofilos1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtNeutrofilos1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtNeutrofilos1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==3)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtNeutrofilos1KeyTyped

    private void TxtHemoglobina1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHemoglobina1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtHemoglobina1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==3)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtHemoglobina1KeyTyped

    private void TxtHematocrito1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHematocrito1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtHematocrito1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==3)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtHematocrito1KeyTyped

    private void TxtVCM1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtVCM1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtVCM1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==3)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtVCM1KeyTyped

    private void TXtCHCM1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXtCHCM1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXtCHCM1ActionPerformed

    private void TXtCHCM1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXtCHCM1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXtCHCM1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==3)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXtCHCM1KeyTyped

    private void TxtPlaquetas1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtPlaquetas1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car=='-' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtPlaquetas1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==7)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='-'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtPlaquetas1KeyTyped

    private void TXTCALCIOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCALCIOKeyTyped
                                char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTCALCIO.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTCALCIOKeyTyped

    private void TXTHDLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTHDLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTHDLActionPerformed

    private void TXTHDLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTHDLKeyTyped
             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTHDL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTHDLKeyTyped

    private void TXTRIGLICERIDOSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRIGLICERIDOSKeyTyped
             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTRIGLICERIDOS.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTRIGLICERIDOSKeyTyped

    private void TXTCOLESTEROLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCOLESTEROLKeyTyped
                 char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTCOLESTEROL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTCOLESTEROLKeyTyped

    private void TXTACIDOURICOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTACIDOURICOKeyTyped
               char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTACIDOURICO.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTACIDOURICOKeyTyped

    private void TXTCREATININAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCREATININAKeyTyped
           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTCREATININA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTCREATININAKeyTyped

    private void TXTUREAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTUREAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTUREAActionPerformed

    private void TXTUREAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTUREAKeyTyped
           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTUREA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTUREAKeyTyped

    private void TXTGLICEMIAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLICEMIAKeyTyped
       char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTGLICEMIA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTGLICEMIAKeyTyped

    private void TXTLDLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDLKeyTyped
                   char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTLDL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTLDLKeyTyped

    private void TXTFOSFATAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFATAKeyTyped
                            char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTFOSFATA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTFOSFATAKeyTyped

    private void TXTRELACIONKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRELACIONKeyTyped
                 char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTRELACION.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTRELACIONKeyTyped

    private void TXTGLOBULINASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTGLOBULINASActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTGLOBULINASActionPerformed

    private void TXTGLOBULINASKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLOBULINASKeyTyped
             char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTGLOBULINAS.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTGLOBULINASKeyTyped

    private void TXTALBUMINAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTALBUMINAKeyTyped
           char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTALBUMINA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTALBUMINAKeyTyped

    private void TXTPROTEINASKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPROTEINASKeyTyped
      char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTPROTEINAS.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTPROTEINASKeyTyped

    private void TXTBILIINDIRECTAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIINDIRECTAKeyTyped
            char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTBILIINDIRECTA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTBILIINDIRECTAKeyTyped

    private void TXTBILIDIRECTAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIDIRECTAKeyTyped
                  char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTBILIDIRECTA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTBILIDIRECTAKeyTyped

    private void TXTBILITOTALActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTBILITOTALActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTBILITOTALActionPerformed

    private void TXTBILITOTALKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILITOTALKeyTyped
                  char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTBILITOTAL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTBILITOTALKeyTyped

    private void TXTVLDLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTVLDLKeyTyped
                      char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTVLDL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTVLDLKeyTyped

    private void TXTTGOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGOKeyTyped
                    char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTTGO.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTTGOKeyTyped

    private void TXTTGPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTTGPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTTGPActionPerformed

    private void TXTTGPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGPKeyTyped
                         char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTTGP.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTTGPKeyTyped

    private void TxtNeutrofilos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtNeutrofilos1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtNeutrofilos1ActionPerformed

    private void TXTCALCIO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCALCIO1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTCALCIO1KeyTyped

    private void TXTHDL1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTHDL1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTHDL1ActionPerformed

    private void TXTHDL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTHDL1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTHDL1KeyTyped

    private void TXTRIGLICERIDOS1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRIGLICERIDOS1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTRIGLICERIDOS1KeyTyped

    private void TXTCOLESTEROL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCOLESTEROL1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTCOLESTEROL1KeyTyped

    private void TXTACIDOURICO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTACIDOURICO1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTACIDOURICO1KeyTyped

    private void TXTCREATININA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCREATININA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTCREATININA1KeyTyped

    private void TXTUREA1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTUREA1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTUREA1ActionPerformed

    private void TXTUREA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTUREA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTUREA1KeyTyped

    private void TXTGLICEMIA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLICEMIA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTGLICEMIA1KeyTyped

    private void TXTLDL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDL1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTLDL1KeyTyped

    private void TXTFOSFATA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFATA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTFOSFATA1KeyTyped

    private void TXTRELACION1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRELACION1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTRELACION1KeyTyped

    private void TXTGLOBULINAS1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTGLOBULINAS1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTGLOBULINAS1ActionPerformed

    private void TXTGLOBULINAS1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLOBULINAS1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTGLOBULINAS1KeyTyped

    private void TXTALBUMINA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTALBUMINA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTALBUMINA1KeyTyped

    private void TXTPROTEINAS1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPROTEINAS1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPROTEINAS1KeyTyped

    private void TXTBILIINDIRECTA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIINDIRECTA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTBILIINDIRECTA1KeyTyped

    private void TXTBILIDIRECTA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIDIRECTA1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTBILIDIRECTA1KeyTyped

    private void TXTBILITOTAL1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTBILITOTAL1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTBILITOTAL1ActionPerformed

    private void TXTBILITOTAL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILITOTAL1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTBILITOTAL1KeyTyped

    private void TXTVLDL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTVLDL1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTVLDL1KeyTyped

    private void TXTTGO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGO1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTTGO1KeyTyped

    private void TXTTGP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTTGP1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTTGP1ActionPerformed

    private void TXTTGP1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGP1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTTGP1KeyTyped

    private void JCglucosa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCglucosa1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JCglucosa1ActionPerformed

    private void JCnitridosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCnitridosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JCnitridosActionPerformed

    private void TxtOlor1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtOlor1KeyTyped
        va.longitud(TxtOlor1 .getText(), 30, evt);
    }//GEN-LAST:event_TxtOlor1KeyTyped

    private void TxtDensidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtDensidadKeyTyped
        va.longitud(TxtDensidad .getText(), 80, evt);
    }//GEN-LAST:event_TxtDensidadKeyTyped

    private void JCaspectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCaspectoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JCaspectoActionPerformed

    private void TxtLeucositosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtLeucositosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtLeucositosActionPerformed

    private void TxtLeucositosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLeucositosKeyTyped
       
    }//GEN-LAST:event_TxtLeucositosKeyTyped

    private void JCAspectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCAspectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JCAspectActionPerformed

    private void JradioreferenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JradioreferenciasActionPerformed
      jTabbedPane2.setSelectedIndex(2);
    this.Jradioreferencias.setSelected(true);
    JradioUroanalisis.setSelected(false);
    JradioPerfil.setSelected(false);
    JradioPtt.setSelected(false);
     JradioSero.setSelected(false);
     
    }//GEN-LAST:event_JradioreferenciasActionPerformed

    private void JradioPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JradioPerfilActionPerformed
        jTabbedPane2.setSelectedIndex(0);
        
        this.JradioPerfil.setSelected(true);
        JradioUroanalisis.setSelected(false);
        Jradioreferencias.setSelected(false);
        JradioPtt.setSelected(false);
        JradioSero.setSelected(false);
    }//GEN-LAST:event_JradioPerfilActionPerformed

    private void JradioUroanalisisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JradioUroanalisisActionPerformed
     jTabbedPane2.setSelectedIndex(1);
     this.JradioUroanalisis.setSelected(true);
     JradioPerfil.setSelected(false);
     Jradioreferencias.setSelected(false);
     JradioPtt.setSelected(false);
      JradioSero.setSelected(false);
 
    }//GEN-LAST:event_JradioUroanalisisActionPerformed

    private void TxtPlaquetasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtPlaquetasKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car=='-' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtPlaquetas.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==7)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='-'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtPlaquetasKeyTyped

    private void TXtCHCMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXtCHCMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXtCHCMActionPerformed

    private void TXtCHCMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXtCHCMKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXtCHCM.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==7)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXtCHCMKeyTyped

    private void TxtVCMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtVCMKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtVCM.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==7)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtVCMKeyTyped

    private void TxtHematocritoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHematocritoKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtHematocrito.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==7)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtHematocritoKeyTyped

    private void TxtHemoglobinaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHemoglobinaKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtHemoglobina.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtHemoglobinaKeyTyped

    private void TxtNeutrofilosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtNeutrofilosKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtNeutrofilos.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtNeutrofilosKeyTyped

    private void TxtLinfocitosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtLinfocitosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtLinfocitosActionPerformed

    private void TxtLinfocitosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLinfocitosKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtLinfocitos.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtLinfocitosKeyTyped

    private void TxtLeucocitosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLeucocitosKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtLeucocitos.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==8)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtLeucocitosKeyTyped

    private void TXTBILIDIRECTA1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTBILIDIRECTA1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTBILIDIRECTA1ActionPerformed

    private void TXTPtelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPtelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPtelefonoActionPerformed

    private void TxtHematiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtHematiesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtHematiesActionPerformed

    private void TxtHematiesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHematiesKeyTyped
        va.longitud(TxtHematies.getText(), 10, evt);
    }//GEN-LAST:event_TxtHematiesKeyTyped

    private void TxtCelulasredondasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtCelulasredondasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtCelulasredondasActionPerformed

    private void TxtCelulasredondasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtCelulasredondasKeyTyped
    
    }//GEN-LAST:event_TxtCelulasredondasKeyTyped

    private void TXTGLICEMIA1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTGLICEMIA1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTGLICEMIA1ActionPerformed

    private void TXTVLDL1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTVLDL1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTVLDL1ActionPerformed

    private void JtextMicroscopioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JtextMicroscopioKeyTyped
               va.longitud(JtextMicroscopio .getText(), 200, evt);
    }//GEN-LAST:event_JtextMicroscopioKeyTyped

    private void JRMasculinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRMasculinoActionPerformed
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
    }//GEN-LAST:event_JRMasculinoActionPerformed

    private void JRfemeninoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRfemeninoActionPerformed
      JRfemenino.setSelected(true);
      JRMasculino.setSelected(false);
      Sexo="Femenino";
    }//GEN-LAST:event_JRfemeninoActionPerformed

    private void TXTPROTROMBINAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPROTROMBINAKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTPROTROMBINA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTPROTROMBINAKeyTyped

    private void TXTPARCIALActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPARCIALActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPARCIALActionPerformed

    private void TXTPARCIALKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPARCIALKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTPARCIAL.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTPARCIALKeyTyped

    private void TXTVSGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTVSGKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTVSG.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTVSGKeyTyped

    private void TXTRPCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRPCKeyTyped
        va.longitud(TXTRPC.getText(), 10, evt);
    }//GEN-LAST:event_TXTRPCKeyTyped

    private void TXTDPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTDPCActionPerformed

    }//GEN-LAST:event_TXTDPCActionPerformed

    private void TXTDPCKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTDPCKeyTyped
        va.longitud(TXTDPC.getText(), 10, evt);
    }//GEN-LAST:event_TXTDPCKeyTyped

    private void TXTVRHKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTVRHKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car=='-' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTVRH.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='-'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTVRHKeyTyped

    private void TXTMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTMKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car=='-' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTM.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='-'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTMKeyTyped

    private void TXTKIDSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTKIDSKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car=='-' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTKIDS.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='-'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTKIDSKeyTyped

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed

        if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea actualizar los valores referenciales?",
            "Valores Referenciales", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
      AuditoriaModificar();   ActualizarReferenciaPPT(); CallReferencia(); }

        else{CallReferencia();}
    }//GEN-LAST:event_jButton23ActionPerformed

    private void TXTUNIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTUNIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTUNIDActionPerformed

    private void TXTUNIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTUNIDKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTUNIDKeyTyped

    private void TXTUNID2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTUNID2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTUNID2ActionPerformed

    private void TXTUNID2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTUNID2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTUNID2KeyTyped

    private void JradioPttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JradioPttActionPerformed
     jTabbedPane2.setSelectedIndex(3);
     this.JradioPtt.setSelected(true);
     JradioUroanalisis.setSelected(false);
     JradioPerfil.setSelected(false);
     Jradioreferencias.setSelected(false);
     JradioSero.setSelected(false);
    
    }//GEN-LAST:event_JradioPttActionPerformed

    private void JCheckpptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JCheckpptActionPerformed
              if (JCheckppt.isSelected()==true)  { JradioPtt.setEnabled(true);   } 
              else  if (JCheckppt.isSelected()==false)  { JradioPtt.setEnabled(false);   } 
    }//GEN-LAST:event_JCheckpptActionPerformed

    private void TXTPcedulaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPcedulaKeyPressed
                       if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
 
    procesarPaciente();


} 
    }//GEN-LAST:event_TXTPcedulaKeyPressed

    private void TXTPANDRIALKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPANDRIALKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPANDRIALKeyTyped

    private void TXTPANDRIAL1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPANDRIAL1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPANDRIAL1ActionPerformed

    private void TXTPANDRIAL1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPANDRIAL1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPANDRIAL1KeyTyped

    private void TXTFOSFOROKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFOROKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTFOSFOROKeyTyped

    private void TXTFOSFORO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFORO1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTFOSFORO1KeyTyped

    private void TXTLDH1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDH1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car=='-' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTLDH1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','&& car!='-'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTLDH1KeyTyped

    private void TXTHGGT1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTHGGT1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTHGGT1ActionPerformed

    private void TXTHGGT1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTHGGT1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car=='-' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTHGGT1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','&& car!='-'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTHGGT1KeyTyped

    private void TXTMGGT1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTMGGT1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car=='-' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTMGGT1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='-'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTMGGT1KeyTyped

    private void TXTAMILASA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTAMILASA1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car=='-' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTAMILASA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='-'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTAMILASA1KeyTyped

    private void TXTLIPASA1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLIPASA1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car=='-' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTLIPASA1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=',' && car!='-'|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTLIPASA1KeyTyped

    private void TXTLDHKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDHKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            TXTGGT.requestFocusInWindow();
        }
    }//GEN-LAST:event_TXTLDHKeyPressed

    private void TXTLDHKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDHKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTLDH.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTLDHKeyTyped

    private void TXTGGTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTGGTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTGGTActionPerformed

    private void TXTGGTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGGTKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            TXTAMILASA.requestFocusInWindow();
        }
    }//GEN-LAST:event_TXTGGTKeyPressed

    private void TXTGGTKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGGTKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTGGT.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTGGTKeyTyped

    private void TXTAMILASAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTAMILASAKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            TXTLIPASA.requestFocusInWindow();
        }
    }//GEN-LAST:event_TXTAMILASAKeyPressed

    private void TXTAMILASAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTAMILASAKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTAMILASA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTAMILASAKeyTyped

    private void TXTLIPASAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLIPASAKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTLIPASA.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTLIPASAKeyTyped

    private void JSerologiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JSerologiaActionPerformed
            if (JSerologia.isSelected()==true)  { JradioSero.setEnabled(true);   }
        else  if (JSerologia.isSelected()==false)  { JradioSero.setEnabled(false);   }
    }//GEN-LAST:event_JSerologiaActionPerformed

    private void JEnzimaticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JEnzimaticoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JEnzimaticoActionPerformed

    private void TxtcilindrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtcilindrosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtcilindrosActionPerformed

    private void TxtcilindrosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtcilindrosKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtcilindrosKeyTyped

    private void TxtcristalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtcristalesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtcristalesActionPerformed

    private void TxtcristalesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtcristalesKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtcristalesKeyTyped

    private void TXTSANGUINEOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTSANGUINEOActionPerformed
        va.Validarletras(TXTSANGUINEO);
    }//GEN-LAST:event_TXTSANGUINEOActionPerformed

    private void TXTSANGUINEOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTSANGUINEOKeyTyped
        va.longitud(TXTSANGUINEO.getText(), 30, evt);
    }//GEN-LAST:event_TXTSANGUINEOKeyTyped

    private void TXTRHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTRHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTRHActionPerformed

    private void TXTRHKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRHKeyTyped
        va.longitud(TXTRH.getText(), 30, evt);
    }//GEN-LAST:event_TXTRHKeyTyped

    private void JSanguineoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JSanguineoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JSanguineoActionPerformed

    private void TXTSANGUINEO1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTSANGUINEO1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTSANGUINEO1ActionPerformed

    private void TXTSANGUINEO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTSANGUINEO1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTSANGUINEO1KeyTyped

    private void TXTRH1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTRH1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTRH1ActionPerformed

    private void TXTRH1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRH1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTRH1KeyTyped

    private void TXTPCR1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTPCR1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPCR1ActionPerformed

    private void TXTPCR1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPCR1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTPCR1KeyTyped

    private void TXTSANGUINEO3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTSANGUINEO3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTSANGUINEO3ActionPerformed

    private void TXTSANGUINEO3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTSANGUINEO3KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTSANGUINEO3KeyTyped

    private void TXTRH3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTRH3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTRH3ActionPerformed

    private void TXTRH3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRH3KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTRH3KeyTyped

    private void TXTMAGNESIOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTMAGNESIOKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTMAGNESIO.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTMAGNESIOKeyTyped

    private void TXTMAGNESIO1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTMAGNESIO1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TXTMAGNESIO.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TXTMAGNESIO1KeyTyped

    private void JPcrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JPcrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JPcrActionPerformed

    private void JradioSeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JradioSeroActionPerformed
     jTabbedPane2.setSelectedIndex(4);
     this.JradioSero.setSelected(true);
     JradioPtt.setSelected(false);
     JradioUroanalisis.setSelected(false);
     JradioPerfil.setSelected(false);
     Jradioreferencias.setSelected(false);
    }//GEN-LAST:event_JradioSeroActionPerformed

    private void TXTrematoideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTrematoideoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTrematoideoActionPerformed

    private void TXTrematoideoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTrematoideoKeyTyped
        va.longitud(TXTrematoideo.getText(), 30, evt);
    }//GEN-LAST:event_TXTrematoideoKeyTyped

    private void TXTREACTIVAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTREACTIVAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTREACTIVAActionPerformed

    private void TXTREACTIVAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTREACTIVAKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTREACTIVAKeyTyped

    private void TXTASTROActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTASTROActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTASTROActionPerformed

    private void TXTASTROKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTASTROKeyTyped
        va.longitud(TXTASTRO.getText(), 30, evt);
    }//GEN-LAST:event_TXTASTROKeyTyped

    private void TxtObservacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtObservacionKeyTyped
        va.longitud(TXTASTRO.getText(), 70, evt);
    }//GEN-LAST:event_TxtObservacionKeyTyped

    private void TXTfungicasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXTfungicasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTfungicasActionPerformed

    private void TXTfungicasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTfungicasKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TXTfungicasKeyTyped

    JTextArea texto = new JTextArea(10, 30);
    String entradaTexto="";
    private void JObservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JObservaActionPerformed
        

if (JOptionPane.showConfirmDialog(null, texto, "Agrega una observación", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {

    entradaTexto = texto.getText();
    JObserva.setSelected(true);
}
else{

texto.setText("");
JObserva.setSelected(false);
}



    }//GEN-LAST:event_JObservaActionPerformed

    private void TxtLeucocitosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLeucocitosKeyReleased
         try {
        String text = TxtLeucocitos.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 4000 || valor > 10000) {
           Color lightRed = new Color(255, 192, 192);
            TxtLeucocitos.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtLeucocitos.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtLeucocitos.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TxtLeucocitosKeyReleased

    private void TxtLinfocitosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtLinfocitosKeyReleased
         try {
        String text = TxtLinfocitos.getText().replace(',', '.');
        double valor = Double.parseDouble(text);
        if (valor < 20 || valor > 40) {
           Color lightRed = new Color(255, 192, 192);
            TxtLinfocitos.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtLinfocitos.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtLinfocitos.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TxtLinfocitosKeyReleased

    private void TxtNeutrofilosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtNeutrofilosKeyReleased
     try {
       String text = TxtNeutrofilos.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 50 || valor > 70) {
           Color lightRed = new Color(255, 192, 192);
            TxtNeutrofilos.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtNeutrofilos.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtNeutrofilos.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TxtNeutrofilosKeyReleased

    private void TxtHemoglobinaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHemoglobinaKeyReleased
       try {
       String text = TxtHemoglobina.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 11 || valor > 16) {
           Color lightRed = new Color(255, 192, 192);
            TxtHemoglobina.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtHemoglobina.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtHemoglobina.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TxtHemoglobinaKeyReleased

    private void TxtHematocritoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtHematocritoKeyReleased
        try {
       String text = TxtHematocrito.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 37 || valor > 54) {
           Color lightRed = new Color(255, 192, 192);
            TxtHematocrito.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtHematocrito.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtHematocrito.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TxtHematocritoKeyReleased

    private void TxtVCMKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtVCMKeyReleased
         try {
       String text = TxtVCM.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 80 || valor > 100) {
           Color lightRed = new Color(255, 192, 192);
            TxtVCM.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtVCM.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtVCM.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TxtVCMKeyReleased

    private void TXtCHCMKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXtCHCMKeyReleased
          try {
       String text = TXtCHCM.getText().replace(',', '.');
       double valor = Double.parseDouble(text);
        if (valor < 31 || valor > 34) {
           Color lightRed = new Color(255, 192, 192);
            TXtCHCM.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXtCHCM.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXtCHCM.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXtCHCMKeyReleased

    private void TxtPlaquetasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtPlaquetasKeyReleased
       try {
       String text = TxtPlaquetas.getText().replace(',', '.');
       
       text = text.replaceAll("[.,]", "");
    
    // Reemplaza la coma decimal (',') por un punto ('.') como separador decimal.
       text = text.replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 150000 || valor > 450000) {
           Color lightRed = new Color(255, 192, 192);
            TxtPlaquetas.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TxtPlaquetas.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TxtPlaquetas.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TxtPlaquetasKeyReleased

    private void TXTGLICEMIAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLICEMIAKeyReleased
          
        try {
         String text = TXTGLICEMIA.getText().replace(',', '.');
      
    
  
       double valor = Double.parseDouble(text);
        if (valor < 60 || valor > 110) {
           Color lightRed = new Color(255, 192, 192);
            TXTGLICEMIA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTGLICEMIA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTGLICEMIA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTGLICEMIAKeyReleased

    private void TXTPANDRIALKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPANDRIALKeyReleased
            try {
      String text = TXTPANDRIAL.getText().replace(',', '.');
       
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 125) {
           Color lightRed = new Color(255, 192, 192);
            TXTPANDRIAL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTPANDRIAL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTPANDRIAL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTPANDRIALKeyReleased

    private void TXTUREAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTUREAKeyReleased
         try {
      
      String text = TXTUREA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 10 || valor > 50) {
           Color lightRed = new Color(255, 192, 192);
            TXTUREA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTUREA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTUREA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTUREAKeyReleased

    private void TXTCREATININAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCREATININAKeyReleased
           try {
      
      String text = TXTCREATININA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0.50 || valor > 1.10) {
           Color lightRed = new Color(255, 192, 192);
            TXTCREATININA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTCREATININA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTCREATININA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTCREATININAKeyReleased

    private void TXTACIDOURICOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTACIDOURICOKeyReleased
    try {
      
      String text = TXTACIDOURICO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 1.50 || valor > 7.0) {
           Color lightRed = new Color(255, 192, 192);
            TXTACIDOURICO.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTACIDOURICO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTACIDOURICO.setBackground(Color.WHITE); // Manejar entrada no válida
    }      
    }//GEN-LAST:event_TXTACIDOURICOKeyReleased

    private void TXTCOLESTEROLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCOLESTEROLKeyReleased
       try {
      
      String text = TXTCOLESTEROL.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 200) {
           Color lightRed = new Color(255, 192, 192);
            TXTCOLESTEROL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTCOLESTEROL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTCOLESTEROL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTCOLESTEROLKeyReleased

    private void TXTRIGLICERIDOSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRIGLICERIDOSKeyReleased
         try {
      
      String text = TXTRIGLICERIDOS.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 35 || valor > 165) {
           Color lightRed = new Color(255, 192, 192);
            TXTRIGLICERIDOS.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTRIGLICERIDOS.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTRIGLICERIDOS.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTRIGLICERIDOSKeyReleased

    private void TXTHDLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTHDLKeyReleased
        try {
      
      String text = TXTHDL.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 30 || valor > 70) {
           Color lightRed = new Color(255, 192, 192);
            TXTHDL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTHDL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTHDL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTHDLKeyReleased

    private void TXTLDLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDLKeyReleased
         try {
      
      String text = TXTLDL.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 150) {
           Color lightRed = new Color(255, 192, 192);
            TXTLDL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTLDL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTLDL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTLDLKeyReleased

    private void TXTVLDLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTVLDLKeyReleased
      try {
      
      String text = TXTVLDL.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 5 || valor > 40) {
           Color lightRed = new Color(255, 192, 192);
            TXTVLDL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTVLDL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTVLDL.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTVLDLKeyReleased

    private void TXTBILITOTALKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILITOTALKeyReleased
        try {
      
      String text = TXTBILITOTAL.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 1.1) {
           Color lightRed = new Color(255, 192, 192);
            TXTBILITOTAL.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTBILITOTAL.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
        TXTBILITOTAL.setBackground(Color.WHITE); // Manejar entrada no válida
    }  
    }//GEN-LAST:event_TXTBILITOTALKeyReleased

    private void TXTBILIDIRECTAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIDIRECTAKeyReleased
         try {
      
      String text = TXTBILIDIRECTA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 0.25) {
           Color lightRed = new Color(255, 192, 192);
            TXTBILIDIRECTA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
             TXTBILIDIRECTA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
       TXTBILIDIRECTA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTBILIDIRECTAKeyReleased

    private void TXTBILIINDIRECTAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTBILIINDIRECTAKeyReleased
        try {
      
      String text = TXTBILIINDIRECTA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0.1 || valor > 0.50) {
           Color lightRed = new Color(255, 192, 192);
            TXTBILIINDIRECTA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTBILIINDIRECTA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTBILIINDIRECTA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTBILIINDIRECTAKeyReleased

    private void TXTPROTEINASKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPROTEINASKeyReleased
       try {
      
      String text = TXTPROTEINAS.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 6.0 || valor > 8.4) {
           Color lightRed = new Color(255, 192, 192);
            TXTPROTEINAS.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTPROTEINAS.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTPROTEINAS.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTPROTEINASKeyReleased

    private void TXTALBUMINAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTALBUMINAKeyReleased
            try {
      
      String text = TXTALBUMINA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 3.2 || valor > 5.0) {
           Color lightRed = new Color(255, 192, 192);
            TXTALBUMINA.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTALBUMINA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTALBUMINA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTALBUMINAKeyReleased

    private void TXTGLOBULINASKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGLOBULINASKeyReleased
            try {
      
      String text = TXTGLOBULINAS.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 2.7 || valor > 4.5) {
           Color lightRed = new Color(255, 192, 192);
            TXTGLOBULINAS.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTGLOBULINAS.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTGLOBULINAS.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTGLOBULINASKeyReleased

    private void TXTRELACIONKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTRELACIONKeyReleased
        try {
      
      String text = TXTRELACION.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0.9 || valor > 2.1) {
           Color lightRed = new Color(255, 192, 192);
            TXTRELACION.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
            TXTRELACION.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTRELACION.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTRELACIONKeyReleased

    private void TXTTGOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGOKeyReleased
         try {
      
      String text = TXTTGO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor > 40) {
           Color lightRed = new Color(255, 192, 192);
            TXTTGO.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
           TXTTGO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTTGO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTTGOKeyReleased

    private void TXTTGPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTTGPKeyReleased
           try {
      
      String text = TXTTGP.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor > 41) {
           Color lightRed = new Color(255, 192, 192);
            TXTTGP.setBackground(lightRed);
        } else {
            Color lightGreen = new Color(192, 255, 192);
           TXTTGP.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTTGP.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTTGPKeyReleased

    private void TXTCALCIOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTCALCIOKeyReleased
      try {
      
      String text = TXTCALCIO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 8.6 || valor > 10.3) {
           Color lightRed = new Color(255, 192, 192);
           TXTCALCIO.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTCALCIO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTCALCIO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTCALCIOKeyReleased

    private void TXTFOSFATAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFATAKeyReleased
       try {
      
      String text = TXTFOSFATA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 25 || valor > 90) {
           Color lightRed = new Color(255, 192, 192);
           TXTFOSFATA.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTFOSFATA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTFOSFATA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTFOSFATAKeyReleased

    private void TXTFOSFOROKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTFOSFOROKeyReleased
         try {
      
      String text = TXTFOSFORO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 2.7 || valor > 4.5) {
           Color lightRed = new Color(255, 192, 192);
           TXTFOSFORO.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTFOSFORO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTFOSFORO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTFOSFOROKeyReleased

    private void TXTMAGNESIOKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTMAGNESIOKeyReleased
          try {
      
      String text = TXTMAGNESIO.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 1.7 || valor > 2.2) {
           Color lightRed = new Color(255, 192, 192);
           TXTMAGNESIO.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTMAGNESIO.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTMAGNESIO.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTMAGNESIOKeyReleased

    private void TXTLDHKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLDHKeyReleased
        try {
      
      String text = TXTLDH.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 100 || valor > 210) {
           Color lightRed = new Color(255, 192, 192);
           TXTLDH.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTLDH.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTLDH.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTLDHKeyReleased

    private void TXTAMILASAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTAMILASAKeyReleased
         try {
      
      String text = TXTAMILASA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor > 125 ) {
           Color lightRed = new Color(255, 192, 192);
           TXTAMILASA.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTAMILASA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTAMILASA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTAMILASAKeyReleased

    private void TXTGGTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTGGTKeyReleased
        if(Sexo.equals("Masculino")){
        try {
      
      String text = TXTGGT.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 50) {
           Color lightRed = new Color(255, 192, 192);
           TXTGGT.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTGGT.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTGGT.setBackground(Color.WHITE); // Manejar entrada no válida
    }
        }
        
        else{
        
           try {
      
      String text = TXTGGT.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor < 0 || valor > 30) {
           Color lightRed = new Color(255, 192, 192);
           TXTGGT.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTGGT.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTGGT.setBackground(Color.WHITE); // Manejar entrada no válida
    }
        
        
        
        }
    }//GEN-LAST:event_TXTGGTKeyReleased

    private void TXTLIPASAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTLIPASAKeyReleased
         try {
      
      String text = TXTLIPASA.getText().replace(',', '.');
    
       double valor = Double.parseDouble(text);
        if (valor > 130 ) {
           Color lightRed = new Color(255, 192, 192);
           TXTLIPASA.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTLIPASA.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTLIPASA.setBackground(Color.WHITE); // Manejar entrada no válida
    }
    }//GEN-LAST:event_TXTLIPASAKeyReleased

    private void TXTPCRKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXTPCRKeyReleased
     try {
      
      String text = TXTPCR.getText().replace(',', '.').trim();
    
       double valor = Double.parseDouble(text);
        if (valor > 6 ) {
           Color lightRed = new Color(255, 192, 192);
           TXTPCR.setBackground(lightRed);
        } else {
           Color lightGreen = new Color(192, 255, 192);
           TXTPCR.setBackground(lightGreen);
        }
    } catch (NumberFormatException ex) {
      TXTPCR.setBackground(Color.WHITE); // Manejar entrada no válida
      System.out.println(ex);
    }
                            
    }//GEN-LAST:event_TXTPCRKeyReleased

    private void TxtEosinofilosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtEosinofilosFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtEosinofilosFocusLost

    private void TxtEosinofilosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtEosinofilosKeyPressed

    private void TxtEosinofilosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilosKeyReleased
        try {
            String text = TxtEosinofilos.getText().replace(',', '.');
            double valor = Double.parseDouble(text);
            if (valor < 0 || valor > 7) {
                Color lightRed = new Color(255, 192, 192);
                TxtEosinofilos.setBackground(lightRed);
            } else {
                Color lightGreen = new Color(192, 255, 192);
                TxtEosinofilos.setBackground(lightGreen);
            }
        } catch (NumberFormatException ex) {
            TxtEosinofilos.setBackground(Color.WHITE); // Manejar entrada no válida
        }
    }//GEN-LAST:event_TxtEosinofilosKeyReleased

    private void TxtEosinofilosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilosKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtEosinofilos.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtEosinofilosKeyTyped

    private void TxtMonocitosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtMonocitosFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtMonocitosFocusLost

    private void TxtMonocitosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtMonocitosKeyPressed

    private void TxtMonocitosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitosKeyReleased
        try {
            String text = TxtMonocitos.getText().replace(',', '.');
            double valor = Double.parseDouble(text);
            if (valor < 0 || valor > 11) {
                Color lightRed = new Color(255, 192, 192);
                TxtMonocitos.setBackground(lightRed);
            } else {
                Color lightGreen = new Color(192, 255, 192);
                TxtMonocitos.setBackground(lightGreen);
            }
        } catch (NumberFormatException ex) {
            TxtMonocitos.setBackground(Color.WHITE); // Manejar entrada no válida
        }
    }//GEN-LAST:event_TxtMonocitosKeyReleased

    private void TxtMonocitosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitosKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtMonocitos.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtMonocitosKeyTyped

    private void TxtBasofiloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtBasofiloFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtBasofiloFocusLost

    private void TxtBasofiloKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofiloKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtBasofiloKeyPressed

    private void TxtBasofiloKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofiloKeyReleased
        try {
            String text = TxtBasofilo.getText().replace(',', '.');
            double valor = Double.parseDouble(text);
            if (valor < 0 || valor > 1) {
                Color lightRed = new Color(255, 192, 192);
                TxtBasofilo.setBackground(lightRed);
            } else {
                Color lightGreen = new Color(192, 255, 192);
                TxtBasofilo.setBackground(lightGreen);
            }
        } catch (NumberFormatException ex) {
            TxtBasofilo.setBackground(Color.WHITE); // Manejar entrada no válida
        }
    }//GEN-LAST:event_TxtBasofiloKeyReleased

    private void TxtBasofiloKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofiloKeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtBasofilo.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtBasofiloKeyTyped

    private void TxtEosinofilos1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtEosinofilos1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtEosinofilos1FocusLost

    private void TxtEosinofilos1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilos1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtEosinofilos1KeyPressed

    private void TxtEosinofilos1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilos1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtEosinofilos1KeyReleased

    private void TxtEosinofilos1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtEosinofilos1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtEosinofilos1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtEosinofilos1KeyTyped

    private void TxtMonocitos1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtMonocitos1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtMonocitos1FocusLost

    private void TxtMonocitos1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitos1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtMonocitos1KeyPressed

    private void TxtMonocitos1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitos1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtMonocitos1KeyReleased

    private void TxtMonocitos1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtMonocitos1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtMonocitos1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtMonocitos1KeyTyped

    private void TxtBasofilo1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TxtBasofilo1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtBasofilo1FocusLost

    private void TxtBasofilo1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofilo1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtBasofilo1KeyPressed

    private void TxtBasofilo1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofilo1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtBasofilo1KeyReleased

    private void TxtBasofilo1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtBasofilo1KeyTyped
        char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='.' || car==',' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = TxtBasofilo1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==5)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='.' && car!=','|| car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_TxtBasofilo1KeyTyped

    
    
    
    public static String getEdad(Date fechaNacimiento) {
    if (fechaNacimiento != null) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        StringBuilder result = new StringBuilder();
        if (fechaNacimiento != null) {
            result.append(sdf.format(fechaNacimiento));
            result.append(" (");
            Calendar c = new GregorianCalendar();
            c.setTime(fechaNacimiento);
            result.append(calcularEdad(c));
            result.append(" años)");
        }
        return result.toString();
    }
    return "";
}

private static int calcularEdad(Calendar fechaNac) {
    Calendar today = Calendar.getInstance();
    int diffYear = today.get(Calendar.YEAR) - fechaNac.get(Calendar.YEAR);
    int diffMonth = today.get(Calendar.MONTH) - fechaNac.get(Calendar.MONTH);
    int diffDay = today.get(Calendar.DAY_OF_MONTH) - fechaNac.get(Calendar.DAY_OF_MONTH);
    // Si está en ese año pero todavía no los ha cumplido
    if (diffMonth < 0 || (diffMonth == 0 && diffDay < 0)) {
        diffYear = diffYear - 1;
    }
    return diffYear;
}
    
    
    
    
    

 String PdfNames;
      public void pdf() {
      try {
       
          
          
          
                   
      
          

         
          
             String Paciente=TXTPnombre.getText()+ " "+ TXTPapellido.getText(); 
             PdfNames=TXTPcedula.getText()+"_"+Paciente+"_"+Maxid;


        
          
          
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            Paragraph saltolinea = new Paragraph();
          

            FileOutputStream archivo;
            //String rut = System.getProperty("user.home");
            File file = new File("C://Fundaginebra//Reportes//"+PdfNames+".pdf");
            archivo = new FileOutputStream(file);
            Document doc = new Document();
            doc.setMargins(36, 36, 180, 130);
            PdfWriter writer=  PdfWriter.getInstance(doc, archivo);
          
            
            JPerfilrutina.HeaderFooterPageEvent headerEvent = new JPerfilrutina.HeaderFooterPageEvent();
            writer.setPageEvent(headerEvent);
            writer.setPageEvent(eventHelper);
            
            
           
            doc.open();
       
            com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\src\\imagenes\\Fundacionlogo1.png");
            header.setAlignment(Chunk.ALIGN_CENTER);

         
            


            
            
            
            float[] medidaCeldas1 = {5f};
            float[] medidaCeldas2 = {4f, 2f, 2f,4f};
            
                 
         
            
                   
            PdfPTable Tabla5 = new PdfPTable(1); 
            Tabla5.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla5.setWidthPercentage(100);  
            Tabla5.setWidths(medidaCeldas1);
            Tabla5.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla5.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t5columna1 = new Paragraph("----- HEMATOLOGÍA ---- \n");
            t5columna1.getFont().setStyle(Font.BOLD);
            t5columna1.getFont().setSize(10);        
            t5columna1.setFont(Letra);
            t5columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla5.addCell(t5columna1);
     
                

            
            
            
            PdfPTable Tabla2 = new PdfPTable(4); 
            Tabla2.setWidthPercentage(100);  
            Tabla2.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tabla2.setWidths(medidaCeldas2);
            Tabla2.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t6columna1 = new Paragraph("ANALISIS REALIZADO");
            t6columna1.getFont().setStyle(Font.BOLD);
            t6columna1.getFont().setSize(9);        
            t6columna1.setFont(Letra);
            t6columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t6columna1);
     
                
            Paragraph t6columna2 = new Paragraph("RESULTADOS");
            t6columna2.getFont().setStyle(Font.BOLD);
            t6columna2.getFont().setSize(9);        
            t6columna2.setFont(Letra);
            t6columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t6columna2);

            Paragraph t6columna3 = new Paragraph("UNIDAD");
            t6columna3.getFont().setStyle(Font.BOLD);
            t6columna3.getFont().setSize(10);        
            t6columna3.setFont(Letra);
            t6columna3.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t6columna3);

            Paragraph t6columna4 = new Paragraph("REFERENCIA");
            t6columna4.getFont().setStyle(Font.BOLD);
            t6columna4.getFont().setSize(9);        
            t6columna4.setFont(Letra);
            t6columna4.setAlignment(Element.ALIGN_CENTER);
            Tabla2.addCell(t6columna4);
            
            
            if (!TxtLeucocitos.getText().equals("")){ 
 
           Tabla2.addCell(new Paragraph("Leucocitos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtLeucocitos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("Cel/mm3",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtLeucocitos1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           
           if (!TxtLinfocitos.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Linfocitos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtLinfocitos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtLinfocitos1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));  
           }
           
           if (!TxtNeutrofilos.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Neutrofilos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtNeutrofilos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtNeutrofilos1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }       
           
           if(!TxtEosinofilos.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Eosinofilos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtEosinofilos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtEosinofilos1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
             }   
            
           if(!TxtMonocitos.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Monocitos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtMonocitos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtMonocitos1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
             }   
           
           if(!TxtBasofilo.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Basofilo",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtBasofilo.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtBasofilo1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
             } 
           
           if (!TxtHemoglobina.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Hemoglobina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtHemoglobina.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("g/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtHemoglobina1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }       
            
           
           
           
           
           if (!TxtHematocrito.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Hematocritos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtHematocrito.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtHematocrito1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if (!TxtVCM.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("VCM",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtVCM.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("fL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtVCM1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }        
            
           if (!TXtCHCM.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("CHCM",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TXtCHCM.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TXtCHCM1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if (!TxtPlaquetas.getText().equals("")){ 
           Tabla2.addCell(new Paragraph("Cont. Plaquetas",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtPlaquetas.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           Tabla2.addCell(new Paragraph("Cel/mm3",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla2.addCell(new Paragraph(TxtPlaquetas1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }

        

  
           
            PdfPTable Tablaquimica = new PdfPTable(1); 
            Tablaquimica.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tablaquimica.setWidthPercentage(100);  
            Tablaquimica.setWidths(medidaCeldas1);
            Tablaquimica.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablaquimica.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph columnaQuimica = new Paragraph("----- QUIMICA SANGUINEA ---- ");
            columnaQuimica.getFont().setStyle(Font.BOLD);
            columnaQuimica.getFont().setSize(10);        
            columnaQuimica.setFont(Letra);
            columnaQuimica.setAlignment(Element.ALIGN_LEFT);
            Tablaquimica.addCell(columnaQuimica);
     
           
            PdfPTable Tablaquimica2 = new PdfPTable(4); 
            Tablaquimica2.setWidthPercentage(100);  
            Tablaquimica2.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tablaquimica2.setWidths(medidaCeldas2);
            Tablaquimica2.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablaquimica2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph columnaQuimica1 = new Paragraph("ANALISIS REALIZADO");
            columnaQuimica1.getFont().setStyle(Font.BOLD);
            columnaQuimica1.getFont().setSize(9);        
            columnaQuimica1.setFont(Letra);
            columnaQuimica1.setAlignment(Element.ALIGN_CENTER);
            Tablaquimica2.addCell(columnaQuimica1);
     
                
            Paragraph columnaQuimica2 = new Paragraph("RESULTADOS");
            columnaQuimica2.getFont().setStyle(Font.BOLD);
            columnaQuimica2.getFont().setSize(9);        
            columnaQuimica2.setFont(Letra);
            columnaQuimica2.setAlignment(Element.ALIGN_CENTER);
            Tablaquimica2.addCell(columnaQuimica2);

            Paragraph columnaQuimica3 = new Paragraph("UNIDAD");
            columnaQuimica3.getFont().setStyle(Font.BOLD);
            columnaQuimica3.getFont().setSize(10);        
            columnaQuimica3.setFont(Letra);
            columnaQuimica3.setAlignment(Element.ALIGN_CENTER);
            Tablaquimica2.addCell(columnaQuimica3);

            Paragraph columnaQuimica4 = new Paragraph("REFERENCIA");
            columnaQuimica4.getFont().setStyle(Font.BOLD);
            columnaQuimica4.getFont().setSize(9);        
            columnaQuimica4.setFont(Letra);
            columnaQuimica4.setAlignment(Element.ALIGN_CENTER);
            Tablaquimica2.addCell(t6columna4);
            
            
            
         
           
            
if (!TXTGLICEMIA.getText().equals("")){  
    Tablaquimica2.addCell(new Paragraph("Glicemia", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTGLICEMIA.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTGLICEMIA1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTPANDRIAL.getText().equals("")) {
    Tablaquimica2.addCell(new Paragraph("Glicemia Postpandrial", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTPANDRIAL.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTPANDRIAL1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTUREA.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Urea", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTUREA.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTUREA1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTCREATININA.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Creatinina", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTCREATININA.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTCREATININA1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTACIDOURICO.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Ácido Urico", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTACIDOURICO.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTACIDOURICO1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTCOLESTEROL.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Colesterol", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTCOLESTEROL.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTCOLESTEROL1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTRIGLICERIDOS.getText().equals("")) {
    Tablaquimica2.addCell(new Paragraph("Trigliceridos", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTRIGLICERIDOS.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTRIGLICERIDOS1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTHDL.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("H.D.L colesterol", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTHDL.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTHDL1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTLDL.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("L.D.L colesterol", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTLDL.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTLDL1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTVLDL.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("V.L.D.L colesterol", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTVLDL.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTVLDL1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTBILITOTAL.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Bilirrubina Total", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTBILITOTAL.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTBILITOTAL1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTBILIDIRECTA.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Bilirrubina Directa", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTBILIDIRECTA.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTBILIDIRECTA1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTBILIINDIRECTA.getText().equals("")){  
    Tablaquimica2.addCell(new Paragraph("Bilirrubina Indirecta", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTBILIINDIRECTA.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTBILIINDIRECTA1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTPROTEINAS.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Proteinas Totales", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTPROTEINAS.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("g/L", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTPROTEINAS1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTALBUMINA.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Albumina", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTALBUMINA.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("gr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTALBUMINA1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTGLOBULINAS.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Globulinas", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTGLOBULINAS.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("gr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTGLOBULINAS1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTRELACION.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Relación ALB/GLOB", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTRELACION.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph(" ", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTRELACION1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTTGO.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("T.G.O", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTTGO.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("U.I/L", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTTGO1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTTGP.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("T.G.P", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTTGP.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("U.I/L", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTTGP1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTCALCIO.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Calcio", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTCALCIO.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTCALCIO1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTFOSFATA.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Fosfatasa Alcalina", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTFOSFATA.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("U.I/L", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTFOSFATA1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}

if (!TXTFOSFORO.getText().equals("")) { 
    Tablaquimica2.addCell(new Paragraph("Fosforo", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTFOSFORO.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL)));
    Tablaquimica2.addCell(new Paragraph("mgr/dL", FontFactory.getFont("Arial", 9, Font.NORMAL))); 
    Tablaquimica2.addCell(new Paragraph(TXTFOSFORO1.getText(), FontFactory.getFont("Arial", 9, Font.NORMAL))); 
}
           
 if(!TXTMAGNESIO.getText().equals("")){ 
   Tablaquimica2.addCell(new Paragraph("Magnesio",FontFactory.getFont("Arial",9,Font.NORMAL))); 
   Tablaquimica2.addCell(new Paragraph(TXTMAGNESIO.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
   Tablaquimica2.addCell(new Paragraph("mgr/dL",FontFactory.getFont("Arial",9,Font.NORMAL))); 
   Tablaquimica2.addCell(new Paragraph(TXTMAGNESIO1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }      
           
           
           

            PdfPTable Tabla1 = new PdfPTable(1); 
            Tabla1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla1.setWidthPercentage(100);  
            Tabla1.setWidths(medidaCeldas1);
            Tabla1.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t1columna1 = new Paragraph("----- TIEMPOS DE COAGULACIÓN Y VELOCIDAD DE SEDIMENTACIÓN ---- ");
            t1columna1.getFont().setStyle(Font.BOLD);
            t1columna1.getFont().setSize(10);        
            t1columna1.setFont(Letra);
            t1columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla1.addCell(t1columna1);
     
                

            
            
            
            PdfPTable TablaPt = new PdfPTable(4); 
            TablaPt.setWidthPercentage(100);  
            TablaPt.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            TablaPt.setWidths(medidaCeldas2);
            TablaPt.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaPt.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t2columna1 = new Paragraph("ANALISIS REALIZADO");
            t2columna1.getFont().setStyle(Font.BOLD);
            t2columna1.getFont().setSize(9);        
            t2columna1.setFont(Letra);
            t2columna1.setAlignment(Element.ALIGN_CENTER);
            TablaPt.addCell(t2columna1);
     
                
            Paragraph t2columna2 = new Paragraph("RESULTADOS");
            t2columna2.getFont().setStyle(Font.BOLD);
            t2columna2.getFont().setSize(9);        
            t2columna2.setFont(Letra);
            t2columna2.setAlignment(Element.ALIGN_CENTER);
            TablaPt.addCell(t2columna2);

            Paragraph t2columna3 = new Paragraph("");
            t2columna3.getFont().setStyle(Font.BOLD);
            t2columna3.getFont().setSize(10);        
            t2columna3.setFont(Letra);
            t2columna3.setAlignment(Element.ALIGN_CENTER);
            TablaPt.addCell(t2columna3);

            Paragraph t2columna4 = new Paragraph("");
            t2columna4.getFont().setStyle(Font.BOLD);
            t2columna4.getFont().setSize(9);        
            t2columna4.setFont(Letra);
            t2columna4.setAlignment(Element.ALIGN_CENTER);
            TablaPt.addCell(t2columna4);
            
            
            
         
           
            
           if(!TXTPROTROMBINA.getText().equals("")){
           TablaPt.addCell(new Paragraph("Tiempo de Protrombina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPt.addCell(new Paragraph(TXTPROTROMBINA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           TablaPt.addCell(new Paragraph("Rp/c= "+ TXTUNID.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPt.addCell(new Paragraph(TXTRPC.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTPARCIAL.getText().equals("")){
           TablaPt.addCell(new Paragraph("Tiempo Parcial de la Tromboplastina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPt.addCell(new Paragraph(TXTPARCIAL.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           TablaPt.addCell(new Paragraph("Dp/c= "+ TXTUNID2.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPt.addCell(new Paragraph(TXTDPC.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
           
           if(!TXTVSG.getText().equals("")){
           TablaPt.addCell(new Paragraph("VSG",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPt.addCell(new Paragraph(TXTVSG.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           TablaPt.addCell(new Paragraph("mm",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPt.addCell(new Paragraph("VR: "+TXTVRH.getText()+"\n M: "+TXTM.getText()+"\n Niños: "+ TXTKIDS.getText() ,FontFactory.getFont("Arial",9,Font.NORMAL))); 
          }     
           
                   
                   
           if(!JtextISIS.getText().equals("")){
           TablaPt.addCell(new Paragraph("ISI",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPt.addCell(new Paragraph(JtextISIS.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           TablaPt.addCell(new Paragraph("",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPt.addCell(new Paragraph("")); 
            } 
                  
           if(!JtextINR.getText().equals("")){
           TablaPt.addCell(new Paragraph("INR",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPt.addCell(new Paragraph(JtextINR.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           TablaPt.addCell(new Paragraph("",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPt.addCell(new Paragraph("")); 
            } 
          
           
           
           
            
           
            PdfPTable Tabla3 = new PdfPTable(1); 
            Tabla3.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla3.setWidthPercentage(100);  
     
            Tabla3.setWidths(medidaCeldas1);
            Tabla3.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla3.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            
            Paragraph t3columna1 = new Paragraph("----- SEROLOGÍA ---- ");
            t3columna1.getFont().setStyle(Font.BOLD);
            t3columna1.getFont().setSize(10);        
            t3columna1.setFont(Letra);
            t3columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla3.addCell(t3columna1);
           
           
            PdfPTable Tabla4 = new PdfPTable(2); 
            Tabla4.setWidthPercentage(100);  
            Tabla4.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            float[] medidaCeldas4 = {4f, 4f};
            Tabla4.setWidths(medidaCeldas4);
            Tabla4.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla4.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t4columna1 = new Paragraph("PRUEBA");
            t4columna1.getFont().setStyle(Font.BOLD);
            t4columna1.getFont().setSize(9);        
            t4columna1.setFont(Letra);
            t4columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla4.addCell(t4columna1);
     
                
            Paragraph t4columna2 = new Paragraph("RESULTADO");
            t4columna2.getFont().setStyle(Font.BOLD);
            t4columna2.getFont().setSize(9);        
            t4columna2.setFont(Letra);
            t4columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla4.addCell(t4columna2);

        
            
           if(!TXTVDRL.getSelectedItem().toString().equals("Seleccionar")){     
           Tabla4.addCell(new Paragraph("V.D.R.L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(TXTVDRL.getSelectedItem().toString().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
                    
           if(!JCPruebasangre.getSelectedItem().equals("Seleccionar")){   
           Tabla4.addCell(new Paragraph("Prueba de Embarazo en Sangre",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(JCPruebasangre.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
                    
           if(!TXTrematoideo.getText().equals("")){      
           Tabla4.addCell(new Paragraph("Factor Reumatoideo",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(TXTrematoideo.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }

           if(!TXTREACTIVA.getText().equals("")){
           Tabla4.addCell(new Paragraph("Proteina C Reactiva",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(TXTREACTIVA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           if(!TXTASTRO.getText().equals("")){
           Tabla4.addCell(new Paragraph("Asto (Titulo Antiestreptolisina)",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(TXTASTRO.getText() + " UI/mL",FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
         
           if (!TXTHLV.getSelectedItem().equals("Seleccionar")){     
           Tabla4.addCell(new Paragraph("V.I.H",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla4.addCell(new Paragraph(TXTHLV.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }
            
        
            
            
            
            PdfPTable TablaEnzimatica = new PdfPTable(1); 
            TablaEnzimatica.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            TablaEnzimatica.setWidthPercentage(100);  
            TablaEnzimatica.setWidths(medidaCeldas1);
            TablaEnzimatica.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaEnzimatica.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph enzimas1 = new Paragraph("----- PERFIL ENZIMATICO ----- ");
            enzimas1.getFont().setStyle(Font.BOLD);
            enzimas1.getFont().setSize(10);        
            enzimas1.setFont(Letra);
            enzimas1.setAlignment(Element.ALIGN_LEFT);
            TablaEnzimatica.addCell(enzimas1);
     
                

            
            
            
            PdfPTable TablaEnzimatica1 = new PdfPTable(4); 
            TablaEnzimatica1.setWidthPercentage(100);  
            TablaEnzimatica1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            TablaEnzimatica1.setWidths(medidaCeldas2);
            TablaEnzimatica1.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaEnzimatica1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph enziams2 = new Paragraph("ANALISIS REALIZADO");
            enziams2.getFont().setStyle(Font.BOLD);
            enziams2.getFont().setSize(9);        
            enziams2.setFont(Letra);
            enziams2.setAlignment(Element.ALIGN_CENTER);
            TablaEnzimatica1.addCell(enziams2);
     
                
            Paragraph enziams3 = new Paragraph("RESULTADOS");
            enziams3.getFont().setStyle(Font.BOLD);
            enziams3.getFont().setSize(9);        
            enziams3.setFont(Letra);
            enziams3.setAlignment(Element.ALIGN_CENTER);
            TablaEnzimatica1.addCell(enziams3);

            Paragraph enzimas4= new Paragraph("UNIDAD");
            enzimas4.getFont().setStyle(Font.BOLD);
            enzimas4.getFont().setSize(10);        
            enzimas4.setFont(Letra);
            enzimas4.setAlignment(Element.ALIGN_CENTER);
            TablaEnzimatica1.addCell(enzimas4);

            Paragraph enzimas5 = new Paragraph("REFERENCIA");
            enzimas5.getFont().setStyle(Font.BOLD);
            enzimas5.getFont().setSize(9);        
            enzimas5.setFont(Letra);
            enzimas5.setAlignment(Element.ALIGN_CENTER);
            TablaEnzimatica1.addCell(enzimas5);
            
            
            
         
           
            
          if (!TXTLDH.getText().equals("")){
           TablaEnzimatica1.addCell(new Paragraph("Lactato deshidrogenasa (LDH) ",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaEnzimatica1.addCell(new Paragraph(TXTLDH.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           TablaEnzimatica1.addCell(new Paragraph("UI/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaEnzimatica1.addCell(new Paragraph(TXTLDH1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
            }  
           
          
           if (!TXTGGT.getText().equals("")){
           TablaEnzimatica1.addCell(new Paragraph("Gamma Glutamil Transferasa (GGT)",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaEnzimatica1.addCell(new Paragraph(TXTGGT.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           TablaEnzimatica1.addCell(new Paragraph("U/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaEnzimatica1.addCell(new Paragraph("Hombres: "+TXTHGGT1.getText()+"\n Mujeres: "+TXTMGGT1.getText()+"\n",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           }  
           
           if (!TXTAMILASA.getText().equals("")){
           TablaEnzimatica1.addCell(new Paragraph("AMILASA",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaEnzimatica1.addCell(new Paragraph(TXTAMILASA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           TablaEnzimatica1.addCell(new Paragraph("UI/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaEnzimatica1.addCell(new Paragraph(TXTAMILASA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
              }       
           
           if (!TXTLIPASA.getText().equals("")){
           TablaEnzimatica1.addCell(new Paragraph("LIPASA",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaEnzimatica1.addCell(new Paragraph(TXTLIPASA.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           TablaEnzimatica1.addCell(new Paragraph("U/L%",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaEnzimatica1.addCell(new Paragraph(TXTLIPASA1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
               }      
                 

           
           
           
           
           
           
            PdfPTable TablaGrupo = new PdfPTable(2); 
            
            TablaGrupo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            
            TablaGrupo.setWidthPercentage(100);  
            TablaGrupo.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaGrupo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph columnaGrupo = new Paragraph("ANÁLISIS REALIZADO");
            columnaGrupo.getFont().setStyle(Font.BOLD);
            columnaGrupo.getFont().setSize(9);        
            columnaGrupo.setFont(Letra);
            columnaGrupo.setAlignment(Element.ALIGN_CENTER);
            TablaGrupo.addCell(columnaGrupo);
     
                
            Paragraph columnaGrupo0 = new Paragraph("RESULTADOS");
            columnaGrupo0.getFont().setStyle(Font.BOLD);
            columnaGrupo0.getFont().setSize(9);        
            columnaGrupo0.setFont(Letra);
            columnaGrupo0.setAlignment(Element.ALIGN_CENTER);
            TablaGrupo.addCell(columnaGrupo0);
            


            
            
             
            PdfPTable TablaGsanguineo = new PdfPTable(1); 
            TablaGsanguineo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            TablaGsanguineo.setWidthPercentage(100);  
            TablaGsanguineo.setWidths(medidaCeldas1);
            TablaGsanguineo.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaGsanguineo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph columnaSanguineo = new Paragraph("----- GRUPO SANGUINEO ---- ");
            columnaSanguineo.getFont().setStyle(Font.BOLD);
            columnaSanguineo.getFont().setSize(10);        
            columnaSanguineo.setFont(Letra);
            columnaSanguineo.setAlignment(Element.ALIGN_LEFT);
            TablaGsanguineo.addCell(columnaSanguineo);
            
    
            PdfPTable TablaGrupo2 = new PdfPTable(2); 
            TablaGrupo2.setWidthPercentage(100);  
            TablaGrupo2.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            float[] medidaGrupo = {4f, 4f};
            TablaGrupo2.setWidths(medidaGrupo);
            TablaGrupo2.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaGrupo2.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph columnaGrupo1 = new Paragraph("");
            columnaGrupo1.getFont().setStyle(Font.BOLD);
            columnaGrupo1.getFont().setSize(9);        
            columnaGrupo1.setFont(Letra);
            columnaGrupo1.setAlignment(Element.ALIGN_CENTER);
            TablaGrupo2.addCell(columnaGrupo1);
     
                
            Paragraph columnaGrupo2 = new Paragraph();
            columnaGrupo2.getFont().setStyle(Font.BOLD);
            columnaGrupo2.getFont().setSize(9);        
            columnaGrupo2.setFont(Letra);
            columnaGrupo2.setAlignment(Element.ALIGN_CENTER);
            TablaGrupo2.addCell(columnaGrupo2);

        
            
            
       
           if(!TXTSANGUINEO.getText().equals("")){  
           TablaGrupo2.addCell(new Paragraph("Grupo Sanguineo:",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaGrupo2.addCell(new Paragraph('"'+TXTSANGUINEO.getText().toString()+'"',FontFactory.getFont("Arial",12,Font.NORMAL)));
           } 
           
           if(!TXTRH.getText().equals("")){  
           TablaGrupo2.addCell(new Paragraph("Factor RH",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaGrupo2.addCell(new Paragraph(TXTRH.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           
           
           
           
           
           
            PdfPTable TablaPCR0 = new PdfPTable(1); 
            TablaPCR0.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            TablaPCR0.setWidthPercentage(100);  
            TablaPCR0.setWidths(medidaCeldas1);
            TablaPCR0.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaPCR0.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph p1columna1 = new Paragraph("----- PCR CUANTIFICADA ---- ");
            p1columna1.getFont().setStyle(Font.BOLD);
            p1columna1.getFont().setSize(10);        
            p1columna1.setFont(Letra);
            p1columna1.setAlignment(Element.ALIGN_LEFT);
            TablaPCR0.addCell(p1columna1);
     
                

            
            
            
            PdfPTable TablaPCR1 = new PdfPTable(4); 
            TablaPCR1.setWidthPercentage(100);  
            TablaPCR1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            float[] medidaCeldaspcr = {4f, 2f, 2f,4f};
            TablaPCR1.setWidths(medidaCeldaspcr);
            TablaPCR1.setHorizontalAlignment(Element.ALIGN_CENTER);
            TablaPCR1.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph p2columna1 = new Paragraph("ANALISIS REALIZADO");
            p2columna1.getFont().setStyle(Font.BOLD);
            p2columna1.getFont().setSize(9);        
            p2columna1.setFont(Letra);
            p2columna1.setAlignment(Element.ALIGN_CENTER);
            TablaPCR1.addCell(p2columna1);
     
                
            Paragraph p2columna2 = new Paragraph("RESULTADO");
            p2columna2.getFont().setStyle(Font.BOLD);
            p2columna2.getFont().setSize(9);        
            p2columna2.setFont(Letra);
            p2columna2.setAlignment(Element.ALIGN_CENTER);
            TablaPCR1.addCell(p2columna2);

            Paragraph p2columna3 = new Paragraph("UNIDAD");
            p2columna3.getFont().setStyle(Font.BOLD);
            p2columna3.getFont().setSize(10);        
            p2columna3.setFont(Letra);
            p2columna3.setAlignment(Element.ALIGN_CENTER);
            TablaPCR1.addCell(p2columna3);

            Paragraph p2columna4 = new Paragraph("REFERENCIA");
            p2columna4.getFont().setStyle(Font.BOLD);
            p2columna4.getFont().setSize(9);        
            p2columna4.setFont(Letra);
            p2columna4.setAlignment(Element.ALIGN_CENTER);
            TablaPCR1.addCell(p2columna4);
            
            
            
         
           
            
           if(!TXTPCR.getText().equals("")){
           TablaPCR1.addCell(new Paragraph("PCR",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPCR1.addCell(new Paragraph(TXTPCR.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           TablaPCR1.addCell(new Paragraph("mg/L",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           TablaPCR1.addCell(new Paragraph(TXTPCR1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
            }
           
    
           
           
           
           
           
           
           

           
           
            
               
            PdfPTable Tablatitle = new PdfPTable(2); 
            
            Tablatitle.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            
            Tablatitle.setWidthPercentage(100);  
            Tablatitle.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablatitle.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph txcolumna1 = new Paragraph("ANÁLISIS REALIZADO");
            txcolumna1.getFont().setStyle(Font.BOLD);
            txcolumna1.getFont().setSize(9);        
            txcolumna1.setFont(Letra);
            txcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tablatitle.addCell(txcolumna1);
     
                
            Paragraph txcolumna2 = new Paragraph("RESULTADOS");
            txcolumna2.getFont().setStyle(Font.BOLD);
            txcolumna2.getFont().setSize(9);        
            txcolumna2.setFont(Letra);
            txcolumna2.setAlignment(Element.ALIGN_CENTER);
            Tablatitle.addCell(txcolumna2);
            
            
         
            
          
           
           
           
           
            PdfPTable Tabla7 = new PdfPTable(1); 
            Tabla7.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla7.setWidthPercentage(100);  
            float[] medidaCeldas7 = {5f};
            Tabla7.setWidths(medidaCeldas7);
            Tabla7.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla7.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            
            
            Paragraph t7columna1 = new Paragraph("-----ANALISIS DE ORINA-----");
            t7columna1.getFont().setStyle(Font.BOLD);
            t7columna1.getFont().setSize(9);        
            t7columna1.setFont(Letra);
            t7columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla7.addCell(t7columna1);
     

            
            
            PdfPTable Tabla8 = new PdfPTable(2); 
            Tabla8.setWidthPercentage(100);  
            Tabla8.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            float[] medidaCeldas8 = {4f, 4f};
            Tabla8.setWidths(medidaCeldas8);
            Tabla8.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla8.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t8columna1 = new Paragraph("");
            t8columna1.getFont().setStyle(Font.BOLD);
            t8columna1.getFont().setSize(9);        
            t8columna1.setFont(Letra);
            t8columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla8.addCell(t8columna1);
     
                
            Paragraph t8columna2 = new Paragraph();
            t8columna2.getFont().setStyle(Font.BOLD);
            t8columna2.getFont().setSize(9);        
            t8columna2.setFont(Letra);
            t8columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla8.addCell(t8columna2);

        
            
            
       
           if(!JCcolor1.getSelectedItem().equals("Seleccionar")){    
           Tabla8.addCell(new Paragraph("Color",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(JCcolor1.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
                    
             
           if(!TxtOlor1.getText().equals("")){
           Tabla8.addCell(new Paragraph("Olor",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(TxtOlor1.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
                    
           if(!TxtDensidad.getText().equals("")){      
           Tabla8.addCell(new Paragraph("Densidad",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(TxtDensidad.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
        
           if(!JCaspecto.getSelectedItem().equals("Seleccionar")){  
           Tabla8.addCell(new Paragraph("Aspecto",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(JCaspecto.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           if(!JCph.getSelectedItem().equals("Seleccionar")){ 
           Tabla8.addCell(new Paragraph("PH",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla8.addCell(new Paragraph(JCph.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
          
              
           PdfPTable Tabla9 = new PdfPTable(1); 
           Tabla9.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
           Tabla9.setWidthPercentage(100);  
           Tabla9.setWidths(medidaCeldas1);
           Tabla9.setHorizontalAlignment(Element.ALIGN_CENTER);
           Tabla9.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

           Paragraph t9columna1 = new Paragraph("ANÁLISIS QUIMICO");
           t9columna1.getFont().setStyle(Font.BOLD);
           t9columna1.getFont().setSize(9);        
           t9columna1.setFont(Letra);
           t9columna1.setAlignment(Element.ALIGN_LEFT);
           Tabla9.addCell(t9columna1);
           
           
           
           
       
            
            PdfPTable Tabla10 = new PdfPTable(2); 
            Tabla10.setWidthPercentage(100);  
            Tabla10.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tabla10.setWidths(medidaCeldas8);
            Tabla10.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla10.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t10columna1 = new Paragraph();
            t10columna1.getFont().setStyle(Font.BOLD);
            t10columna1.getFont().setSize(9);        
            t10columna1.setFont(Letra);
            t10columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla10.addCell(t10columna1);
     
                
            Paragraph t10columna2 = new Paragraph();
            t10columna2.getFont().setStyle(Font.BOLD);
            t10columna2.getFont().setSize(9);        
            t10columna2.setFont(Letra);
            t10columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla10.addCell(t10columna2);

        
        
       
           if(!JCglucosa1.getSelectedItem().equals("Seleccionar")){    
           Tabla10.addCell(new Paragraph("Glucosa",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla10.addCell(new Paragraph(JCglucosa1.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
                    
          
           if(!JCproteinas.getSelectedItem().equals("Seleccionar")){  
           Tabla10.addCell(new Paragraph("Proteinas",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla10.addCell(new Paragraph(JCproteinas.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
                    
           if(!JChemoglobina.getSelectedItem().equals("Seleccionar")){      
           Tabla10.addCell(new Paragraph("Hemoglobina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla10.addCell(new Paragraph(JChemoglobina.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
        
           if(!JCnitridos.getSelectedItem().equals("Seleccionar")){  
           Tabla10.addCell(new Paragraph("Nitritos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla10.addCell(new Paragraph(JCnitridos.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
               }
          
           if(!JCcuerposCe.getSelectedItem().equals("Seleccionar")){  
           Tabla10.addCell(new Paragraph("Cuerpos Cetonicos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla10.addCell(new Paragraph(JCcuerposCe.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
            
           if(!JCurobilinogeno1.getSelectedItem().equals("Seleccionar")){ 
           Tabla10.addCell(new Paragraph("Urobilinogeno",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla10.addCell(new Paragraph(JCurobilinogeno1.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
            if(!JCpigmentos.getSelectedItem().equals("Seleccionar")){ 
           Tabla10.addCell(new Paragraph("Pigmentos Biliares",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla10.addCell(new Paragraph(JCpigmentos.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
            
            if(!JCbilirrubina.getSelectedItem().equals("Seleccionar")){ 
           Tabla10.addCell(new Paragraph("Bilirrubina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla10.addCell(new Paragraph(JCbilirrubina.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
           
            
            
            
           PdfPTable Tabla11 = new PdfPTable(1); 
           Tabla11.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
           Tabla11.setWidthPercentage(100);  
           Tabla11.setWidths(medidaCeldas1);
           Tabla11.setHorizontalAlignment(Element.ALIGN_CENTER);
           Tabla11.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);

           Paragraph t11columna1 = new Paragraph("ANÁLISIS MICROSCÓPICO");
           t11columna1.getFont().setStyle(Font.BOLD);
           t11columna1.getFont().setSize(9);        
           t11columna1.setFont(Letra);
           t11columna1.setAlignment(Element.ALIGN_LEFT);
           Tabla11.addCell(t11columna1);
           
           
           
            PdfPTable Tabla12 = new PdfPTable(2); 
            Tabla12.setWidthPercentage(100);  
            Tabla12.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tabla12.setWidths(medidaCeldas8);
            Tabla12.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla12.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t12columna1 = new Paragraph("");
            t12columna1.getFont().setStyle(Font.BOLD);
            t12columna1.getFont().setSize(9);        
            t12columna1.setFont(Letra);
            t12columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla12.addCell(t12columna1);
     
                
            Paragraph t12columna2 = new Paragraph("");
            t12columna2.getFont().setStyle(Font.BOLD);
            t12columna2.getFont().setSize(9);        
            t12columna2.setFont(Letra);
            t12columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla12.addCell(t12columna2);

        
        
       
           if(!JCbacterias.getSelectedItem().equals("Seleccionar")){       
           Tabla12.addCell(new Paragraph("Bacterias",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla12.addCell(new Paragraph(JCbacterias.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
             }
                    
           if(!JCEP.getSelectedItem().equals("Seleccionar")){       
           Tabla12.addCell(new Paragraph("Celulas Epiteliales",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla12.addCell(new Paragraph(JCEP.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
             }
             
             
           if (!TxtLeucositos.getText().equals("")){
           Tabla12.addCell(new Paragraph("Leucocitos",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla12.addCell(new Paragraph(TxtLeucositos.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           if (!TxtHematies.getText().equals("")){
           Tabla12.addCell(new Paragraph("Hematies",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla12.addCell(new Paragraph(TxtHematies.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
           
           if (!TxtCelulasredondas.getText().equals("")){
           Tabla12.addCell(new Paragraph("Células Redondas",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla12.addCell(new Paragraph(TxtCelulasredondas.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           if (!TxtFilamentos.getSelectedItem().equals("Seleccionar")){ 
           Tabla12.addCell(new Paragraph("Filamentos de Mucina",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla12.addCell(new Paragraph(TxtFilamentos.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
                      
           if (!Txtcilindros.getText().equals("")){
           Tabla12.addCell(new Paragraph("Cilindros",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla12.addCell(new Paragraph(Txtcilindros.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
               
           if (!Txtcristales.getText().equals("")){
           Tabla12.addCell(new Paragraph("Cristales",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla12.addCell(new Paragraph(Txtcristales.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
           
            if(!  TXTfungicas.getText().equals("")){  
           Tabla12.addCell(new Paragraph("Formas Fungicas",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla12.addCell(new Paragraph(TXTfungicas.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }

           
           /**      ANALISIS DE HECES        **/
            
           
            PdfPTable Tabla13 = new PdfPTable(1); 
            Tabla13.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla13.setWidthPercentage(100);  

            Tabla13.setWidths(medidaCeldas1);
            Tabla13.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla13.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            
            
            Paragraph t13columna1 = new Paragraph("-----EXAMEN DE HECES-----");
            t13columna1.getFont().setStyle(Font.BOLD);
            t13columna1.getFont().setSize(9);        
            t13columna1.setFont(Letra);
            t13columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla13.addCell(t13columna1);
     

           
           
           
            PdfPTable Tabla14 = new PdfPTable(2); 
            Tabla14.setWidthPercentage(100);  
            Tabla14.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tabla14.setWidths(medidaCeldas8);
            Tabla14.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla14.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t14columna1 = new Paragraph();
            t14columna1.getFont().setStyle(Font.BOLD);
            t14columna1.getFont().setSize(9);        
            t14columna1.setFont(Letra);
            t14columna1.setAlignment(Element.ALIGN_CENTER);
            Tabla14.addCell(t14columna1);
     
                
            Paragraph t14columna2 = new Paragraph();
            t14columna2.getFont().setStyle(Font.BOLD);
            t14columna2.getFont().setSize(9);        
            t14columna2.setFont(Letra);
            t14columna2.setAlignment(Element.ALIGN_CENTER);
            Tabla14.addCell(t14columna2);

        
        
       
           if(!JCcolor4.getSelectedItem().equals("Seleccionar")){       
           Tabla14.addCell(new Paragraph("Color",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla14.addCell(new Paragraph(JCcolor4.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
            
           if(!JCAspect.getSelectedItem().equals("Seleccionar")){
           Tabla14.addCell(new Paragraph("Aspecto",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla14.addCell(new Paragraph(JCAspect.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL))); 
            }
            
           if(!JCconsistencia.getSelectedItem().equals("Seleccionar")){
           Tabla14.addCell(new Paragraph("Consistencia",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla14.addCell(new Paragraph(JCconsistencia.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
   }
           
           if(!JCrestos.getSelectedItem().equals("Seleccionar")){
           Tabla14.addCell(new Paragraph("Reacción",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla14.addCell(new Paragraph(JCreaccion1.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           if(!JCmoco.getSelectedItem().equals("Seleccionar")){
           Tabla14.addCell(new Paragraph("Moco",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla14.addCell(new Paragraph(JCmoco.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
            }
           
           if(!JCsangre1.getSelectedItem().equals("Seleccionar")){
           Tabla14.addCell(new Paragraph("Sangre",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla14.addCell(new Paragraph(JCsangre1.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           if(!JCrestos.getSelectedItem().equals("Seleccionar")){
           Tabla14.addCell(new Paragraph("Restos Alimenticios",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla14.addCell(new Paragraph(JCrestos.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           if(!Jolor.getSelectedItem().equals("Seleccionar")){
           Tabla14.addCell(new Paragraph("Olor",FontFactory.getFont("Arial",9,Font.NORMAL))); 
           Tabla14.addCell(new Paragraph(Jolor.getSelectedItem().toString(),FontFactory.getFont("Arial",9,Font.NORMAL)));
           }
           
           
            PdfPTable Tabla15 = new PdfPTable(1); 
            Tabla15.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla15.setWidthPercentage(100);  
            Tabla15.setWidths(medidaCeldas1);
            Tabla15.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla15.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
           
            
            
            if(!JtextMicroscopio.getText().equals("")){
            Paragraph t15columna1 = new Paragraph("EXAMEN MICROSCOPICO \n ");
            t15columna1.getFont().setStyle(Font.BOLD);
            t15columna1.getFont().setSize(9);        
            t15columna1.setFont(Letra);
            t15columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla15.addCell(t15columna1);
            Tabla15.addCell(new Paragraph(JtextMicroscopio.getText(),FontFactory.getFont("Arial",9,Font.NORMAL)));           
           
            }
           
           
           
           
           
           
           
           
           
           
           
           
                     
            PdfPTable Tablafirma = new PdfPTable(3); 
            Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            Tablafirma.setWidthPercentage(100);  
            float[] medidaCeldasP = {3f, 1f, 3f};
            Tablafirma.setWidths(medidaCeldasP);
            Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph tPcolumna1 = new Paragraph("\n\n\n\n  "+piepagina);
            tPcolumna1.getFont().setStyle(Font.BOLD);
            tPcolumna1.getFont().setSize(8);        
            tPcolumna1.setFont(Letra);
            tPcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna1);

                
            com.itextpdf.text.Image FirmaLcdo = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\dist\\imagen.bin");
            FirmaLcdo.setAlignment(Chunk.ALIGN_CENTER);
            Tablafirma.addCell(FirmaLcdo);

            Paragraph tPcolumna3 = new Paragraph("\n\n\n\n" + writer.getPageNumber()+ " Pág");
            tPcolumna3.getFont().setStyle(Font.BOLD);
            tPcolumna3.getFont().setSize(8);        
            tPcolumna3.setFont(Letra);
            tPcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tablafirma.addCell(tPcolumna3);
           


           knowaboutlcdo(); 
           PdfPTable TablafirmaLcdo = new PdfPTable(1); 
           TablafirmaLcdo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           TablafirmaLcdo.setWidthPercentage(100);  
           float[] medidaCeldasFirma = {20f};
           TablafirmaLcdo.setWidths(medidaCeldasFirma);
           TablafirmaLcdo.setHorizontalAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
           Paragraph tPcolumnaFirma1 = new Paragraph("________________ \n "+NameOfLcdo);
           tPcolumnaFirma1.getFont().setStyle(Font.BOLD);
           tPcolumnaFirma1.getFont().setSize(8);        
           tPcolumnaFirma1.setFont(Letra);
           tPcolumnaFirma1.setAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.addCell(tPcolumnaFirma1);

           
           
           
           
           
           
           
           
           
           
           
           
   
           
            saltolinea.add("\n");
            
            /*PRIMERA PAGINA*/
            
         
 
           
             /*BODY*/
             
            //HEMATOLOGIA
            if(!TxtLeucocitos.getText().equals("")||
               !TxtNeutrofilos.getText().equals("")||
               !TxtHematocrito.getText().equals("")||
               !TXtCHCM.getText().equals("")||
               !TxtLinfocitos.getText().equals("")||
               !TxtHemoglobina.getText().equals("")||
               !TxtVCM.getText().equals("")||
               !TxtPlaquetas.getText().equals("")
                    
                    ){
            doc.add(Tabla5);
            doc.add(saltolinea); 
            doc.add(Tabla2);
            doc.add(saltolinea);
           }
            
          if(!TXTGLICEMIA.getText().equals("") ||
                   !TXTPANDRIAL.getText().equals("") ||
                   !TXTUREA.getText().equals("") ||
                   !TXTCREATININA.getText().equals("") ||
                   !TXTACIDOURICO.getText().equals("") ||
                   !TXTCOLESTEROL.getText().equals("") ||
                   !TXTRIGLICERIDOS.getText().equals("") ||
                   !TXTHDL.getText().equals("") ||
                   !TXTLDL.getText().equals("") ||
                   !TXTVLDL.getText().equals("") ||
                   !TXTBILITOTAL.getText().equals("") ||
                   !TXTBILIDIRECTA.getText().equals("") ||
                   !TXTBILIINDIRECTA.getText().equals("") ||
                   !TXTPROTEINAS.getText().equals("") ||
                   !TXTALBUMINA.getText().equals("") ||
                   !TXTGLOBULINAS.getText().equals("") ||
                   !TXTRELACION.getText().equals("") ||
                   !TXTTGO.getText().equals("") ||
                   !TXTTGP.getText().equals("") ||
                   !TXTFOSFATA.getText().equals("") ||
                   !TXTCALCIO.getText().equals("") 
                
                   ){
            doc.add(Tablaquimica);
            doc.add(saltolinea);
            doc.add(Tablaquimica2);
            doc.add(saltolinea);
            }
            
            
     
          
          
          
          
            
            //---- SEGUNDA PAGINA
            
            if(JCheckppt.isSelected() || JSerologia.isSelected() || JEnzimatico.isSelected() || JSanguineo.isSelected() || JPcr.isSelected()){
            doc.newPage();
            
            
            
            //PERFIL ENZIMATICO
            if( !TXTLDH.getText().equals("") 
            ||!TXTAMILASA.getText().equals("") 
            ||!TXTGGT.getText().equals("") 
            ||!TXTLIPASA.getText().equals("") 
                    
                    ){
                
            doc.add(TablaEnzimatica);
            doc.add(saltolinea);
            doc.add(TablaEnzimatica1);
            doc.add(saltolinea);
            
            }
            
            
            
            //PTT 
            if(!TXTPROTROMBINA.getText().equals("") ||
            !TXTPARCIAL.getText().equals("") ||
            !TXTVSG.getText().equals("") 
                    ){
            doc.add(Tabla1);
            doc.add(saltolinea);
            doc.add(TablaPt);
            doc.add(saltolinea);
                }
            
            
            
           //GRUPO SANGUINEO
            if(!TXTSANGUINEO.getText().equals("") || !TXTRH.getText().equals("")){
             doc.add(TablaGsanguineo);
             doc.add(TablaGrupo);
             doc.add(TablaGrupo2);
             doc.add(saltolinea);
            }
            
            

            
         //SEROLOGIA
             if(!TXTHLV.getSelectedItem().equals("Seleccionar")){  

            doc.add(Tabla3);
            doc.add(Tabla4);
            //doc.add(saltolinea);
            Paragraph mensajeSensibilidad = new Paragraph(
            "ESTA PRUEBA TIENE UNA SENSIBILIDAD DE APROXIMADAMENTE 99% LO QUE QUIERE DECIR " +
            "QUE DE CADA 100 PACIENTES, 1 SERÁ FALSO NEGATIVO. SI USTED SOSPECHA DE PADECER EL VIRUS " +
            "Y OBTUVO UN RESULTADO NEGATIVO, SE RECOMIENDA REPETIR LA PRUEBA LUEGO DE MÍNIMO UNA SEMANA " +
            "O EN SU DEFECTO REALIZAR UNA PRUEBA MÁS ESPECÍFICA COMO EL ELISA DE 4ta GENERACIÓN O WESTERN BLOT"
            );

            // Establece las propiedades de formato y alineación del párrafo
           mensajeSensibilidad.getFont().setSize(7);
           mensajeSensibilidad.setAlignment(Element.ALIGN_JUSTIFIED);

          // Agrega el mensaje de sensibilidad al documento
          doc.add(mensajeSensibilidad);
          doc.add(saltolinea);

           }
             
         else  if(!TXTVDRL.getSelectedItem().toString().equals("Seleccionar") 
                     || !TXTREACTIVA.getText().equals("") 
                     || !TXTASTRO.getText().equals("")
                     || !TXTrematoideo.getText().equals("")
                     || !JCPruebasangre.getSelectedItem().equals("Seleccionar")
                     ){
             
            doc.add(Tabla3);
            doc.add(Tabla4);
            doc.add(saltolinea);
             
             }
            
            
             

        
     
            if(!TXTPCR.getText().equals("")){
            doc.add(TablaPCR0);
            doc.add(saltolinea);
            doc.add(TablaPCR1);
            doc.add(saltolinea);
            }
            
            

            
            
            
            
              }
            
            
            //TERCERA PAGINA
            
           if(JcheckUro.isSelected()==true || JcheckCopro.isSelected()==true )
             
             {
            doc.newPage();
            if(JcheckUro.isSelected()==true && JcheckCopro.isSelected()==true ){
 
            doc.add(Tabla7);
            doc.add(Tablatitle);
            doc.add(Tabla8);
            doc.add(Tabla9);
            doc.add(Tabla10);
            doc.add(Tabla11);
            doc.add(Tabla12);
            
            doc.add(saltolinea);
            doc.add(Tabla13);
            doc.add(Tabla14);
            doc.add(Tabla15);
            doc.add(saltolinea);
                            

             }
             
             
                
            else if(JcheckUro.isSelected()==true){
            doc.add(Tabla7);
            doc.add(Tablatitle);
            doc.add(Tabla8);
            doc.add(Tabla9);
            doc.add(Tabla10);
            doc.add(Tabla11);
            doc.add(Tabla12);
            doc.add(saltolinea);

             
        

             
             }
             
              else if(JcheckCopro.isSelected()==true){
         
       
            doc.add(Tablatitle);
            doc.add(Tabla13);
            doc.add(Tabla14);
            doc.add(Tabla15);
            doc.add(saltolinea);
        
             

             
             }
            
             }
            
            
            
            
            
            
            /*FOOTER
      
            doc.add(saltolinea);
            doc.add(Tablafirma);
            doc.add(TablafirmaLcdo);
            */
            
            
  
            
            doc.close();
            archivo.close();
        //  Desktop.getDesktop().open(file);
            
            
        } catch (DocumentException | IOException e) {
           System.out.println(e);
           JOptionPane.showMessageDialog(null, "NO SE CONSIGUE LA CARPETA FUNDAGINEBRA EN DISCO C", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
     







     
              
public class HeaderFooterPageEvent extends PdfPageEventHelper {

    public void onStartPage(PdfWriter writer, Document document) {
        try {
            
            String Paciente=TXTPnombre.getText()+ " "+ TXTPapellido.getText(); 
            String fechaN = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts1= fechaN.split("/");
            String an1 = dateParts1[0];
            String mes1 = dateParts1[1];
            String dia1 = dateParts1[2];
            
            
            String an_actual = Validar.fecha_actual();
            String mes_actual = Validar.fecha_mes();
            String dia_actual = Validar.fecha_dia();
            

            
            int diferenciadia=Integer.parseInt(dia_actual)- Integer.parseInt(dia1);
            int diferenciames=Integer.parseInt(mes_actual)- Integer.parseInt(mes1);
            int diferencian=Integer.parseInt(an_actual)- Integer.parseInt(an1);;

            if (diferenciames < 0 || (diferenciames == 0 && diferenciadia < 0)) {
            diferencian = diferencian - 1;}
            
            
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            
      

            Paragraph fecha = new Paragraph();
    //      Font negrita = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
            fecha.add(Chunk.NEWLINE);
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
            String Hora = Menu.Time.getText()+" "+Menu.jLabel102.getText();
            
            
            BaseFont BF2 = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
          

            PdfContentByte cb = writer.getDirectContent();
            cb.beginText();
            cb.setFontAndSize(BF2, 12);

          // Ajustar el espacio entre el encabezado y el cuerpo (por ejemplo, margen superior de 50)
           

          com.itextpdf.text.Image imagen = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\src\\imagenes\\Fundacionlogo1.png");
          imagen.setAbsolutePosition(50, 750);  // Ajusta la posición de la imagen según tus necesidades
          imagen.scaleToFit(110, 110);  // Ajusta el tamaño de la imagen según tus necesidades
          cb.addImage(imagen);
          
          
            cb.setFontAndSize(BF2, 12);
            cb.setTextMatrix(200, 800);
            cb.showText(empresa);
            cb.setFontAndSize(BF, 10);
            cb.setTextMatrix(260, 790);
            cb.showText(rif);
            
            
            if(fechaEstudio==null){ 
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 780);
            cb.showText("FECHA: "+ Fecha);
            
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 770);
            cb.showText("HORA: "+ Hora);    
            
         
            }
            
            else if( !fechaEstudio.equals(Fecha)){          
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 770);
            cb.showText("FECHA: "+ fechaEstudio);
      
            }
            
            else{
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 780);
            cb.showText("FECHA: "+ Fecha);
            
            cb.setFontAndSize(BF2, 10);
            cb.setTextMatrix(460, 770);
            cb.showText("HORA: "+ Hora);
      
            }
            
            
            
            
            
            
            if(!Factura.equals("")){
            cb.setFontAndSize(BF2, 8);
            cb.setTextMatrix(460, 760);
            cb.showText("FACTURA: #"+ Factura);
            }


            
            cb.setFontAndSize(BF2, 8);
            cb.setTextMatrix(235, 740);
            cb.showText(ubicacion);
          
            cb.setFontAndSize(BF2, 8);
            cb.setTextMatrix(210, 730);
            cb.showText(telefonos); 
            cb.setTextMatrix(168, 725);
            cb.showText("__________________________________________________________________");

            cb.endText();

            
            
       
            
     
            // ... Continúa con el resto del contenido

            
            PdfPTable Tabla = new PdfPTable(3); 
            Tabla.setTotalWidth(document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin()); 
           
            float[] medidaCeldas = {1f, 3f, 1f };
            Tabla.setWidths(medidaCeldas);
            Tabla.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            if(order>0){
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid+" | "+ order);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1);
            }
            else{
            Paragraph tcolumna1 = new Paragraph("N° ORDEN: "+Maxid);
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna1); 
            }
     
                
            Paragraph tcolumna2 = new Paragraph("RESULTADOS DEL ANÁLISIS");
            tcolumna2.getFont().setStyle(Font.BOLD);
            tcolumna2.getFont().setSize(12);        
            tcolumna2.setFont(Letra);
            tcolumna2.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna2);

            Paragraph tcolumna3 = new Paragraph("N° DE PACIENTE: " +IdPaciente+" ");
            tcolumna3.getFont().setStyle(Font.BOLD);
            tcolumna3.getFont().setSize(8);        
            tcolumna3.setFont(Letra);
            tcolumna3.setAlignment(Element.ALIGN_CENTER);
            Tabla.addCell(tcolumna3);
            
            
            PdfPTable Tabla0 = new PdfPTable(4); 
            Tabla0.getDefaultCell().setBorder(Rectangle.LEFT | Rectangle.RIGHT | Rectangle.BOTTOM);
            // Tabla0.SetBorderBottomLeftRadius(new BorderRadius(4f)); // No border is drawn
            Tabla0.setTotalWidth(document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin()); 
            float[] medidaCeldas0 = {3f, 2f, 1f,2f};
            Tabla0.setWidths(medidaCeldas0);
            Tabla0.setHorizontalAlignment(Element.ALIGN_CENTER);
            Tabla0.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph t0columna1 = new Paragraph("PACIENTE: "+ Paciente);
            t0columna1.getFont().setStyle(Font.BOLD);
            t0columna1.getFont().setSize(8);        
            t0columna1.setFont(Letra);
            t0columna1.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna1);
     
                
            Paragraph t0columna2 = new Paragraph("CÉDULA: "+TXTPcedula.getText());
            t0columna2.getFont().setStyle(Font.BOLD);
            t0columna2.getFont().setSize(8);        
            t0columna2.setFont(Letra);
            t0columna2.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna2);

            Paragraph t0columna3 = new Paragraph("EDAD:" +Integer.toString(diferencian) + " años");
            t0columna3.getFont().setStyle(Font.BOLD);
            t0columna3.getFont().setSize(8);        
            t0columna3.setFont(Letra);
            t0columna3.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna3);
        
            Paragraph t0columna4 = new Paragraph("SEXO: "+ Sexo);
            t0columna4.getFont().setStyle(Font.BOLD);
            t0columna4.getFont().setSize(8);        
            t0columna4.setFont(Letra);
            t0columna4.setAlignment(Element.ALIGN_LEFT);
            Tabla0.addCell(t0columna4);
            
            
            
            
               float footerHeight = 580;
               float footerHeight0 = 563;
   
            
            
            Tabla.writeSelectedRows(0, -1, document.leftMargin(), document.bottom() + footerHeight, writer.getDirectContent());
            Tabla0.writeSelectedRows(0, -1, document.leftMargin(), document.bottom() + footerHeight0, writer.getDirectContent());
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}     
        
           
           
           
           
        PdfPageEventHelper eventHelper = new PdfPageEventHelper() {
        public void onEndPage(PdfWriter writer, Document document) {
        
  knowaboutlcdo();    
    try {

            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
     
          

           
           PdfPTable TablafirmaLcdo = new PdfPTable(1); 
           TablafirmaLcdo.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
           TablafirmaLcdo.setWidthPercentage(100);  
           float[] medidaCeldasFirma = {20f};
           TablafirmaLcdo.setWidths(medidaCeldasFirma);
           TablafirmaLcdo.setHorizontalAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
           Paragraph tPcolumnaFirma1 = new Paragraph("________________ \n "+NameOfLcdo);
           tPcolumnaFirma1.getFont().setStyle(Font.BOLD);
           tPcolumnaFirma1.getFont().setSize(8);        
           tPcolumnaFirma1.setFont(Letra);
           tPcolumnaFirma1.setAlignment(Element.ALIGN_CENTER);
           TablafirmaLcdo.addCell(tPcolumnaFirma1);

            
            
            
          PdfPTable Tablafirma = new PdfPTable(3); 
          Tablafirma.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
          Tablafirma.setWidthPercentage(100);  
          float[] medidaCeldasP = {3f, 1f, 3f };
          Tablafirma.setWidths(medidaCeldasP);
          Tablafirma.setHorizontalAlignment(Element.ALIGN_CENTER);
          Tablafirma.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        
          
          
          if(!entradaTexto.equals("") && entradaTexto.length()<=250 ){
         
         Paragraph tPcolumna1 = new Paragraph("\n\n" + entradaTexto);
         tPcolumna1.getFont().setStyle(Font.NORMAL);
         tPcolumna1.getFont().setSize(8);
         tPcolumna1.setFont(Letra);
         tPcolumna1.setAlignment(Element.ALIGN_CENTER);


         Tablafirma.addCell(tPcolumna1);
       
         }
            
          
          else{
          
          Paragraph tPcolumna1 = new Paragraph("\n\n\n\n\n "+piepagina);
          tPcolumna1.getFont().setStyle(Font.BOLD);
          tPcolumna1.getFont().setSize(8);        
          tPcolumna1.setFont(Letra);
          tPcolumna1.setAlignment(Element.ALIGN_CENTER);
          Tablafirma.addCell(tPcolumna1);
          
          }
          
            
            
         com.itextpdf.text.Image FirmaLcdo = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\dist\\imagen.bin");
         FirmaLcdo.setAlignment(Chunk.ALIGN_CENTER);
         Tablafirma.addCell(FirmaLcdo);
   

         

            
            
            
            
            
            
        Paragraph tPcolumna3 = new Paragraph( "\n\n\n\n\n" + writer.getPageNumber()+ " Pág");
        tPcolumna3.getFont().setStyle(Font.BOLD);
        tPcolumna3.getFont().setSize(8);        
        tPcolumna3.setFont(Letra);
        tPcolumna3.setAlignment(Element.ALIGN_CENTER);
        Tablafirma.addCell(tPcolumna3); 
             

     
        Tablafirma.setTotalWidth(527);
        Tablafirma.setLockedWidth(false);
        Tablafirma.getDefaultCell().setFixedHeight(40);
        Tablafirma.getDefaultCell().setBorder(Rectangle.TOP);
        Tablafirma.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);
        
        TablafirmaLcdo.setTotalWidth(527);
        TablafirmaLcdo.setLockedWidth(false);
        TablafirmaLcdo.getDefaultCell().setFixedHeight(40);
        TablafirmaLcdo.getDefaultCell().setBorder(Rectangle.TOP);
        TablafirmaLcdo.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);
        
        // write page
        PdfContentByte canvas = writer.getDirectContent();
        canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
        

        Tablafirma.writeSelectedRows(0, -1, 34, 120, canvas);
        TablafirmaLcdo.writeSelectedRows(0, -1, 34, 80, canvas);
        
        canvas.endMarkedContentSequence();
    } catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    } catch (IOException ex) {
                Logger.getLogger(JPerfilrutina.class.getName()).log(Level.SEVERE, null, ex);
            }}
    };   
            
     
     
     
     
     
     
     
        
        
        
        

        
        
        
        
        
        
        
 String NameOfLcdo, Consultanlcdo;
     
     public void knowaboutlcdo(){
     
    Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null; 
         
         
         try{
         
       String query="Select FirmaLcdo from tableinfo where idinfo=? ";
       
       con = EnlaceBd.getConnection();
       ps = con.prepareStatement(query);
       ps.setInt(1, 1);
       rs=ps.executeQuery();
         
        if(rs.next()){
       Consultanlcdo= rs.getString("FirmaLcdo");
      
       if(!Consultanlcdo.equals("")){NameOfLcdo="Lcdo/a "+ Consultanlcdo;}
       else{NameOfLcdo="";}
       
       
         }

         }catch(Exception e){ System.out.println(e);}finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
     }

     
     
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    /*
         
            private void addHeader(PdfWriter writer){
   
                
                
                PdfPTable footer = new PdfPTable(1);
    try {

        footer.setWidths(new int[]{100});
        footer.setTotalWidth(527);
        footer.setLockedWidth(false);
        footer.getDefaultCell().setFixedHeight(40);
        footer.getDefaultCell().setBorder(Rectangle.TOP);
        footer.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);

        // add current page count
        footer.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
        footer.addCell(new Phrase(String.format("@Fundaginebra                                              |    www.fundaginebra.org    |                                            "+ writer.getPageNumber()+ " | Pág") , new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));

        // write page
        PdfContentByte canvas = writer.getDirectContent();
        canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
        footer.writeSelectedRows(0, -1, 34, 50, canvas);
        canvas.endMarkedContentSequence();
    } catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    }
}
         
         
 
   
   
   
   
   */
   
   
   
         
     
 public void Callpacient() {  
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    String Cedula = TXTPcedula.getText().trim();  // Usar trim para eliminar espacios extra.

    // Validación temprana de la cédula antes de hacer la consulta
    if (Cedula.isEmpty() || Cedula.equals("V-")) {
        JOptionPane.showMessageDialog(null, "EL CAMPO CÉDULA NO PUEDE ESTAR VACIO Y DEBE LLEVAR V-", "CAMPO VACIO", JOptionPane.WARNING_MESSAGE);
        return; // Salir si la cédula es inválida
    }
    
    try {
        // Primera consulta para obtener IdPaciente
        String query = "SELECT Idpaciente FROM table_paciente WHERE Cedula = ?";
        con = cn.getConnection();
        ps = con.prepareStatement(query);
        ps.setString(1, Cedula);
        rs = ps.executeQuery();
        
        if (rs.next()) { // Si se encuentra el paciente
            IdPaciente = rs.getInt("Idpaciente");
            IdPacientess.setText(Integer.toString(IdPaciente));

            // Segunda consulta para obtener los detalles del paciente
            String sql2 = "SELECT Nombre, Apellido, Cedula, Telefono, Correo, Direccion, Sexo, date_format(FechNacimiento, '%d/%m/%Y') AS Fecha FROM table_paciente WHERE Idpaciente = ?";
            ps = con.prepareStatement(sql2);
            ps.setInt(1, IdPaciente);
            rs = ps.executeQuery();

            if (rs.next()) { // Si se obtienen los detalles del paciente
                String nombre = rs.getString("Nombre");
                String apellido = rs.getString("Apellido");
                String telefono = rs.getString("Telefono");
                String correo = rs.getString("Correo");
                String direccion = rs.getString("Direccion");
                Sexo = rs.getString("Sexo");
                String nacimiento = rs.getString("Fecha");

                // Asignar valores a los campos
                TXTPnombre.setText(nombre);
                TXTPapellido.setText(apellido);
                TXTPcorreo.setText(correo);
                TXTPtelefono.setText(telefono);
                TXTPdireccion.setText(direccion);
                
                // Selección de sexo
                if (Sexo.equals("Femenino")) {
                    JRfemenino.setSelected(true);
                    JRMasculino.setSelected(false);
                } else if (Sexo.equals("Masculino")) {
                    JRMasculino.setSelected(true);
                    JRfemenino.setSelected(false);
                }
                
                // Convertir fecha de nacimiento
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                FechaNacimiento.setDate(formato.parse(nacimiento));

                JPregistro.setVisible(true);  // Mostrar panel de registro
                TXTPcedula.setEnabled(false); // Desactivar el campo de cédula
            }
        } else {  // Si no se encuentra el paciente
            int option = JOptionPane.showConfirmDialog(rootPane, "El paciente no se encuentra registrado. ¿Desea registrarlo?", 
                                                        "Registro Paciente", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                goToRegister();  // Ir al formulario de registro
            } else {
                BtnAgregar.setVisible(false);  // Ocultar el botón de agregar
                TXTPcedula.setEnabled(true);   // Rehabilitar campo de cédula
                BtnSearch.setEnabled(true);    // Habilitar búsqueda
            }
        }
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}
     
       public void goToRegister(){
  
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       JPacientes pac = new JPacientes();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(pac);
       pac.setClosable(true);
       pac.setIconifiable(true);
       
        try {
            pac.setMaximum(true);
        } catch (Exception e) {
        }
        pac.toFront();
        pac.setVisible(true);

   }
     
     
     
     public void AgregarPaciente(){                                             
    
    Connection con;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps;
    ResultSet rs;
    

          try {

              
                    
        java.sql.Date fechaU;
        Date dateU = FechaNacimiento.getDate();
        long dU = dateU.getTime();
        fechaU = new java.sql.Date(dU);
        
        
        
            String fecha = new SimpleDateFormat("yyyy/MM/dd").format(FechaNacimiento.getDate());
            String [] dateParts= fecha.split("/");
            String an = dateParts[0];
            String mes = dateParts[1];
            String dia = dateParts[2];
            String an_actual = Validar.fecha_actual();

            int edad;
            edad= Integer.parseInt(an_actual)-Integer.parseInt(an);
        
        
        
        
              
              
            String sql = "INSERT INTO table_paciente (Nombre, Apellido, Cedula,Telefono,Correo,Direccion, Sexo, FechNacimiento, edad) VALUES (?,?,?,?,?,?,?,?,?)";
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
      
            ps.setString(1, TXTPnombre.getText());
            ps.setString(2, TXTPapellido.getText());
            ps.setString(3, TXTPcedula.getText());
            ps.setString(4, TXTPtelefono.getText());
            ps.setString(5, TXTPcorreo.getText());
            ps.setString(6, TXTPdireccion.getText());
            ps.setString(7, Sexo);
            ps.setDate(8, fechaU);
            ps.setInt(9, edad);
            ps.execute();
  
            
            
  JOptionPane.showMessageDialog(null, "EL PACIENTE HA SIDO REGISTRADO","REGISTRO DE PACIENTES", 1);
        } catch (Exception e) {
      
            JOptionPane.showMessageDialog(null, e);
        }


      
          
          
    } 
     

    
    public void guardar_pdf(int codigo, int idexamen, int idpaciente, int idusuario, String Fecha, File ruta) {
        
        
   
        
        PdfDAO1 pa = new PdfDAO1();
        PdfVO po = new PdfVO();
        po.setCodigopdf(codigo);
        po.setIdexamen(idexamen);
        po.setIdpaciente(idpaciente);
        po.setIdusuario(idusuario);
        po.setFecha(Fecha);
        
        try {
            byte[] pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
            po.setArchivopdf(pdf);
        } catch (IOException ex) {
            po.setArchivopdf(null);
            System.out.println("Error al agregar archivo pdf "+ex.getMessage());
        }
        pa.Agregar_PdfVO(po);
    }

   
    
    public void guardarReporte()
    {

      
        ruta_archivo="C://Fundaginebra//Reportes//"+PdfNames+".pdf";
        int idexamen = 1000;
        int idpaciente= Integer.parseInt(IdPacientess.getText());

        String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
        sql s = new sql();
        
        int codigo = s.auto_increment("SELECT MAX(codigopdf) FROM table_laboratorio;");
        File ruta = new File(ruta_archivo);
       
        
        
        
        if ( ruta_archivo.trim().length() != 0) {
            guardar_pdf(codigo, idexamen, idpaciente, idusuario, Fecha, ruta);
 
         //   tpdf.visualizar_PdfVO(tabla);
            ruta_archivo = "";
           // activa_boton(false, false, false);
  
        } else {
            JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
        }
    
    }
     /*
         public void seleccionar_pdf() {
        JFileChooser j = new JFileChooser();
        FileNameExtensionFilter fi = new FileNameExtensionFilter("pdf", "pdf");
        j.setFileFilter(fi);
        int se = j.showOpenDialog(this);
        if (se == 0) {
            this.btnseleccionar.setText("" + j.getSelectedFile().getName());
            ruta_archivo = j.getSelectedFile().getAbsolutePath();

        } else {
        }
    }
*/
     
     
     
     
     
     
     
     
     
     
     
     
     
          public void ActivarCampos() {
   
                 TXTPnombre.setEditable(true);
                 TXTPapellido.setEditable(true);
                 TXTPcorreo.setEditable(true);
                 TXTPtelefono.setEditable(true);
                 TXTPdireccion.setEditable(true);
                 JRMasculino.setEnabled(true);
                 JRfemenino.setEnabled(true);
                 FechaNacimiento.setEnabled(true);
                 BtnAgregar.setEnabled(true);
                 BtnAgregar.setVisible(true);
                
                 
       
           
    }
    
                
    public void limpiarCamposNoregistro() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true); 
      FechaNacimiento.setCalendar(null);
    }  
    
       
                   public void DesactivarCampos() {
   
                 TXTPnombre.setEditable(false);
                 TXTPapellido.setEditable(false);
                 TXTPcorreo.setEditable(false);
                 TXTPtelefono.setEditable(false);
                 TXTPdireccion.setEditable(false);
                 JRMasculino.setEnabled(false);
                 JRfemenino.setEnabled(false);
                 FechaNacimiento.setEnabled(false);
                 BtnAgregar.setEnabled(false);
               
       
           
    }
     
     
     
     
     
     

    String Sexo;
    int IdPaciente;
    
    
    public void limpiarCampos() {
      TXTPnombre.setText("");
      TXTPapellido.setText("");
      TXTPcedula.setText("V-");
      TXTPcorreo.setText("");
      TXTPtelefono.setText("");
      TXTPdireccion.setText("");
      JRMasculino.setSelected(true);
      JRfemenino.setSelected(false);
      Sexo="Masculino";
      BtnAgregar.setEnabled(true);  
      FechaNacimiento.setCalendar(null);
    }
    
    
        
        void limpiarTabla() {
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i);
            i = i - 1;
        }
    }
        
        
   
        

   int Maxid;
   public void MaxIdestudios() {
   Connection con=null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs=null;
    
   
       try {

            String sql = "SELECT MAX(COdigopdf) from table_laboratorio ";
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
            Maxid= rs.getInt("MAX(codigopdf)")+1;
        
            }
            
          
            

        } catch (Exception e) { JOptionPane.showMessageDialog(null, e);}
     
     finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
     
     
     }
    
     
           public void cancelarexamen() 
        
        {
        
        
              jButton34.setEnabled(true);
        
              TxtNeutrofilos.setText("");
              TxtHemoglobina.setText("");
              TxtHematocrito.setText("");
              TxtVCM.setText("");
              TXtCHCM.setText("");
              TxtLinfocitos.setText("");
              TxtLeucocitos.setText("");
              TxtPlaquetas.setText("");
              TxtEosinofilos.setText("");
              TxtMonocitos.setText("");
              TxtBasofilo.setText("");  
            
              
              
              
              
                    TXTGLICEMIA.setText("");
                    TXTUREA.setText("");
                    TXTCREATININA.setText("");
                    TXTACIDOURICO.setText("");
                    TXTCOLESTEROL.setText("");
                    TXTRIGLICERIDOS.setText("");
                    TXTHDL.setText("");
                    TXTLDL.setText("");
                    TXTVLDL.setText("");
                    TXTBILITOTAL.setText("");
                    TXTBILIDIRECTA.setText("");
                    TXTBILIINDIRECTA.setText("");
                    TXTPROTEINAS.setText("");
                    TXTALBUMINA.setText("");
                    TXTGLOBULINAS.setText("");
                    TXTRELACION.setText("");
                    TXTTGO.setText("");
                    TXTTGP.setText("");
                    TXTCALCIO.setText("");
                    TXTFOSFATA.setText("");
                   
                    
                  
                    
                    TxtOlor1.setText("");
                    TxtDensidad.setText("");
                    TxtLeucositos.setText("");
                    TxtHematies.setText("");
                    TxtCelulasredondas.setText("");
                    TxtFilamentos.setSelectedItem("Seleccionar");
                    JtextMicroscopio.setText("");
                    TXTPROTROMBINA.setText("");
                    TXTPARCIAL.setText("");
                    TXTVSG.setText("");
                    TXTVDRL.setSelectedItem("Seleccionar");
                    TXTHLV.setSelectedItem("Seleccionar");
                    TXTPANDRIAL.setText("");
                    JtextISIS.setText("");
                    
                    
                    JcheckUro.setSelected(false);
                    JcheckCopro.setSelected(false);
                    JCheckppt.setSelected(false);
                    JSerologia.setSelected(false);
                    JEnzimatico.setSelected(false);
                    JSanguineo.setSelected(false);
                    JPcr.setSelected(false);
                    
                TXTLDH.setText("");
                TXTAMILASA.setText("");
                TXTGGT.setText("");
                TXTLIPASA.setText("");
                Txtcilindros.setText("");
                Txtcristales.setText("");
                JtextINR.setText("");
                TXTFOSFORO.setText("");
                TXTSANGUINEO.setText("");
                TXTRH.setText("");
                TXTMAGNESIO.setText("");
                
                TXTPCR.setText("");
                TXTPCR1.setText("0 - 6");
                
                
                
                TXTrematoideo.setText("");
                TXTREACTIVA.setText("");
                TXTASTRO.setText("");
                JCPruebasangre.setSelectedItem("Seleccionar");
                TxtObservacion.setText("");
                TXTfungicas.setText("");
                JObserva.setSelected(false);
                entradaTexto="";
                texto.setText("");
                JObserva.setSelected(false);
                
                
           TXTGLICEMIA.setBackground(Color.WHITE);
           TXTPANDRIAL.setBackground(Color.WHITE);
           TXTUREA.setBackground(Color.WHITE);
           TXTCREATININA.setBackground(Color.WHITE);
           TXTACIDOURICO.setBackground(Color.WHITE);
           TXTCOLESTEROL.setBackground(Color.WHITE);
           TXTRIGLICERIDOS.setBackground(Color.WHITE);
           TXTHDL.setBackground(Color.WHITE);
           TXTLDL.setBackground(Color.WHITE);
           TXTVLDL.setBackground(Color.WHITE);
           TXTBILITOTAL.setBackground(Color.WHITE);
           TXTBILIDIRECTA.setBackground(Color.WHITE);
           TXTBILIINDIRECTA.setBackground(Color.WHITE);
           TXTPROTEINAS.setBackground(Color.WHITE);
           TXTALBUMINA.setBackground(Color.WHITE);
           TXTGLOBULINAS.setBackground(Color.WHITE);
           TXTRELACION.setBackground(Color.WHITE);
           TXTTGO.setBackground(Color.WHITE);
           TXTTGP.setBackground(Color.WHITE);
           TXTGGT.setBackground(Color.WHITE);
           TXTFOSFATA.setBackground(Color.WHITE);
           TXTLDH.setBackground(Color.WHITE);
           TXTAMILASA.setBackground(Color.WHITE);
           TXTLIPASA.setBackground(Color.WHITE);
           TXTCALCIO.setBackground(Color.WHITE);
           TXTFOSFORO.setBackground(Color.WHITE);
           TXTMAGNESIO.setBackground(Color.WHITE);

           TxtLeucocitos.setBackground(Color.WHITE);
           TxtLinfocitos.setBackground(Color.WHITE);
           TxtNeutrofilos.setBackground(Color.WHITE);
           TxtHemoglobina.setBackground(Color.WHITE);
           TxtHematocrito.setBackground(Color.WHITE);
           TxtVCM.setBackground(Color.WHITE);
           TXtCHCM.setBackground(Color.WHITE);
           TxtPlaquetas.setBackground(Color.WHITE);
           TxtEosinofilos.setBackground(Color.WHITE);
           TxtMonocitos.setBackground(Color.WHITE);
           TxtBasofilo.setBackground(Color.WHITE);    
           
           TXTLDH.setBackground(Color.WHITE); 
           TXTGGT.setBackground(Color.WHITE); 
           TXTAMILASA.setBackground(Color.WHITE); 
           TXTLIPASA.setBackground(Color.WHITE); 
           
           TXTPCR.setBackground(Color.WHITE); 
           

           
           
        }
           
         
           
           
           public void ActualizarReferencia()   {
                   try{
                   actualizarefHema();
                   actualizarRefQui();
                   actualizarPefilEn();
                   JOptionPane.showMessageDialog(null, "LOS VALORES REFENCIALES HAN SIDO MODIFICADOS", "VALORES REFENCIALES", 1);
                   }catch(Exception e){System.out.println(e);}
                  }
           
           
           
           
           public void actualizarefHema(){
           
             Connection con=null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps=null;
        ResultSet rs=null;

        try {
            String sql = "update refencia_hematologia set Leucocitos=?,Linfocitos=?,Neutrofilos=?,Hemoglobina=?,Hematocrito=?,VCM=?,CHCM=?,Plaquetas=?, Eosinofilos=?, Monocitos=?, Basofilo=?  " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, TxtLeucocitos1.getText());
            ps.setString(2, TxtLinfocitos1.getText());
            ps.setString(3, TxtNeutrofilos1.getText());
            ps.setString(4, TxtHemoglobina1.getText());
            ps.setString(5, TxtHematocrito1.getText());
            ps.setString(6, TxtVCM1.getText());
            ps.setString(7, TXtCHCM1.getText());
            ps.setString(8, TxtPlaquetas1.getText());
            ps.setString(9, TxtEosinofilos1.getText());
            ps.setString(10, TxtMonocitos1.getText());
            ps.setString(11, TxtBasofilo1.getText());
            int res = ps.executeUpdate();
            
        } catch (Exception e) {
            System.out.println(e);
        }
    finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
           
           
            }
           
           
           
           
           
        public void actualizarRefQui(){
        Connection con=null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps=null;
        ResultSet rs=null;
        
               try {
   String sql = "UPDATE referencia_qumicasanguinea SET GLICEMIA=?, UREA=?, CREATININA=?, ACIDO_URICO=?,COLESTEROL=?, TRIGLICERIDOS=?, HDL=?,LDL=?,VLDL=?,BILITOTAL=?,BILIDIRECTA=?,BILIINDIRECTA=?,PROTEINAS_TOTALES=?,ALBUMINA=?,GLOBULINAS=?,RELACION=?,TGO=?,TGP=?,CALCIO=?,FOSFATASA=?, GLICEMIAPANDRIAL=?, MAGNESIO=?";    
                    

            
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, TXTGLICEMIA1.getText());
            ps.setString(2, TXTUREA1.getText());
            ps.setString(3, TXTCREATININA1.getText());
            ps.setString(4, TXTACIDOURICO1.getText());
            ps.setString(5, TXTCOLESTEROL1.getText());
            ps.setString(6, TXTRIGLICERIDOS1.getText());
            ps.setString(7, TXTHDL1.getText());
            ps.setString(8, TXTLDL1.getText());
            
            ps.setString(9, TXTVLDL1.getText());
            ps.setString(10, TXTBILITOTAL1.getText());
            ps.setString(11, TXTBILIDIRECTA1.getText());
            ps.setString(12, TXTBILIINDIRECTA1.getText());
            ps.setString(13, TXTPROTEINAS1.getText());
            ps.setString(14, TXTALBUMINA1.getText());
            ps.setString(15, TXTGLOBULINAS1.getText());
            ps.setString(16, TXTRELACION1.getText());
            
            ps.setString(17, TXTTGO1.getText());
            ps.setString(18, TXTTGP1.getText());
            ps.setString(19, TXTCALCIO1.getText());
            ps.setString(20, TXTFOSFATA1.getText());
            ps.setString(21, TXTPANDRIAL1.getText());
            ps.setString(22, TXTMAGNESIO1.getText());
            
            
            
            
            ps.executeUpdate();

         
        } catch (Exception e) {
            System.out.println(e);
        }
finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }}
           
             
         public void  actualizarPefilEn(){
           
        Connection con=null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps=null;
        ResultSet rs=null;
        
        try {
            String sql = "update referencia_enzimas set LDH=?,GGT=?,GGTM=?,AMILASA=?,LIPASA=? " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, TXTLDH1.getText());
            ps.setString(2, TXTHGGT1.getText());
            ps.setString(3, TXTMGGT1.getText());
            ps.setString(4, TXTAMILASA1.getText());
            ps.setString(5, TXTLIPASA1.getText());

             ps.executeUpdate();

           
        } catch (Exception e) {
            System.out.println(e);
        }

        
finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
           
           }
               
            
           
           
           
           
 
        
          public void CallReferencia() {
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
         
        try {

              String sql = "select * from refencia_hematologia";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                String info0 = rs.getString("Leucocitos");
                String info1 = rs.getString("Linfocitos");
                String info2 = rs.getString("Neutrofilos");
                String info3 = rs.getString("Hemoglobina");
                String info4 = rs.getString("Hematocrito");
                String info5 = rs.getString("VCM");
                String info6 = rs.getString("CHCM");
                String info7 = rs.getString("Plaquetas");
                String info8 = rs.getString("Eosinofilos");
                String info9 = rs.getString("Monocitos");
                String info10 = rs.getString("Basofilo");
                
         TxtLeucocitos1.setText(info0); 
         TxtLinfocitos1.setText(info1);
         TxtNeutrofilos1.setText(info2);
         TxtHemoglobina1.setText(info3);
         TxtHematocrito1.setText(info4);
         TxtVCM1.setText(info5);
         TXtCHCM1.setText(info6);
         TxtPlaquetas1.setText(info7); 
         TxtEosinofilos1.setText(info8); 
         TxtMonocitos1.setText(info9); 
         TxtBasofilo1.setText(info10); 
            }

        } catch (Exception e) {System.out.println(e);
        }  
        
 finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
            
        
        
          try {

            String sql2 = "SELECT * FROM referencia_qumicasanguinea";

            con = cn.getConnection();
            ps = con.prepareStatement(sql2);
            rs = ps.executeQuery();
            if (rs.next()) {
                String info0 = rs.getString("GLICEMIA");
                String info1 = rs.getString("UREA");
                String info2 = rs.getString("CREATININA");
                String info3 = rs.getString("ACIDO_URICO");
                String info4 = rs.getString("COLESTEROL");
                String info5 = rs.getString("TRIGLICERIDOS");
                String info6 = rs.getString("HDL");
                String info7 = rs.getString("LDL");
                String info8 = rs.getString("VLDL");
                String info9 = rs.getString("BILITOTAL");
                String info10 = rs.getString("BILIDIRECTA");
                String info11 = rs.getString("BILIINDIRECTA");
                String info12 = rs.getString("PROTEINAS_TOTALES");
                String info13 = rs.getString("ALBUMINA");
                String info14 = rs.getString("GLOBULINAS");
                String info15 = rs.getString("RELACION");
                String info16 = rs.getString("TGO");
                String info17 = rs.getString("TGP");
                String info18 = rs.getString("CALCIO");
                String info19 = rs.getString("FOSFATASA");
                String info20 = rs.getString("GLICEMIAPANDRIAL");
                String info21 = rs.getString("FOSFORO");
                String info22 = rs.getString("MAGNESIO");
                
         TXTGLICEMIA1.setText(info0); 
         TXTUREA1.setText(info1);
         TXTCREATININA1.setText(info2);
         TXTACIDOURICO1.setText(info3);
         TXTCOLESTEROL1.setText(info4);
         TXTRIGLICERIDOS1.setText(info5);
         TXTHDL1.setText(info6);
         TXTLDL1.setText(info7); 
                
         
         TXTVLDL1.setText(info8); 
         TXTBILITOTAL1.setText(info9);
         TXTBILIDIRECTA1.setText(info10);
         TXTBILIINDIRECTA1.setText(info11);
         TXTPROTEINAS1.setText(info12);
         TXTALBUMINA1.setText(info13);
         TXTGLOBULINAS1.setText(info14);
         TXTRELACION1.setText(info15);
         
         TXTTGO1.setText(info16); 
         TXTTGP1.setText(info17);
         TXTCALCIO1.setText(info18);
         TXTFOSFATA1.setText(info19);
         TXTPANDRIAL1.setText(info20);
         TXTFOSFORO1.setText(info21);
         TXTMAGNESIO1.setText(info22);
         
 
            }

        } catch (Exception e) {System.out.println(e);
        }  
        
        
    finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
        
        
        
        
          
          
          
               try {

            String sql = "select * from referencia_ppt";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                String info0 = rs.getString("Rpc");
                String info1 = rs.getString("Dpc");
                String info2 = rs.getString("VRH");
                String info3 = rs.getString("M");
                String info4 = rs.getString("Niños");
                String info5 = rs.getString("UnidRPC");
                String info6 = rs.getString("UnidDPC");
                
         TXTRPC.setText(info0); 
         TXTDPC.setText(info1);
         TXTVRH.setText(info2);
         TXTM.setText(info3);
         TXTKIDS.setText(info4);
         TXTUNID.setText(info5);
         TXTUNID2.setText(info6);
            }

        } catch (Exception e) {System.out.println(e);
        }  
    finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
               
               
               
               Callenzimas();
        
    }
      public void ActualizarReferenciaPPT()   {
                   
                   

        Connection con=null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps=null;
        ResultSet rs=null;

        try {
            String sql = "update referencia_ppt set Rpc=?,Dpc=?,VRH=?,M=?,Niños=?, UnidRPC=?, UnidDPC=? " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, TXTRPC.getText());
            ps.setString(2, TXTDPC.getText());
            ps.setString(3, TXTVRH.getText());
            ps.setString(4, TXTM.getText());
            ps.setString(5, TXTKIDS.getText());
            ps.setString(6, TXTUNID.getText());
            ps.setString(7, TXTUNID2.getText());

            int res = ps.executeUpdate();

            if (res >= 1) {
                JOptionPane.showMessageDialog(null, "LOS VALORES REFENCIALES HAN SIDO MODIFICADOS", "VALORES REFENCIALES", 1);
            } else {
                JOptionPane.showMessageDialog(null, "Fallo al actualizar los datos....");
            }
        } catch (Exception e) {
            System.out.println(e);
        }
           
           
                  }
               
      
      
      
      
                     public void AuditoriaAgregar(){
            
            
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Agrego al paciente "+ TXTPnombre.getText()+" "+TXTPapellido.getText() +" " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idusuario);
            ps.setInt(2, idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
  finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
     
    }               
                    
          public void AuditoriaModificar(){
            
            
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("yyyy-MM-dd").format(Menu.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Modificó los valores referenciales de: Perfil20" ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idusuario);
            ps.setInt(2, idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
 finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
     
    }                                        
         
      

      
 public void updateReporte()
    {

      
        ruta_archivo="C://Fundaginebra//Reportes//"+PdfNames+".pdf";
        int codigo =  idCallestudios;
        File ruta = new File(ruta_archivo);
       
        
       
        
        if ( ruta_archivo.trim().length() != 0) {
 
         update_pdf(codigo, ruta);
         ruta_archivo = "";

  
        } else {
            //JOptionPane.showMessageDialog(null, "Rellenar todo los campos");
        }
    
    }
       
       

      
       public void update_pdf(int codigo, File ruta) {
           
        updateLaboratorio pa = new updateLaboratorio();
        updateLaboratorioDao po = new  updateLaboratorioDao();
        pa.setIdlabUpdate(codigo);
        
        try {
            byte[] pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
            pa.setArchivoUpdate(pdf);
        } catch (IOException ex) {
            pa.setArchivoUpdate(null);
            System.out.println("Error al agregar archivo pdf "+ex);
        }
        po.updateLaboratorio(pa);
    }
   

    
          
          
          
   public void mostrarHematologia() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM lab_hematologia WHERE id_historiaH=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            TxtLeucocitos.setText(rs.getString("Leucocitos"));
            TxtLinfocitos.setText(rs.getString("Linfocitos"));
            TxtNeutrofilos.setText(rs.getString("Neutrofilos"));
            TxtHemoglobina.setText(rs.getString("Hemoglobina"));
            TxtHematocrito.setText(rs.getString("Hematocrito"));
            TxtVCM.setText(rs.getString("VCM"));
            TXtCHCM.setText(rs.getString("CHCM"));
            TxtPlaquetas.setText(rs.getString("Plaquetas"));
            TxtEosinofilos.setText(rs.getString("Eosinofilos"));
            TxtMonocitos.setText(rs.getString("Monocitos"));
            TxtBasofilo.setText(rs.getString("Basofilo"));
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}

          
          

   
   public void mostrarQuimica() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_quimica` WHERE id_historiaQU=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        
       
        
        
        
        while (rs.next()) {
TXTGLICEMIA.setText(rs.getString("GLICEMIA"));
TXTPANDRIAL.setText(rs.getString("GLICEMIAPANDRIAL"));
TXTUREA.setText(rs.getString("UREA"));
TXTCREATININA.setText(rs.getString("CREATININA"));
TXTACIDOURICO.setText(rs.getString("ACIDO_URICO"));
TXTCOLESTEROL.setText(rs.getString("COLESTEROL"));
TXTRIGLICERIDOS.setText(rs.getString("TRIGLICERIDOS"));
TXTHDL.setText(rs.getString("HDL"));
TXTLDL.setText(rs.getString("LDL"));
TXTVLDL.setText(rs.getString("VLDL"));
TXTBILITOTAL.setText(rs.getString("BILITOTAL"));
TXTBILIDIRECTA.setText(rs.getString("BILIDIRECTA"));
TXTBILIINDIRECTA.setText(rs.getString("BILIINDIRECTA"));
TXTPROTEINAS.setText(rs.getString("PROTEINAS_TOTALES"));
TXTALBUMINA.setText(rs.getString("ALBUMINA"));
TXTGLOBULINAS.setText(rs.getString("GLOBULINAS"));
TXTRELACION.setText(rs.getString("RELACION"));
TXTTGO.setText(rs.getString("TGO"));
TXTTGP.setText(rs.getString("TGP"));
TXTFOSFATA.setText(rs.getString("FOSFATASA"));
TXTCALCIO.setText(rs.getString("CALCIO"));
TXTFOSFORO.setText(rs.getString("FOSFORO"));
TXTMAGNESIO.setText(rs.getString("MAGNESIO"));         
         
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    }finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}
   
  
   
   
    
          public void mostrarVIH() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_vih` WHERE id_historiaVIH=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            TXTHLV.setSelectedItem(rs.getString("EDGENS"));
            TXTVDRL.setSelectedItem(rs.getString("VDRL"));
        
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}


   
     
   public void mostrarEnzimas() {

   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
   
        try {

            String sql = "SELECT * FROM `lab_enzimas` WHERE  id_historiaEn=?";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idCallestudios);
            rs = ps.executeQuery();
            while (rs.next()) {
     
               TXTLDH.setText(rs.getString("LDH"));
               TXTGGT.setText(rs.getString("GGT"));
               TXTAMILASA.setText(rs.getString("AMILASA"));
               TXTLIPASA.setText(rs.getString("LIPASA"));
          
           
           
            }

        } catch (Exception e) {System.out.println(e);
        }
          finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
        
    }
          
          
public void mostrarSerologia() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_serologia` WHERE id_historiaSE=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            TXTVDRL.setSelectedItem(rs.getString("VDRL"));
            JCPruebasangre.setSelectedItem(rs.getString("embarazo"));
            TXTrematoideo.setText(rs.getString("reumatoideo"));
            TXTREACTIVA.setText(rs.getString("reactiva"));
            TXTASTRO.setText(rs.getString("asto"));
            TxtObservacion.setText(rs.getString("observaciones"));
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}

   public void backtoConsulta(){
   
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       ConsultaLaboratorio jlab = new ConsultaLaboratorio();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(jlab);
       jlab.setClosable(true);
       jlab.setIconifiable(true);
       
        try {
            jlab.setMaximum(true);
        } catch (Exception e) {
        }
        jlab.toFront();
        jlab.setVisible(true);

   
   }
   
          
   public void comprobarCheck(){
    
       if(
          !TxtDensidad.getText().equals("") 
          || !TxtLeucositos.getText().equals("")){
       
           JcheckUro.setSelected(true);
      }
       
       
       if(!JtextMicroscopio.getText().equals("") ){
       JcheckCopro.setSelected(true);
      
           }
       
       
       if(!TXTPROTROMBINA.getText().equals("") 
          ||  !TXTPARCIAL.getText().equals("")
          ||  !TXTVSG.getText().equals("")     
               )
       
       {
       JCheckppt.setSelected(true);
       }
       
       
       

          
          
             if(!TXTLDH.getText().equals("") 
          ||  !TXTAMILASA.getText().equals("")
          ||  !TXTGGT.getText().equals("") 
          ||  !TXTLIPASA.getText().equals("") 
               )
       
       {
       JEnzimatico.setSelected(true);
       }
          
   
     if(!TXTPCR.getText().equals("") ){
         JPcr.setSelected(true);
      
           }
     
     
         if(!TXTHLV.getSelectedItem().equals("Seleccionar") 
                 || !JCPruebasangre.getSelectedItem().equals("Seleccionar") 
                 || !TXTVDRL.getSelectedItem().equals("Seleccionar") 
                 || !TXTREACTIVA.getText().equals("") 
                 || !TXTrematoideo.getText().equals("")
                 || !TXTASTRO.getText().equals("")
           
                 ){
         JSerologia.setSelected(true);
         JradioSero.setEnabled(true);
      
           }
     
        if(!TXTSANGUINEO.getText().equals("") ){
        JSanguineo.setSelected(true);
      
           }
         
         
         
   }
   
 public void mostrarUroanalisis() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_uroanalisis` WHERE id_historiaUR=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            JCcolor1.setSelectedItem((rs.getString("Color")));
            TxtOlor1.setText(rs.getString("Olor"));
            TxtDensidad.setText(rs.getString("Densidad"));
            JCaspecto.setSelectedItem((rs.getString("Aspecto")));
            JCph.setSelectedItem((rs.getString("PH")));
            JCglucosa1.setSelectedItem((rs.getString("Glucosa")));
            JCproteinas.setSelectedItem((rs.getString("Proteinas")));
            JChemoglobina.setSelectedItem((rs.getString("Hemoglobina")));
            JCnitridos.setSelectedItem((rs.getString("Nitritos")));
            JCcuerposCe.setSelectedItem((rs.getString("Cetonico")));
            JCurobilinogeno1.setSelectedItem((rs.getString("Urobilinogeno")));
            JCpigmentos.setSelectedItem((rs.getString("Pgmentos")));
            JCbilirrubina.setSelectedItem((rs.getString("Bilirrubina")));
            TxtLeucositos.setText(rs.getString("Leucocitos"));
            JCbacterias.setSelectedItem((rs.getString("Bacterias")));
            JCEP.setSelectedItem((rs.getString("CelulcasEP")));
            TxtHematies.setText(rs.getString("Hematies"));
            TxtCelulasredondas.setText(rs.getString("CelulasRedondas"));
            TxtFilamentos.setSelectedItem(rs.getString("Filamentos"));
            Txtcilindros.setText(rs.getString("cilindros"));
            Txtcristales.setText(rs.getString("cristales"));
           
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}




 public void mostrarCopro() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_coproanalisis` WHERE id_historiaCO=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
           JCcolor4.setSelectedItem((rs.getString("Color")));
           JCAspect.setSelectedItem((rs.getString("Aspecto")));
           JCconsistencia.setSelectedItem((rs.getString("Consistencia")));
           JCreaccion1.setSelectedItem((rs.getString("Reaccion")));
           JCmoco.setSelectedItem((rs.getString("Moco")));
           Jolor.setSelectedItem((rs.getString("Olor")));
           JCsangre1.setSelectedItem((rs.getString("Sangre")));
           JCrestos.setSelectedItem((rs.getString("Alimentos")));
           JtextMicroscopio.setText(rs.getString("Observacion"));
      
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}

   
    public void mostrarPTT() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_ptt` WHERE id_historiaPTT=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            TXTPROTROMBINA.setText(rs.getString("TiempoPro"));
            TXTPARCIAL.setText(rs.getString("TiempoParTro"));
            TXTVSG.setText(rs.getString("VSG"));
            JtextISIS.setText(rs.getString("ISI"));
            JtextINR.setText(rs.getString("INR"));
          
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}
  
    
    
    
    public void mostrarPCR() {

   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
   
        try {

            String sql = "SELECT  `PCR` FROM `lab_pcr` WHERE `id_historiaPCR`=?";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1, idCallestudios);
            rs = ps.executeQuery();
            while (rs.next()) {
                String pcr = rs.getString("PCR");
             
           
                TXTPCR.setText(pcr);
          
               
            }

        } catch (Exception e) {System.out.println(e);
        }
            finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
        
    }
    
    
    
       
   public void mostrarGrupo() {
    Connection con = null;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String sql = "SELECT * FROM `lab_grupo` WHERE id_historia=?";
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setInt(1, idCallestudios);
        rs = ps.executeQuery();
        
        while (rs.next()) {
            TXTSANGUINEO.setText(rs.getString("grupo"));
            TXTRH.setText(rs.getString("factorRh"));
            TxtObservacion.setText(rs.getString("observacion"));
       
        }

    } catch (SQLException e) {
        System.out.println("Error en la consulta: " + e);
    } finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
}
    
    
    
    
    
    
   public void Callenzimas() {
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
         
        try {

            String sql = "select * from referencia_enzimas";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                String info0 = rs.getString("LDH");
                String info1 = rs.getString("GGT");
                String info2 = rs.getString("GGTM");
                String info3 = rs.getString("AMILASA");
                String info4 = rs.getString("LIPASA");

                
         TXTLDH1.setText(info0); 
         TXTHGGT1.setText(info1);
         TXTMGGT1.setText(info2);
         TXTAMILASA1.setText(info3);
         TXTLIPASA1.setText(info4);
       
            }

        } catch (Exception e) {System.out.println(e);
        }
        
      finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
    }
   
   
   public void modificarEnzimas(){
   
   
        Connection con=null;
        EnlaceBd cn = new EnlaceBd();
        PreparedStatement ps=null;
        ResultSet rs=null;

        try {
            String sql = "update referencia_enzimas set LDH=?,GGT=?,GGTM=?,AMILASA=?,LIPASA=? " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setString(1, TXTLDH1.getText());
            ps.setString(2, TXTHGGT1.getText());
            ps.setString(3, TXTMGGT1.getText());
            ps.setString(4, TXTAMILASA1.getText());
            ps.setString(5, TXTLIPASA1.getText());

            int res = ps.executeUpdate();

            if (res >= 1) {
                JOptionPane.showMessageDialog(null, "LOS VALORES REFENCIALES HAN SIDO MODIFICADOS", "VALORES REFENCIALES", 1);
            } else {
                JOptionPane.showMessageDialog(null, "Fallo al actualizar los datos....");
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        
      finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    }
           
   
   }
   
   
   
   
        double valorTotal;
             public void calcularValores(){
             
             double neutrofilos = Double.parseDouble(TxtNeutrofilos.getText().replace(',', '.'));   
             double linfocitos = Double.parseDouble(TxtLinfocitos.getText().replace(',', '.'));
             double eosinofilos = Double.parseDouble(TxtEosinofilos.getText().replace(',', '.'));
             double monocitos = Double.parseDouble(TxtMonocitos.getText().replace(',', '.'));
             double basofilo = Double.parseDouble(TxtBasofilo.getText().replace(',', '.'));
             
             valorTotal =neutrofilos+ eosinofilos+linfocitos+monocitos +basofilo;
         //    System.out.println(valorTotal);
             }
             
   
   
   
          
          
       public int idCallestudios=0;
       public String estadoEstudio="";
       private int labid;               
       private String labEstudio, labCedula, fechaEstudio;  
       
       
       
        public void setfechaEstudio(String fecha) {
        this.fechaEstudio = fecha;
    }        
       
       public String getfechaEstudio() {
        return fechaEstudio;
    } 
       
       public void setValorA(int labid2) {
        this.labid = labid2;
    }        
       
       public int getValorA() {
        return labid;
    } 

       
        public void setValorB(String labEstudio2) {
        this.labEstudio = labEstudio2;
    }        
         public String getValorB() {
        return labEstudio;
    }
         
         
        public void setValorC(String labCedula2) {
        this.labCedula = labCedula2;
    }        
         public String getValorC() {
        return labCedula;
    }      
          
    int order=0;
    String Factura="";
     public void knowAboutplace(){
        
       
          SimpleDateFormat FormatoFecha = new SimpleDateFormat("yyyy/MM/dd");
          String Fecha = FormatoFecha.format(Menu.FechaAdmin.getDate());
          
          if(!estadoEstudio.equals("")){  
          
          String fechaEstudio1 = fechaEstudio; 
          String[] partesFecha = fechaEstudio1.split("/");
          String mesFormateado = String.format("%02d", Integer.parseInt(partesFecha[1]));
          Fecha = partesFecha[2] + "/" + mesFormateado + "/" + partesFecha[0];
           }
          
          
          
          Connection con=null;
          EnlaceBd cn = new EnlaceBd();
          PreparedStatement ps=null;
          ResultSet rs=null;
     
       
         String busqueda = this.TXTPcedula.getText();
         try{
         String sql="SELECT id_orden, lugar, cedula, nombre, apellido, fecha, Factura " +
                     "FROM orden_lab o " +
                     "INNER JOIN table_paciente n " +
                     "ON o.paciente = n.Idpaciente " +
                     "WHERE Cedula = ? AND fecha = ?";
      
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setString(1, busqueda );
        ps.setString(2, Fecha);
        rs=ps.executeQuery();
        if(rs.next()){
        order=rs.getInt("lugar");
        Factura=rs.getString("Factura");
    //  System.out.println(order);
         }
        
        else{
        Factura="";
        }


}catch(Exception e){

System.out.println("error en knowAboutPlace"+e);
}
         
    finally {
        cn.closeResources(rs, ps, con);  // Cerrar recursos en el bloque finally
    } }


          
          
    public void procesarPaciente() {
    // Primero valida la cédula
    String cedula = TXTPcedula.getText();
    if ("V-".equals(cedula) || cedula.isEmpty()) {
        JOptionPane.showMessageDialog(null, "CAMPO VACIO O CÉDULA INVALIDA", "CÉDULA", JOptionPane.ERROR_MESSAGE);
        TXTPcedula.setText("V-");
        return; // Detiene la ejecución si la cédula es inválida
    }
    
    // Luego, llama a knowAboutplace para buscar la factura
    knowAboutplace();
    
    if (Factura.equals("")) {
        // Si no se encuentra factura, pregunta si desea registrar
        if (JOptionPane.showConfirmDialog(rootPane, "ESTE PACIENTE NO TIENE UN NÚMERO DE ORDEN NI FACTURA ASIGNADO ¿DESEA AGREGARLO?",
            "PACIENTE", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {       
            goToRegister();
        }
    } else {
        // Si ya tiene factura, se puede proceder con la llamada a Callpacient()
        Callpacient();
    }
}      
          
          
          
 


     
    
    
    
    
               
  DefaultTableModel modelo = new DefaultTableModel();
 

  Temporal MP = new Temporal();
  Mprincipal Menu = new Mprincipal();
  int idusuario=MP.getTexto();

  Encriptar encriptar = new Encriptar();
  JCPacientes pacientes  = new JCPacientes();
  JPacientesDao pacientesDao  = new JPacientesDao();     
  Tabla_PdfVO tpdf = new Tabla_PdfVO();   
  String ruta_archivo = "";
  String Usuario;
  Validar va = new Validar();
  labEstudiosBdDao labDao = new labEstudiosBdDao();
  Jlab_auditorias audit = new Jlab_auditorias();
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgregar;
    private javax.swing.JButton BtnCancelar;
    private javax.swing.JButton BtnSearch;
    private javax.swing.JLabel FechaAc6;
    private javax.swing.JLabel FechaAc8;
    private com.toedter.calendar.JDateChooser FechaNacimiento;
    private javax.swing.JTextField IdPacientess;
    private javax.swing.JComboBox<String> JCAspect;
    private javax.swing.JComboBox<String> JCEP;
    private javax.swing.JComboBox<String> JCPruebasangre;
    private javax.swing.JComboBox<String> JCaspecto;
    private javax.swing.JComboBox<String> JCbacterias;
    private javax.swing.JComboBox<String> JCbilirrubina;
    private javax.swing.JComboBox<String> JCcolor1;
    private javax.swing.JComboBox<String> JCcolor4;
    private javax.swing.JComboBox<String> JCconsistencia;
    private javax.swing.JComboBox<String> JCcuerposCe;
    private javax.swing.JComboBox<String> JCglucosa1;
    public javax.swing.JCheckBox JCheckppt;
    private javax.swing.JComboBox<String> JChemoglobina;
    private javax.swing.JComboBox<String> JCmoco;
    private javax.swing.JComboBox<String> JCnitridos;
    private javax.swing.JComboBox<String> JCph;
    private javax.swing.JComboBox<String> JCpigmentos;
    private javax.swing.JComboBox<String> JCproteinas;
    private javax.swing.JComboBox<String> JCreaccion1;
    private javax.swing.JComboBox<String> JCrestos;
    private javax.swing.JComboBox<String> JCsangre1;
    private javax.swing.JComboBox<String> JCurobilinogeno1;
    public javax.swing.JCheckBox JEnzimatico;
    public javax.swing.JCheckBox JObserva;
    public javax.swing.JCheckBox JPcr;
    private javax.swing.JPanel JPregistro;
    private javax.swing.JRadioButton JRMasculino;
    private javax.swing.JRadioButton JRfemenino;
    public javax.swing.JCheckBox JSanguineo;
    public javax.swing.JCheckBox JSerologia;
    public javax.swing.JCheckBox JcheckCopro;
    public javax.swing.JCheckBox JcheckUro;
    private javax.swing.JComboBox<String> Jolor;
    private javax.swing.JPanel JpanelCopro;
    private javax.swing.JPanel JpanelUro;
    private javax.swing.JRadioButton JradioPerfil;
    public javax.swing.JRadioButton JradioPtt;
    public javax.swing.JRadioButton JradioSero;
    public javax.swing.JRadioButton JradioUroanalisis;
    private javax.swing.JRadioButton Jradioreferencias;
    private javax.swing.JTextField JtextINR;
    private javax.swing.JTextField JtextISIS;
    private javax.swing.JTextArea JtextMicroscopio;
    private javax.swing.JTextField TXTACIDOURICO;
    private javax.swing.JTextField TXTACIDOURICO1;
    private javax.swing.JTextField TXTALBUMINA;
    private javax.swing.JTextField TXTALBUMINA1;
    private javax.swing.JTextField TXTAMILASA;
    private javax.swing.JTextField TXTAMILASA1;
    private javax.swing.JTextField TXTASTRO;
    private javax.swing.JTextField TXTBILIDIRECTA;
    private javax.swing.JTextField TXTBILIDIRECTA1;
    private javax.swing.JTextField TXTBILIINDIRECTA;
    private javax.swing.JTextField TXTBILIINDIRECTA1;
    private javax.swing.JTextField TXTBILITOTAL;
    private javax.swing.JTextField TXTBILITOTAL1;
    private javax.swing.JTextField TXTCALCIO;
    private javax.swing.JTextField TXTCALCIO1;
    private javax.swing.JTextField TXTCOLESTEROL;
    private javax.swing.JTextField TXTCOLESTEROL1;
    private javax.swing.JTextField TXTCREATININA;
    private javax.swing.JTextField TXTCREATININA1;
    private javax.swing.JTextField TXTDPC;
    private javax.swing.JTextField TXTFOSFATA;
    private javax.swing.JTextField TXTFOSFATA1;
    private javax.swing.JTextField TXTFOSFORO;
    private javax.swing.JTextField TXTFOSFORO1;
    private javax.swing.JTextField TXTGGT;
    private javax.swing.JTextField TXTGLICEMIA;
    private javax.swing.JTextField TXTGLICEMIA1;
    private javax.swing.JTextField TXTGLOBULINAS;
    private javax.swing.JTextField TXTGLOBULINAS1;
    private javax.swing.JTextField TXTHDL;
    private javax.swing.JTextField TXTHDL1;
    private javax.swing.JTextField TXTHGGT1;
    private javax.swing.JComboBox<String> TXTHLV;
    private javax.swing.JTextField TXTKIDS;
    private javax.swing.JTextField TXTLDH;
    private javax.swing.JTextField TXTLDH1;
    private javax.swing.JTextField TXTLDL;
    private javax.swing.JTextField TXTLDL1;
    private javax.swing.JTextField TXTLIPASA;
    private javax.swing.JTextField TXTLIPASA1;
    private javax.swing.JTextField TXTM;
    private javax.swing.JTextField TXTMAGNESIO;
    private javax.swing.JTextField TXTMAGNESIO1;
    private javax.swing.JTextField TXTMGGT1;
    private javax.swing.JTextField TXTPANDRIAL;
    private javax.swing.JTextField TXTPANDRIAL1;
    private javax.swing.JTextField TXTPARCIAL;
    private javax.swing.JTextField TXTPCR;
    private javax.swing.JTextField TXTPCR1;
    private javax.swing.JTextField TXTPROTEINAS;
    private javax.swing.JTextField TXTPROTEINAS1;
    private javax.swing.JTextField TXTPROTROMBINA;
    private javax.swing.JTextField TXTPapellido;
    public javax.swing.JTextField TXTPcedula;
    private javax.swing.JTextField TXTPcorreo;
    private javax.swing.JTextArea TXTPdireccion;
    private javax.swing.JTextField TXTPnombre;
    private javax.swing.JFormattedTextField TXTPtelefono;
    private javax.swing.JTextField TXTREACTIVA;
    private javax.swing.JTextField TXTRELACION;
    private javax.swing.JTextField TXTRELACION1;
    private javax.swing.JTextField TXTRH;
    private javax.swing.JTextField TXTRH1;
    private javax.swing.JTextField TXTRH3;
    private javax.swing.JTextField TXTRIGLICERIDOS;
    private javax.swing.JTextField TXTRIGLICERIDOS1;
    private javax.swing.JTextField TXTRPC;
    private javax.swing.JTextField TXTSANGUINEO;
    private javax.swing.JTextField TXTSANGUINEO1;
    private javax.swing.JTextField TXTSANGUINEO3;
    private javax.swing.JTextField TXTTGO;
    private javax.swing.JTextField TXTTGO1;
    private javax.swing.JTextField TXTTGP;
    private javax.swing.JTextField TXTTGP1;
    private javax.swing.JTextField TXTUNID;
    private javax.swing.JTextField TXTUNID2;
    private javax.swing.JTextField TXTUREA;
    private javax.swing.JTextField TXTUREA1;
    private javax.swing.JComboBox<String> TXTVDRL;
    private javax.swing.JTextField TXTVLDL;
    private javax.swing.JTextField TXTVLDL1;
    private javax.swing.JTextField TXTVRH;
    private javax.swing.JTextField TXTVSG;
    private javax.swing.JTextField TXTfungicas;
    private javax.swing.JTextField TXTrematoideo;
    private javax.swing.JTextField TXtCHCM;
    private javax.swing.JTextField TXtCHCM1;
    private javax.swing.JTextField TxtBasofilo;
    private javax.swing.JTextField TxtBasofilo1;
    private javax.swing.JTextField TxtCelulasredondas;
    private javax.swing.JTextField TxtDensidad;
    private javax.swing.JTextField TxtEosinofilos;
    private javax.swing.JTextField TxtEosinofilos1;
    private javax.swing.JComboBox<String> TxtFilamentos;
    private javax.swing.JTextField TxtHematies;
    private javax.swing.JTextField TxtHematocrito;
    private javax.swing.JTextField TxtHematocrito1;
    private javax.swing.JTextField TxtHemoglobina;
    private javax.swing.JTextField TxtHemoglobina1;
    private javax.swing.JTextField TxtLeucocitos;
    private javax.swing.JTextField TxtLeucocitos1;
    private javax.swing.JTextField TxtLeucositos;
    private javax.swing.JTextField TxtLinfocitos;
    private javax.swing.JTextField TxtLinfocitos1;
    private javax.swing.JTextField TxtMonocitos;
    private javax.swing.JTextField TxtMonocitos1;
    private javax.swing.JTextField TxtNeutrofilos;
    private javax.swing.JTextField TxtNeutrofilos1;
    private javax.swing.JTextArea TxtObservacion;
    private javax.swing.JTextField TxtOlor1;
    private javax.swing.JTextField TxtPlaquetas;
    private javax.swing.JTextField TxtPlaquetas1;
    private javax.swing.JTextField TxtVCM;
    private javax.swing.JTextField TxtVCM1;
    private javax.swing.JTextField Txtcilindros;
    private javax.swing.JTextField Txtcristales;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton34;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
